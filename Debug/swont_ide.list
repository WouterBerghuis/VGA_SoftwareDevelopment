
swont_ide.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004358  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  080044e0  080044e0  000144e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004544  08004544  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004544  08004544  00014544  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800454c  0800454c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800454c  0800454c  0001454c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004550  08004550  00014550  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004554  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012e4c  20000070  080045c4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20012ebc  080045c4  00022ebc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e173  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000237f  00000000  00000000  0002e213  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c90  00000000  00000000  00030598  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b58  00000000  00000000  00031228  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021e66  00000000  00000000  00031d80  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b5c0  00000000  00000000  00053be6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c9f51  00000000  00000000  0005f1a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001290f7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003430  00000000  00000000  00129174  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080044c8 	.word	0x080044c8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	080044c8 	.word	0x080044c8

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80004de:	2300      	movs	r3, #0
 80004e0:	607b      	str	r3, [r7, #4]
 80004e2:	4b0c      	ldr	r3, [pc, #48]	; (8000514 <MX_DMA_Init+0x3c>)
 80004e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004e6:	4a0b      	ldr	r2, [pc, #44]	; (8000514 <MX_DMA_Init+0x3c>)
 80004e8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80004ec:	6313      	str	r3, [r2, #48]	; 0x30
 80004ee:	4b09      	ldr	r3, [pc, #36]	; (8000514 <MX_DMA_Init+0x3c>)
 80004f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80004f6:	607b      	str	r3, [r7, #4]
 80004f8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 80004fa:	2200      	movs	r2, #0
 80004fc:	2100      	movs	r1, #0
 80004fe:	2044      	movs	r0, #68	; 0x44
 8000500:	f000 fe8b 	bl	800121a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8000504:	2044      	movs	r0, #68	; 0x44
 8000506:	f000 fea4 	bl	8001252 <HAL_NVIC_EnableIRQ>

}
 800050a:	bf00      	nop
 800050c:	3708      	adds	r7, #8
 800050e:	46bd      	mov	sp, r7
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	40023800 	.word	0x40023800

08000518 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b08a      	sub	sp, #40	; 0x28
 800051c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800051e:	f107 0314 	add.w	r3, r7, #20
 8000522:	2200      	movs	r2, #0
 8000524:	601a      	str	r2, [r3, #0]
 8000526:	605a      	str	r2, [r3, #4]
 8000528:	609a      	str	r2, [r3, #8]
 800052a:	60da      	str	r2, [r3, #12]
 800052c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800052e:	2300      	movs	r3, #0
 8000530:	613b      	str	r3, [r7, #16]
 8000532:	4b32      	ldr	r3, [pc, #200]	; (80005fc <MX_GPIO_Init+0xe4>)
 8000534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000536:	4a31      	ldr	r2, [pc, #196]	; (80005fc <MX_GPIO_Init+0xe4>)
 8000538:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800053c:	6313      	str	r3, [r2, #48]	; 0x30
 800053e:	4b2f      	ldr	r3, [pc, #188]	; (80005fc <MX_GPIO_Init+0xe4>)
 8000540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000542:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000546:	613b      	str	r3, [r7, #16]
 8000548:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800054a:	2300      	movs	r3, #0
 800054c:	60fb      	str	r3, [r7, #12]
 800054e:	4b2b      	ldr	r3, [pc, #172]	; (80005fc <MX_GPIO_Init+0xe4>)
 8000550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000552:	4a2a      	ldr	r2, [pc, #168]	; (80005fc <MX_GPIO_Init+0xe4>)
 8000554:	f043 0301 	orr.w	r3, r3, #1
 8000558:	6313      	str	r3, [r2, #48]	; 0x30
 800055a:	4b28      	ldr	r3, [pc, #160]	; (80005fc <MX_GPIO_Init+0xe4>)
 800055c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055e:	f003 0301 	and.w	r3, r3, #1
 8000562:	60fb      	str	r3, [r7, #12]
 8000564:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000566:	2300      	movs	r3, #0
 8000568:	60bb      	str	r3, [r7, #8]
 800056a:	4b24      	ldr	r3, [pc, #144]	; (80005fc <MX_GPIO_Init+0xe4>)
 800056c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056e:	4a23      	ldr	r2, [pc, #140]	; (80005fc <MX_GPIO_Init+0xe4>)
 8000570:	f043 0310 	orr.w	r3, r3, #16
 8000574:	6313      	str	r3, [r2, #48]	; 0x30
 8000576:	4b21      	ldr	r3, [pc, #132]	; (80005fc <MX_GPIO_Init+0xe4>)
 8000578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057a:	f003 0310 	and.w	r3, r3, #16
 800057e:	60bb      	str	r3, [r7, #8]
 8000580:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000582:	2300      	movs	r3, #0
 8000584:	607b      	str	r3, [r7, #4]
 8000586:	4b1d      	ldr	r3, [pc, #116]	; (80005fc <MX_GPIO_Init+0xe4>)
 8000588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058a:	4a1c      	ldr	r2, [pc, #112]	; (80005fc <MX_GPIO_Init+0xe4>)
 800058c:	f043 0302 	orr.w	r3, r3, #2
 8000590:	6313      	str	r3, [r2, #48]	; 0x30
 8000592:	4b1a      	ldr	r3, [pc, #104]	; (80005fc <MX_GPIO_Init+0xe4>)
 8000594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000596:	f003 0302 	and.w	r3, r3, #2
 800059a:	607b      	str	r3, [r7, #4]
 800059c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, VGA_BLUE0_Pin|VGA_BLUE1_Pin|VGA_GREEN0_Pin|VGA_GREEN1_Pin 
 800059e:	2200      	movs	r2, #0
 80005a0:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 80005a4:	4816      	ldr	r0, [pc, #88]	; (8000600 <MX_GPIO_Init+0xe8>)
 80005a6:	f001 fb99 	bl	8001cdc <HAL_GPIO_WritePin>
                          |VGA_GREEN2_Pin|VGA_RED0_Pin|VGA_RED1_Pin|VGA_RED2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(VGA_VSYNC_GPIO_Port, VGA_VSYNC_Pin, GPIO_PIN_RESET);
 80005aa:	2200      	movs	r2, #0
 80005ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005b0:	4814      	ldr	r0, [pc, #80]	; (8000604 <MX_GPIO_Init+0xec>)
 80005b2:	f001 fb93 	bl	8001cdc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin 
                           PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = VGA_BLUE0_Pin|VGA_BLUE1_Pin|VGA_GREEN0_Pin|VGA_GREEN1_Pin 
 80005b6:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 80005ba:	617b      	str	r3, [r7, #20]
                          |VGA_GREEN2_Pin|VGA_RED0_Pin|VGA_RED1_Pin|VGA_RED2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005bc:	2301      	movs	r3, #1
 80005be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c0:	2300      	movs	r3, #0
 80005c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005c4:	2303      	movs	r3, #3
 80005c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80005c8:	f107 0314 	add.w	r3, r7, #20
 80005cc:	4619      	mov	r1, r3
 80005ce:	480c      	ldr	r0, [pc, #48]	; (8000600 <MX_GPIO_Init+0xe8>)
 80005d0:	f001 f9ea 	bl	80019a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VGA_VSYNC_Pin;
 80005d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005da:	2301      	movs	r3, #1
 80005dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005de:	2300      	movs	r3, #0
 80005e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005e2:	2303      	movs	r3, #3
 80005e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(VGA_VSYNC_GPIO_Port, &GPIO_InitStruct);
 80005e6:	f107 0314 	add.w	r3, r7, #20
 80005ea:	4619      	mov	r1, r3
 80005ec:	4805      	ldr	r0, [pc, #20]	; (8000604 <MX_GPIO_Init+0xec>)
 80005ee:	f001 f9db 	bl	80019a8 <HAL_GPIO_Init>

}
 80005f2:	bf00      	nop
 80005f4:	3728      	adds	r7, #40	; 0x28
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	40023800 	.word	0x40023800
 8000600:	40021000 	.word	0x40021000
 8000604:	40020400 	.word	0x40020400

08000608 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b084      	sub	sp, #16
 800060c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800060e:	f000 fcb7 	bl	8000f80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000612:	f000 f831 	bl	8000678 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000616:	f7ff ff7f 	bl	8000518 <MX_GPIO_Init>
  MX_DMA_Init();
 800061a:	f7ff ff5d 	bl	80004d8 <MX_DMA_Init>
  MX_TIM1_Init();
 800061e:	f000 fa0f 	bl	8000a40 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000622:	f000 fa5d 	bl	8000ae0 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000626:	f000 fb73 	bl	8000d10 <MX_USART2_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800062a:	f000 f88f 	bl	800074c <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  UB_VGA_Screen_Init(); // Init VGA-Screen
 800062e:	f000 fc0b 	bl	8000e48 <UB_VGA_Screen_Init>

  UB_VGA_FillScreen(VGA_COL_WHITE);
 8000632:	20ff      	movs	r0, #255	; 0xff
 8000634:	f000 fc5a 	bl	8000eec <UB_VGA_FillScreen>
  UB_VGA_SetPixel(10,10,10);
 8000638:	220a      	movs	r2, #10
 800063a:	210a      	movs	r1, #10
 800063c:	200a      	movs	r0, #10
 800063e:	f000 fc77 	bl	8000f30 <UB_VGA_SetPixel>
  UB_VGA_SetPixel(0,0,0x00);
 8000642:	2200      	movs	r2, #0
 8000644:	2100      	movs	r1, #0
 8000646:	2000      	movs	r0, #0
 8000648:	f000 fc72 	bl	8000f30 <UB_VGA_SetPixel>
  UB_VGA_SetPixel(319,0,0x00);
 800064c:	2200      	movs	r2, #0
 800064e:	2100      	movs	r1, #0
 8000650:	f240 103f 	movw	r0, #319	; 0x13f
 8000654:	f000 fc6c 	bl	8000f30 <UB_VGA_SetPixel>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	  char First[]="I,am,Jered";  // char array waarin je je string met data zet
 8000658:	4a06      	ldr	r2, [pc, #24]	; (8000674 <main+0x6c>)
 800065a:	1d3b      	adds	r3, r7, #4
 800065c:	ca07      	ldmia	r2, {r0, r1, r2}
 800065e:	c303      	stmia	r3!, {r0, r1}
 8000660:	801a      	strh	r2, [r3, #0]
 8000662:	3302      	adds	r3, #2
 8000664:	0c12      	lsrs	r2, r2, #16
 8000666:	701a      	strb	r2, [r3, #0]
	  //HAL_UART_Transmit(&huart2, (uint8_t*)First, sizeof(First), 1000); // string versturen via uart2

	  uart_parser(First);
 8000668:	1d3b      	adds	r3, r7, #4
 800066a:	4618      	mov	r0, r3
 800066c:	f000 f882 	bl	8000774 <uart_parser>
  {
 8000670:	e7f2      	b.n	8000658 <main+0x50>
 8000672:	bf00      	nop
 8000674:	080044e0 	.word	0x080044e0

08000678 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b094      	sub	sp, #80	; 0x50
 800067c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067e:	f107 0320 	add.w	r3, r7, #32
 8000682:	2230      	movs	r2, #48	; 0x30
 8000684:	2100      	movs	r1, #0
 8000686:	4618      	mov	r0, r3
 8000688:	f003 fe4e 	bl	8004328 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800068c:	f107 030c 	add.w	r3, r7, #12
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
 8000694:	605a      	str	r2, [r3, #4]
 8000696:	609a      	str	r2, [r3, #8]
 8000698:	60da      	str	r2, [r3, #12]
 800069a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800069c:	2300      	movs	r3, #0
 800069e:	60bb      	str	r3, [r7, #8]
 80006a0:	4b28      	ldr	r3, [pc, #160]	; (8000744 <SystemClock_Config+0xcc>)
 80006a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a4:	4a27      	ldr	r2, [pc, #156]	; (8000744 <SystemClock_Config+0xcc>)
 80006a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006aa:	6413      	str	r3, [r2, #64]	; 0x40
 80006ac:	4b25      	ldr	r3, [pc, #148]	; (8000744 <SystemClock_Config+0xcc>)
 80006ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006b4:	60bb      	str	r3, [r7, #8]
 80006b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006b8:	2300      	movs	r3, #0
 80006ba:	607b      	str	r3, [r7, #4]
 80006bc:	4b22      	ldr	r3, [pc, #136]	; (8000748 <SystemClock_Config+0xd0>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a21      	ldr	r2, [pc, #132]	; (8000748 <SystemClock_Config+0xd0>)
 80006c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006c6:	6013      	str	r3, [r2, #0]
 80006c8:	4b1f      	ldr	r3, [pc, #124]	; (8000748 <SystemClock_Config+0xd0>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006d0:	607b      	str	r3, [r7, #4]
 80006d2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006d4:	2301      	movs	r3, #1
 80006d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006dc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006de:	2302      	movs	r3, #2
 80006e0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006e2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006e8:	2304      	movs	r3, #4
 80006ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006ec:	23a8      	movs	r3, #168	; 0xa8
 80006ee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006f0:	2302      	movs	r3, #2
 80006f2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006f4:	2304      	movs	r3, #4
 80006f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f8:	f107 0320 	add.w	r3, r7, #32
 80006fc:	4618      	mov	r0, r3
 80006fe:	f001 fb07 	bl	8001d10 <HAL_RCC_OscConfig>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000708:	f000 f82c 	bl	8000764 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800070c:	230f      	movs	r3, #15
 800070e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000710:	2302      	movs	r3, #2
 8000712:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000714:	2300      	movs	r3, #0
 8000716:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000718:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800071c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800071e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000722:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000724:	f107 030c 	add.w	r3, r7, #12
 8000728:	2105      	movs	r1, #5
 800072a:	4618      	mov	r0, r3
 800072c:	f001 fd60 	bl	80021f0 <HAL_RCC_ClockConfig>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000736:	f000 f815 	bl	8000764 <Error_Handler>
  }
}
 800073a:	bf00      	nop
 800073c:	3750      	adds	r7, #80	; 0x50
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	40023800 	.word	0x40023800
 8000748:	40007000 	.word	0x40007000

0800074c <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000750:	2200      	movs	r2, #0
 8000752:	2100      	movs	r1, #0
 8000754:	2026      	movs	r0, #38	; 0x26
 8000756:	f000 fd60 	bl	800121a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 800075a:	2026      	movs	r0, #38	; 0x26
 800075c:	f000 fd79 	bl	8001252 <HAL_NVIC_EnableIRQ>
}
 8000760:	bf00      	nop
 8000762:	bd80      	pop	{r7, pc}

08000764 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000768:	bf00      	nop
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr
	...

08000774 <uart_parser>:
#include <string.h>
#include <stdio.h>
#include "usart.h"

void uart_parser(char uartstring[])
{
 8000774:	b5b0      	push	{r4, r5, r7, lr}
 8000776:	b092      	sub	sp, #72	; 0x48
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
	int string_size = strlen(uartstring);
 800077c:	6878      	ldr	r0, [r7, #4]
 800077e:	f7ff fd23 	bl	80001c8 <strlen>
 8000782:	4603      	mov	r3, r0
 8000784:	643b      	str	r3, [r7, #64]	; 0x40
	char teststring[] = "dit is een test text met heelveel kleine woorden";
 8000786:	4b14      	ldr	r3, [pc, #80]	; (80007d8 <uart_parser+0x64>)
 8000788:	f107 040c 	add.w	r4, r7, #12
 800078c:	461d      	mov	r5, r3
 800078e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000790:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000792:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000794:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000796:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000798:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800079a:	682b      	ldr	r3, [r5, #0]
 800079c:	7023      	strb	r3, [r4, #0]
	char delim[]= " ";
 800079e:	2320      	movs	r3, #32
 80007a0:	813b      	strh	r3, [r7, #8]
	char *ptr = strtok(teststring, " ");
 80007a2:	f107 030c 	add.w	r3, r7, #12
 80007a6:	490d      	ldr	r1, [pc, #52]	; (80007dc <uart_parser+0x68>)
 80007a8:	4618      	mov	r0, r3
 80007aa:	f003 fdc5 	bl	8004338 <strtok>
 80007ae:	6478      	str	r0, [r7, #68]	; 0x44
	//_write(teststring);
	while(ptr != NULL)
 80007b0:	e00b      	b.n	80007ca <uart_parser+0x56>
		{
		    HAL_UART_Transmit(&huart2, (uint8_t*)ptr, sizeof(ptr), 1000);
 80007b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007b6:	2204      	movs	r2, #4
 80007b8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80007ba:	4809      	ldr	r0, [pc, #36]	; (80007e0 <uart_parser+0x6c>)
 80007bc:	f002 feeb 	bl	8003596 <HAL_UART_Transmit>
		//printf("'%s'\n", ptr);
			ptr = strtok(NULL, " ");
 80007c0:	4906      	ldr	r1, [pc, #24]	; (80007dc <uart_parser+0x68>)
 80007c2:	2000      	movs	r0, #0
 80007c4:	f003 fdb8 	bl	8004338 <strtok>
 80007c8:	6478      	str	r0, [r7, #68]	; 0x44
	while(ptr != NULL)
 80007ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d1f0      	bne.n	80007b2 <uart_parser+0x3e>
	//
	//	for(int i=0; i<strlen(input)/2; i++) {
	//	    output[i][0] = input[i * 2];
	//	    output[i][1] = input[(i * 2) + 1];
	//	}
}
 80007d0:	bf00      	nop
 80007d2:	3748      	adds	r7, #72	; 0x48
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bdb0      	pop	{r4, r5, r7, pc}
 80007d8:	080044f0 	.word	0x080044f0
 80007dc:	080044ec 	.word	0x080044ec
 80007e0:	20012e74 	.word	0x20012e74

080007e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	b083      	sub	sp, #12
 80007e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	607b      	str	r3, [r7, #4]
 80007ee:	4b10      	ldr	r3, [pc, #64]	; (8000830 <HAL_MspInit+0x4c>)
 80007f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007f2:	4a0f      	ldr	r2, [pc, #60]	; (8000830 <HAL_MspInit+0x4c>)
 80007f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007f8:	6453      	str	r3, [r2, #68]	; 0x44
 80007fa:	4b0d      	ldr	r3, [pc, #52]	; (8000830 <HAL_MspInit+0x4c>)
 80007fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	603b      	str	r3, [r7, #0]
 800080a:	4b09      	ldr	r3, [pc, #36]	; (8000830 <HAL_MspInit+0x4c>)
 800080c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800080e:	4a08      	ldr	r2, [pc, #32]	; (8000830 <HAL_MspInit+0x4c>)
 8000810:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000814:	6413      	str	r3, [r2, #64]	; 0x40
 8000816:	4b06      	ldr	r3, [pc, #24]	; (8000830 <HAL_MspInit+0x4c>)
 8000818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800081a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800081e:	603b      	str	r3, [r7, #0]
 8000820:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000822:	bf00      	nop
 8000824:	370c      	adds	r7, #12
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop
 8000830:	40023800 	.word	0x40023800

08000834 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000838:	bf00      	nop
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr

08000842 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000842:	b480      	push	{r7}
 8000844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000846:	e7fe      	b.n	8000846 <HardFault_Handler+0x4>

08000848 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800084c:	e7fe      	b.n	800084c <MemManage_Handler+0x4>

0800084e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800084e:	b480      	push	{r7}
 8000850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000852:	e7fe      	b.n	8000852 <BusFault_Handler+0x4>

08000854 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000858:	e7fe      	b.n	8000858 <UsageFault_Handler+0x4>

0800085a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800085a:	b480      	push	{r7}
 800085c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800085e:	bf00      	nop
 8000860:	46bd      	mov	sp, r7
 8000862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000866:	4770      	bx	lr

08000868 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800086c:	bf00      	nop
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr

08000876 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000876:	b480      	push	{r7}
 8000878:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800087a:	bf00      	nop
 800087c:	46bd      	mov	sp, r7
 800087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000882:	4770      	bx	lr

08000884 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000888:	f000 fbcc 	bl	8001024 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800088c:	bf00      	nop
 800088e:	bd80      	pop	{r7, pc}

08000890 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000894:	4828      	ldr	r0, [pc, #160]	; (8000938 <TIM2_IRQHandler+0xa8>)
 8000896:	f001 ffd9 	bl	800284c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  __HAL_TIM_CLEAR_IT(&htim2, TIM_IT_CC3); // uncomment HAL_TIM_IRQHandler(&htim2); ^^
 800089a:	4b27      	ldr	r3, [pc, #156]	; (8000938 <TIM2_IRQHandler+0xa8>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	f06f 0208 	mvn.w	r2, #8
 80008a2:	611a      	str	r2, [r3, #16]

  VGA.hsync_cnt++;
 80008a4:	4b25      	ldr	r3, [pc, #148]	; (800093c <TIM2_IRQHandler+0xac>)
 80008a6:	881b      	ldrh	r3, [r3, #0]
 80008a8:	3301      	adds	r3, #1
 80008aa:	b29a      	uxth	r2, r3
 80008ac:	4b23      	ldr	r3, [pc, #140]	; (800093c <TIM2_IRQHandler+0xac>)
 80008ae:	801a      	strh	r2, [r3, #0]
  if (VGA.hsync_cnt >= VGA_VSYNC_PERIODE)
 80008b0:	4b22      	ldr	r3, [pc, #136]	; (800093c <TIM2_IRQHandler+0xac>)
 80008b2:	881b      	ldrh	r3, [r3, #0]
 80008b4:	f5b3 7f03 	cmp.w	r3, #524	; 0x20c
 80008b8:	d905      	bls.n	80008c6 <TIM2_IRQHandler+0x36>
  {
    // -----------
    VGA.hsync_cnt = 0;
 80008ba:	4b20      	ldr	r3, [pc, #128]	; (800093c <TIM2_IRQHandler+0xac>)
 80008bc:	2200      	movs	r2, #0
 80008be:	801a      	strh	r2, [r3, #0]
    // Adresspointer first dot
    VGA.start_adr = (uint32_t)(&VGA_RAM1[0]);
 80008c0:	4a1f      	ldr	r2, [pc, #124]	; (8000940 <TIM2_IRQHandler+0xb0>)
 80008c2:	4b1e      	ldr	r3, [pc, #120]	; (800093c <TIM2_IRQHandler+0xac>)
 80008c4:	605a      	str	r2, [r3, #4]
  }

  // HSync-Pixel
  GPIOB->BSRR = (VGA.hsync_cnt < VGA_VSYNC_IMP) ? VGA_VSYNC_Pin << 16u: VGA_VSYNC_Pin;
 80008c6:	4b1d      	ldr	r3, [pc, #116]	; (800093c <TIM2_IRQHandler+0xac>)
 80008c8:	881b      	ldrh	r3, [r3, #0]
 80008ca:	2b01      	cmp	r3, #1
 80008cc:	d802      	bhi.n	80008d4 <TIM2_IRQHandler+0x44>
 80008ce:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80008d2:	e001      	b.n	80008d8 <TIM2_IRQHandler+0x48>
 80008d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008d8:	4a1a      	ldr	r2, [pc, #104]	; (8000944 <TIM2_IRQHandler+0xb4>)
 80008da:	6193      	str	r3, [r2, #24]

  // Test for DMA start
  if((VGA.hsync_cnt >= VGA_VSYNC_BILD_START) && (VGA.hsync_cnt <= VGA_VSYNC_BILD_STOP))
 80008dc:	4b17      	ldr	r3, [pc, #92]	; (800093c <TIM2_IRQHandler+0xac>)
 80008de:	881b      	ldrh	r3, [r3, #0]
 80008e0:	2b23      	cmp	r3, #35	; 0x23
 80008e2:	d927      	bls.n	8000934 <TIM2_IRQHandler+0xa4>
 80008e4:	4b15      	ldr	r3, [pc, #84]	; (800093c <TIM2_IRQHandler+0xac>)
 80008e6:	881b      	ldrh	r3, [r3, #0]
 80008e8:	f240 2202 	movw	r2, #514	; 0x202
 80008ec:	4293      	cmp	r3, r2
 80008ee:	d821      	bhi.n	8000934 <TIM2_IRQHandler+0xa4>
  {
    // after FP start => DMA Transfer

    // DMA2 init
	  DMA2_Stream5->CR = VGA.dma2_cr_reg;
 80008f0:	4a15      	ldr	r2, [pc, #84]	; (8000948 <TIM2_IRQHandler+0xb8>)
 80008f2:	4b12      	ldr	r3, [pc, #72]	; (800093c <TIM2_IRQHandler+0xac>)
 80008f4:	689b      	ldr	r3, [r3, #8]
 80008f6:	6013      	str	r3, [r2, #0]
    // set adress
    DMA2_Stream5->M0AR = VGA.start_adr;
 80008f8:	4a13      	ldr	r2, [pc, #76]	; (8000948 <TIM2_IRQHandler+0xb8>)
 80008fa:	4b10      	ldr	r3, [pc, #64]	; (800093c <TIM2_IRQHandler+0xac>)
 80008fc:	685b      	ldr	r3, [r3, #4]
 80008fe:	60d3      	str	r3, [r2, #12]
    // Timer1 start
    TIM1->CR1 |= TIM_CR1_CEN; // __HAL_TIM_ENABLE(&htim1); // too slow?
 8000900:	4b12      	ldr	r3, [pc, #72]	; (800094c <TIM2_IRQHandler+0xbc>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4a11      	ldr	r2, [pc, #68]	; (800094c <TIM2_IRQHandler+0xbc>)
 8000906:	f043 0301 	orr.w	r3, r3, #1
 800090a:	6013      	str	r3, [r2, #0]
    // DMA2 enable
    __HAL_DMA_ENABLE(&hdma_tim1_up);
 800090c:	4b10      	ldr	r3, [pc, #64]	; (8000950 <TIM2_IRQHandler+0xc0>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	681a      	ldr	r2, [r3, #0]
 8000912:	4b0f      	ldr	r3, [pc, #60]	; (8000950 <TIM2_IRQHandler+0xc0>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	f042 0201 	orr.w	r2, r2, #1
 800091a:	601a      	str	r2, [r3, #0]
    // Test Adrespointer for high
    if(VGA.hsync_cnt & 0x01)
 800091c:	4b07      	ldr	r3, [pc, #28]	; (800093c <TIM2_IRQHandler+0xac>)
 800091e:	881b      	ldrh	r3, [r3, #0]
 8000920:	f003 0301 	and.w	r3, r3, #1
 8000924:	2b00      	cmp	r3, #0
 8000926:	d005      	beq.n	8000934 <TIM2_IRQHandler+0xa4>
      VGA.start_adr += (VGA_DISPLAY_X + 1); // inc after Hsync
 8000928:	4b04      	ldr	r3, [pc, #16]	; (800093c <TIM2_IRQHandler+0xac>)
 800092a:	685b      	ldr	r3, [r3, #4]
 800092c:	f203 1341 	addw	r3, r3, #321	; 0x141
 8000930:	4a02      	ldr	r2, [pc, #8]	; (800093c <TIM2_IRQHandler+0xac>)
 8000932:	6053      	str	r3, [r2, #4]
  }
  /* USER CODE END TIM2_IRQn 1 */
}
 8000934:	bf00      	nop
 8000936:	bd80      	pop	{r7, pc}
 8000938:	20012e34 	.word	0x20012e34
 800093c:	20000098 	.word	0x20000098
 8000940:	200000a4 	.word	0x200000a4
 8000944:	40020400 	.word	0x40020400
 8000948:	40026488 	.word	0x40026488
 800094c:	40010000 	.word	0x40010000
 8000950:	20012dd4 	.word	0x20012dd4

08000954 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000958:	4802      	ldr	r0, [pc, #8]	; (8000964 <USART2_IRQHandler+0x10>)
 800095a:	f002 feb5 	bl	80036c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800095e:	bf00      	nop
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	20012e74 	.word	0x20012e74

08000968 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  // if (__HAL_DMA_GET_IT_SOURCE(&hdma_tim1_up, DMA_IT_TC)) // not needed?
  // {
    // Timer1 stop
    __HAL_TIM_DISABLE(&htim1);
 800096c:	4b10      	ldr	r3, [pc, #64]	; (80009b0 <DMA2_Stream5_IRQHandler+0x48>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	6a1a      	ldr	r2, [r3, #32]
 8000972:	f241 1311 	movw	r3, #4369	; 0x1111
 8000976:	4013      	ands	r3, r2
 8000978:	2b00      	cmp	r3, #0
 800097a:	d10f      	bne.n	800099c <DMA2_Stream5_IRQHandler+0x34>
 800097c:	4b0c      	ldr	r3, [pc, #48]	; (80009b0 <DMA2_Stream5_IRQHandler+0x48>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	6a1a      	ldr	r2, [r3, #32]
 8000982:	f240 4344 	movw	r3, #1092	; 0x444
 8000986:	4013      	ands	r3, r2
 8000988:	2b00      	cmp	r3, #0
 800098a:	d107      	bne.n	800099c <DMA2_Stream5_IRQHandler+0x34>
 800098c:	4b08      	ldr	r3, [pc, #32]	; (80009b0 <DMA2_Stream5_IRQHandler+0x48>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	681a      	ldr	r2, [r3, #0]
 8000992:	4b07      	ldr	r3, [pc, #28]	; (80009b0 <DMA2_Stream5_IRQHandler+0x48>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	f022 0201 	bic.w	r2, r2, #1
 800099a:	601a      	str	r2, [r3, #0]
    // DMA2 disable
    // __HAL_DMA_DISABLE(&hdma_tim1_up); // not needed?
    // switch on black
    GPIOE->BSRR = VGA_GPIO_HINIBBLE << 16u;
 800099c:	4b05      	ldr	r3, [pc, #20]	; (80009b4 <DMA2_Stream5_IRQHandler+0x4c>)
 800099e:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 80009a2:	619a      	str	r2, [r3, #24]
  // }

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_up);
 80009a4:	4804      	ldr	r0, [pc, #16]	; (80009b8 <DMA2_Stream5_IRQHandler+0x50>)
 80009a6:	f000 fd97 	bl	80014d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 80009aa:	bf00      	nop
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	20012d94 	.word	0x20012d94
 80009b4:	40021000 	.word	0x40021000
 80009b8:	20012dd4 	.word	0x20012dd4

080009bc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b084      	sub	sp, #16
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80009c4:	4b11      	ldr	r3, [pc, #68]	; (8000a0c <_sbrk+0x50>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d102      	bne.n	80009d2 <_sbrk+0x16>
		heap_end = &end;
 80009cc:	4b0f      	ldr	r3, [pc, #60]	; (8000a0c <_sbrk+0x50>)
 80009ce:	4a10      	ldr	r2, [pc, #64]	; (8000a10 <_sbrk+0x54>)
 80009d0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80009d2:	4b0e      	ldr	r3, [pc, #56]	; (8000a0c <_sbrk+0x50>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80009d8:	4b0c      	ldr	r3, [pc, #48]	; (8000a0c <_sbrk+0x50>)
 80009da:	681a      	ldr	r2, [r3, #0]
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	4413      	add	r3, r2
 80009e0:	466a      	mov	r2, sp
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d907      	bls.n	80009f6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80009e6:	f003 fc75 	bl	80042d4 <__errno>
 80009ea:	4602      	mov	r2, r0
 80009ec:	230c      	movs	r3, #12
 80009ee:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80009f0:	f04f 33ff 	mov.w	r3, #4294967295
 80009f4:	e006      	b.n	8000a04 <_sbrk+0x48>
	}

	heap_end += incr;
 80009f6:	4b05      	ldr	r3, [pc, #20]	; (8000a0c <_sbrk+0x50>)
 80009f8:	681a      	ldr	r2, [r3, #0]
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	4413      	add	r3, r2
 80009fe:	4a03      	ldr	r2, [pc, #12]	; (8000a0c <_sbrk+0x50>)
 8000a00:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000a02:	68fb      	ldr	r3, [r7, #12]
}
 8000a04:	4618      	mov	r0, r3
 8000a06:	3710      	adds	r7, #16
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	2000008c 	.word	0x2000008c
 8000a10:	20012ec0 	.word	0x20012ec0

08000a14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a18:	4b08      	ldr	r3, [pc, #32]	; (8000a3c <SystemInit+0x28>)
 8000a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a1e:	4a07      	ldr	r2, [pc, #28]	; (8000a3c <SystemInit+0x28>)
 8000a20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a28:	4b04      	ldr	r3, [pc, #16]	; (8000a3c <SystemInit+0x28>)
 8000a2a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a2e:	609a      	str	r2, [r3, #8]
#endif
}
 8000a30:	bf00      	nop
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	e000ed00 	.word	0xe000ed00

08000a40 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
DMA_HandleTypeDef hdma_tim1_up;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b086      	sub	sp, #24
 8000a44:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a46:	f107 0308 	add.w	r3, r7, #8
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	601a      	str	r2, [r3, #0]
 8000a4e:	605a      	str	r2, [r3, #4]
 8000a50:	609a      	str	r2, [r3, #8]
 8000a52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a54:	463b      	mov	r3, r7
 8000a56:	2200      	movs	r2, #0
 8000a58:	601a      	str	r2, [r3, #0]
 8000a5a:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 8000a5c:	4b1e      	ldr	r3, [pc, #120]	; (8000ad8 <MX_TIM1_Init+0x98>)
 8000a5e:	4a1f      	ldr	r2, [pc, #124]	; (8000adc <MX_TIM1_Init+0x9c>)
 8000a60:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = VGA_TIM1_PRESCALE;
 8000a62:	4b1d      	ldr	r3, [pc, #116]	; (8000ad8 <MX_TIM1_Init+0x98>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a68:	4b1b      	ldr	r3, [pc, #108]	; (8000ad8 <MX_TIM1_Init+0x98>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = VGA_TIM1_PERIODE;
 8000a6e:	4b1a      	ldr	r3, [pc, #104]	; (8000ad8 <MX_TIM1_Init+0x98>)
 8000a70:	220b      	movs	r2, #11
 8000a72:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a74:	4b18      	ldr	r3, [pc, #96]	; (8000ad8 <MX_TIM1_Init+0x98>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a7a:	4b17      	ldr	r3, [pc, #92]	; (8000ad8 <MX_TIM1_Init+0x98>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a80:	4b15      	ldr	r3, [pc, #84]	; (8000ad8 <MX_TIM1_Init+0x98>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a86:	4814      	ldr	r0, [pc, #80]	; (8000ad8 <MX_TIM1_Init+0x98>)
 8000a88:	f001 fda4 	bl	80025d4 <HAL_TIM_Base_Init>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 8000a92:	f7ff fe67 	bl	8000764 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a9a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a9c:	f107 0308 	add.w	r3, r7, #8
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	480d      	ldr	r0, [pc, #52]	; (8000ad8 <MX_TIM1_Init+0x98>)
 8000aa4:	f002 f8a0 	bl	8002be8 <HAL_TIM_ConfigClockSource>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 8000aae:	f7ff fe59 	bl	8000764 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000aba:	463b      	mov	r3, r7
 8000abc:	4619      	mov	r1, r3
 8000abe:	4806      	ldr	r0, [pc, #24]	; (8000ad8 <MX_TIM1_Init+0x98>)
 8000ac0:	f002 fc8c 	bl	80033dc <HAL_TIMEx_MasterConfigSynchronization>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8000aca:	f7ff fe4b 	bl	8000764 <Error_Handler>
  }

}
 8000ace:	bf00      	nop
 8000ad0:	3718      	adds	r7, #24
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	20012d94 	.word	0x20012d94
 8000adc:	40010000 	.word	0x40010000

08000ae0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b08a      	sub	sp, #40	; 0x28
 8000ae4:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ae6:	f107 0320 	add.w	r3, r7, #32
 8000aea:	2200      	movs	r2, #0
 8000aec:	601a      	str	r2, [r3, #0]
 8000aee:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000af0:	1d3b      	adds	r3, r7, #4
 8000af2:	2200      	movs	r2, #0
 8000af4:	601a      	str	r2, [r3, #0]
 8000af6:	605a      	str	r2, [r3, #4]
 8000af8:	609a      	str	r2, [r3, #8]
 8000afa:	60da      	str	r2, [r3, #12]
 8000afc:	611a      	str	r2, [r3, #16]
 8000afe:	615a      	str	r2, [r3, #20]
 8000b00:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8000b02:	4b2a      	ldr	r3, [pc, #168]	; (8000bac <MX_TIM2_Init+0xcc>)
 8000b04:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b08:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = VGA_TIM2_HSYNC_PRESCALE;
 8000b0a:	4b28      	ldr	r3, [pc, #160]	; (8000bac <MX_TIM2_Init+0xcc>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b10:	4b26      	ldr	r3, [pc, #152]	; (8000bac <MX_TIM2_Init+0xcc>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = VGA_TIM2_HSYNC_PERIODE;
 8000b16:	4b25      	ldr	r3, [pc, #148]	; (8000bac <MX_TIM2_Init+0xcc>)
 8000b18:	f640 226b 	movw	r2, #2667	; 0xa6b
 8000b1c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b1e:	4b23      	ldr	r3, [pc, #140]	; (8000bac <MX_TIM2_Init+0xcc>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b24:	4b21      	ldr	r3, [pc, #132]	; (8000bac <MX_TIM2_Init+0xcc>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000b2a:	4820      	ldr	r0, [pc, #128]	; (8000bac <MX_TIM2_Init+0xcc>)
 8000b2c:	f001 fda1 	bl	8002672 <HAL_TIM_PWM_Init>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000b36:	f7ff fe15 	bl	8000764 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b42:	f107 0320 	add.w	r3, r7, #32
 8000b46:	4619      	mov	r1, r3
 8000b48:	4818      	ldr	r0, [pc, #96]	; (8000bac <MX_TIM2_Init+0xcc>)
 8000b4a:	f002 fc47 	bl	80033dc <HAL_TIMEx_MasterConfigSynchronization>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000b54:	f7ff fe06 	bl	8000764 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b58:	2360      	movs	r3, #96	; 0x60
 8000b5a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = VGA_TIM2_HTRIGGER_START - VGA_TIM2_DMA_DELAY;
 8000b5c:	f240 13bb 	movw	r3, #443	; 0x1bb
 8000b60:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000b62:	2302      	movs	r3, #2
 8000b64:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b66:	2300      	movs	r3, #0
 8000b68:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b6a:	1d3b      	adds	r3, r7, #4
 8000b6c:	2208      	movs	r2, #8
 8000b6e:	4619      	mov	r1, r3
 8000b70:	480e      	ldr	r0, [pc, #56]	; (8000bac <MX_TIM2_Init+0xcc>)
 8000b72:	f001 ff73 	bl	8002a5c <HAL_TIM_PWM_ConfigChannel>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000b7c:	f7ff fdf2 	bl	8000764 <Error_Handler>
  }
  sConfigOC.Pulse = VGA_TIM2_HSYNC_IMP;
 8000b80:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000b84:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000b86:	1d3b      	adds	r3, r7, #4
 8000b88:	220c      	movs	r2, #12
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4807      	ldr	r0, [pc, #28]	; (8000bac <MX_TIM2_Init+0xcc>)
 8000b8e:	f001 ff65 	bl	8002a5c <HAL_TIM_PWM_ConfigChannel>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8000b98:	f7ff fde4 	bl	8000764 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8000b9c:	4803      	ldr	r0, [pc, #12]	; (8000bac <MX_TIM2_Init+0xcc>)
 8000b9e:	f000 f87f 	bl	8000ca0 <HAL_TIM_MspPostInit>

}
 8000ba2:	bf00      	nop
 8000ba4:	3728      	adds	r7, #40	; 0x28
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	20012e34 	.word	0x20012e34

08000bb0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b084      	sub	sp, #16
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a21      	ldr	r2, [pc, #132]	; (8000c44 <HAL_TIM_Base_MspInit+0x94>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d13c      	bne.n	8000c3c <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	60fb      	str	r3, [r7, #12]
 8000bc6:	4b20      	ldr	r3, [pc, #128]	; (8000c48 <HAL_TIM_Base_MspInit+0x98>)
 8000bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bca:	4a1f      	ldr	r2, [pc, #124]	; (8000c48 <HAL_TIM_Base_MspInit+0x98>)
 8000bcc:	f043 0301 	orr.w	r3, r3, #1
 8000bd0:	6453      	str	r3, [r2, #68]	; 0x44
 8000bd2:	4b1d      	ldr	r3, [pc, #116]	; (8000c48 <HAL_TIM_Base_MspInit+0x98>)
 8000bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bd6:	f003 0301 	and.w	r3, r3, #1
 8000bda:	60fb      	str	r3, [r7, #12]
 8000bdc:	68fb      	ldr	r3, [r7, #12]
  
    /* TIM1 DMA Init */
    /* TIM1_UP Init */
    hdma_tim1_up.Instance = DMA2_Stream5;
 8000bde:	4b1b      	ldr	r3, [pc, #108]	; (8000c4c <HAL_TIM_Base_MspInit+0x9c>)
 8000be0:	4a1b      	ldr	r2, [pc, #108]	; (8000c50 <HAL_TIM_Base_MspInit+0xa0>)
 8000be2:	601a      	str	r2, [r3, #0]
    hdma_tim1_up.Init.Channel = DMA_CHANNEL_6;
 8000be4:	4b19      	ldr	r3, [pc, #100]	; (8000c4c <HAL_TIM_Base_MspInit+0x9c>)
 8000be6:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8000bea:	605a      	str	r2, [r3, #4]
    hdma_tim1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000bec:	4b17      	ldr	r3, [pc, #92]	; (8000c4c <HAL_TIM_Base_MspInit+0x9c>)
 8000bee:	2240      	movs	r2, #64	; 0x40
 8000bf0:	609a      	str	r2, [r3, #8]
    hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bf2:	4b16      	ldr	r3, [pc, #88]	; (8000c4c <HAL_TIM_Base_MspInit+0x9c>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	60da      	str	r2, [r3, #12]
    hdma_tim1_up.Init.MemInc = DMA_MINC_ENABLE;
 8000bf8:	4b14      	ldr	r3, [pc, #80]	; (8000c4c <HAL_TIM_Base_MspInit+0x9c>)
 8000bfa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000bfe:	611a      	str	r2, [r3, #16]
    hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c00:	4b12      	ldr	r3, [pc, #72]	; (8000c4c <HAL_TIM_Base_MspInit+0x9c>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	615a      	str	r2, [r3, #20]
    hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c06:	4b11      	ldr	r3, [pc, #68]	; (8000c4c <HAL_TIM_Base_MspInit+0x9c>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	619a      	str	r2, [r3, #24]
    hdma_tim1_up.Init.Mode = DMA_NORMAL;
 8000c0c:	4b0f      	ldr	r3, [pc, #60]	; (8000c4c <HAL_TIM_Base_MspInit+0x9c>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	61da      	str	r2, [r3, #28]
    hdma_tim1_up.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000c12:	4b0e      	ldr	r3, [pc, #56]	; (8000c4c <HAL_TIM_Base_MspInit+0x9c>)
 8000c14:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000c18:	621a      	str	r2, [r3, #32]
    hdma_tim1_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c1a:	4b0c      	ldr	r3, [pc, #48]	; (8000c4c <HAL_TIM_Base_MspInit+0x9c>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_up) != HAL_OK)
 8000c20:	480a      	ldr	r0, [pc, #40]	; (8000c4c <HAL_TIM_Base_MspInit+0x9c>)
 8000c22:	f000 fb31 	bl	8001288 <HAL_DMA_Init>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <HAL_TIM_Base_MspInit+0x80>
    {
      Error_Handler();
 8000c2c:	f7ff fd9a 	bl	8000764 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	4a06      	ldr	r2, [pc, #24]	; (8000c4c <HAL_TIM_Base_MspInit+0x9c>)
 8000c34:	621a      	str	r2, [r3, #32]
 8000c36:	4a05      	ldr	r2, [pc, #20]	; (8000c4c <HAL_TIM_Base_MspInit+0x9c>)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000c3c:	bf00      	nop
 8000c3e:	3710      	adds	r7, #16
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	40010000 	.word	0x40010000
 8000c48:	40023800 	.word	0x40023800
 8000c4c:	20012dd4 	.word	0x20012dd4
 8000c50:	40026488 	.word	0x40026488

08000c54 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b084      	sub	sp, #16
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c64:	d115      	bne.n	8000c92 <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c66:	2300      	movs	r3, #0
 8000c68:	60fb      	str	r3, [r7, #12]
 8000c6a:	4b0c      	ldr	r3, [pc, #48]	; (8000c9c <HAL_TIM_PWM_MspInit+0x48>)
 8000c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6e:	4a0b      	ldr	r2, [pc, #44]	; (8000c9c <HAL_TIM_PWM_MspInit+0x48>)
 8000c70:	f043 0301 	orr.w	r3, r3, #1
 8000c74:	6413      	str	r3, [r2, #64]	; 0x40
 8000c76:	4b09      	ldr	r3, [pc, #36]	; (8000c9c <HAL_TIM_PWM_MspInit+0x48>)
 8000c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7a:	f003 0301 	and.w	r3, r3, #1
 8000c7e:	60fb      	str	r3, [r7, #12]
 8000c80:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000c82:	2200      	movs	r2, #0
 8000c84:	2100      	movs	r1, #0
 8000c86:	201c      	movs	r0, #28
 8000c88:	f000 fac7 	bl	800121a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000c8c:	201c      	movs	r0, #28
 8000c8e:	f000 fae0 	bl	8001252 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000c92:	bf00      	nop
 8000c94:	3710      	adds	r7, #16
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	40023800 	.word	0x40023800

08000ca0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b088      	sub	sp, #32
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca8:	f107 030c 	add.w	r3, r7, #12
 8000cac:	2200      	movs	r2, #0
 8000cae:	601a      	str	r2, [r3, #0]
 8000cb0:	605a      	str	r2, [r3, #4]
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	60da      	str	r2, [r3, #12]
 8000cb6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000cc0:	d11e      	bne.n	8000d00 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	60bb      	str	r3, [r7, #8]
 8000cc6:	4b10      	ldr	r3, [pc, #64]	; (8000d08 <HAL_TIM_MspPostInit+0x68>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cca:	4a0f      	ldr	r2, [pc, #60]	; (8000d08 <HAL_TIM_MspPostInit+0x68>)
 8000ccc:	f043 0302 	orr.w	r3, r3, #2
 8000cd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd2:	4b0d      	ldr	r3, [pc, #52]	; (8000d08 <HAL_TIM_MspPostInit+0x68>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd6:	f003 0302 	and.w	r3, r3, #2
 8000cda:	60bb      	str	r3, [r7, #8]
 8000cdc:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration    
    PB11     ------> TIM2_CH4 
    */
    GPIO_InitStruct.Pin = VGA_HSYNC_Pin;
 8000cde:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000ce2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cec:	2303      	movs	r3, #3
 8000cee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VGA_HSYNC_GPIO_Port, &GPIO_InitStruct);
 8000cf4:	f107 030c 	add.w	r3, r7, #12
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	4804      	ldr	r0, [pc, #16]	; (8000d0c <HAL_TIM_MspPostInit+0x6c>)
 8000cfc:	f000 fe54 	bl	80019a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000d00:	bf00      	nop
 8000d02:	3720      	adds	r7, #32
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	40023800 	.word	0x40023800
 8000d0c:	40020400 	.word	0x40020400

08000d10 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000d14:	4b11      	ldr	r3, [pc, #68]	; (8000d5c <MX_USART2_UART_Init+0x4c>)
 8000d16:	4a12      	ldr	r2, [pc, #72]	; (8000d60 <MX_USART2_UART_Init+0x50>)
 8000d18:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d1a:	4b10      	ldr	r3, [pc, #64]	; (8000d5c <MX_USART2_UART_Init+0x4c>)
 8000d1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d20:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d22:	4b0e      	ldr	r3, [pc, #56]	; (8000d5c <MX_USART2_UART_Init+0x4c>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d28:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <MX_USART2_UART_Init+0x4c>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d2e:	4b0b      	ldr	r3, [pc, #44]	; (8000d5c <MX_USART2_UART_Init+0x4c>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d34:	4b09      	ldr	r3, [pc, #36]	; (8000d5c <MX_USART2_UART_Init+0x4c>)
 8000d36:	220c      	movs	r2, #12
 8000d38:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d3a:	4b08      	ldr	r3, [pc, #32]	; (8000d5c <MX_USART2_UART_Init+0x4c>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d40:	4b06      	ldr	r3, [pc, #24]	; (8000d5c <MX_USART2_UART_Init+0x4c>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d46:	4805      	ldr	r0, [pc, #20]	; (8000d5c <MX_USART2_UART_Init+0x4c>)
 8000d48:	f002 fbd8 	bl	80034fc <HAL_UART_Init>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d52:	f7ff fd07 	bl	8000764 <Error_Handler>
  }

}
 8000d56:	bf00      	nop
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	20012e74 	.word	0x20012e74
 8000d60:	40004400 	.word	0x40004400

08000d64 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b08a      	sub	sp, #40	; 0x28
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d6c:	f107 0314 	add.w	r3, r7, #20
 8000d70:	2200      	movs	r2, #0
 8000d72:	601a      	str	r2, [r3, #0]
 8000d74:	605a      	str	r2, [r3, #4]
 8000d76:	609a      	str	r2, [r3, #8]
 8000d78:	60da      	str	r2, [r3, #12]
 8000d7a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a19      	ldr	r2, [pc, #100]	; (8000de8 <HAL_UART_MspInit+0x84>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d12b      	bne.n	8000dde <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d86:	2300      	movs	r3, #0
 8000d88:	613b      	str	r3, [r7, #16]
 8000d8a:	4b18      	ldr	r3, [pc, #96]	; (8000dec <HAL_UART_MspInit+0x88>)
 8000d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8e:	4a17      	ldr	r2, [pc, #92]	; (8000dec <HAL_UART_MspInit+0x88>)
 8000d90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d94:	6413      	str	r3, [r2, #64]	; 0x40
 8000d96:	4b15      	ldr	r3, [pc, #84]	; (8000dec <HAL_UART_MspInit+0x88>)
 8000d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d9e:	613b      	str	r3, [r7, #16]
 8000da0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da2:	2300      	movs	r3, #0
 8000da4:	60fb      	str	r3, [r7, #12]
 8000da6:	4b11      	ldr	r3, [pc, #68]	; (8000dec <HAL_UART_MspInit+0x88>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000daa:	4a10      	ldr	r2, [pc, #64]	; (8000dec <HAL_UART_MspInit+0x88>)
 8000dac:	f043 0301 	orr.w	r3, r3, #1
 8000db0:	6313      	str	r3, [r2, #48]	; 0x30
 8000db2:	4b0e      	ldr	r3, [pc, #56]	; (8000dec <HAL_UART_MspInit+0x88>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db6:	f003 0301 	and.w	r3, r3, #1
 8000dba:	60fb      	str	r3, [r7, #12]
 8000dbc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000dbe:	230c      	movs	r3, #12
 8000dc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc2:	2302      	movs	r3, #2
 8000dc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dca:	2303      	movs	r3, #3
 8000dcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000dce:	2307      	movs	r3, #7
 8000dd0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd2:	f107 0314 	add.w	r3, r7, #20
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	4805      	ldr	r0, [pc, #20]	; (8000df0 <HAL_UART_MspInit+0x8c>)
 8000dda:	f000 fde5 	bl	80019a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000dde:	bf00      	nop
 8000de0:	3728      	adds	r7, #40	; 0x28
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	40004400 	.word	0x40004400
 8000dec:	40023800 	.word	0x40023800
 8000df0:	40020000 	.word	0x40020000

08000df4 <Reset_Handler>:
 8000df4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e2c <LoopFillZerobss+0x14>
 8000df8:	2100      	movs	r1, #0
 8000dfa:	e003      	b.n	8000e04 <LoopCopyDataInit>

08000dfc <CopyDataInit>:
 8000dfc:	4b0c      	ldr	r3, [pc, #48]	; (8000e30 <LoopFillZerobss+0x18>)
 8000dfe:	585b      	ldr	r3, [r3, r1]
 8000e00:	5043      	str	r3, [r0, r1]
 8000e02:	3104      	adds	r1, #4

08000e04 <LoopCopyDataInit>:
 8000e04:	480b      	ldr	r0, [pc, #44]	; (8000e34 <LoopFillZerobss+0x1c>)
 8000e06:	4b0c      	ldr	r3, [pc, #48]	; (8000e38 <LoopFillZerobss+0x20>)
 8000e08:	1842      	adds	r2, r0, r1
 8000e0a:	429a      	cmp	r2, r3
 8000e0c:	d3f6      	bcc.n	8000dfc <CopyDataInit>
 8000e0e:	4a0b      	ldr	r2, [pc, #44]	; (8000e3c <LoopFillZerobss+0x24>)
 8000e10:	e002      	b.n	8000e18 <LoopFillZerobss>

08000e12 <FillZerobss>:
 8000e12:	2300      	movs	r3, #0
 8000e14:	f842 3b04 	str.w	r3, [r2], #4

08000e18 <LoopFillZerobss>:
 8000e18:	4b09      	ldr	r3, [pc, #36]	; (8000e40 <LoopFillZerobss+0x28>)
 8000e1a:	429a      	cmp	r2, r3
 8000e1c:	d3f9      	bcc.n	8000e12 <FillZerobss>
 8000e1e:	f7ff fdf9 	bl	8000a14 <SystemInit>
 8000e22:	f003 fa5d 	bl	80042e0 <__libc_init_array>
 8000e26:	f7ff fbef 	bl	8000608 <main>
 8000e2a:	4770      	bx	lr
 8000e2c:	20020000 	.word	0x20020000
 8000e30:	08004554 	.word	0x08004554
 8000e34:	20000000 	.word	0x20000000
 8000e38:	20000070 	.word	0x20000070
 8000e3c:	20000070 	.word	0x20000070
 8000e40:	20012ebc 	.word	0x20012ebc

08000e44 <ADC_IRQHandler>:
 8000e44:	e7fe      	b.n	8000e44 <ADC_IRQHandler>
	...

08000e48 <UB_VGA_Screen_Init>:

//--------------------------------------------------------------
// Init VGA-Module
//--------------------------------------------------------------
void UB_VGA_Screen_Init(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
  VGA.hsync_cnt = 0;
 8000e4c:	4b1f      	ldr	r3, [pc, #124]	; (8000ecc <UB_VGA_Screen_Init+0x84>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	801a      	strh	r2, [r3, #0]
  VGA.start_adr = 0;
 8000e52:	4b1e      	ldr	r3, [pc, #120]	; (8000ecc <UB_VGA_Screen_Init+0x84>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	605a      	str	r2, [r3, #4]
  VGA.dma2_cr_reg = 0;
 8000e58:	4b1c      	ldr	r3, [pc, #112]	; (8000ecc <UB_VGA_Screen_Init+0x84>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	609a      	str	r2, [r3, #8]

  GPIOB->BSRR = VGA_VSYNC_Pin;
 8000e5e:	4b1c      	ldr	r3, [pc, #112]	; (8000ed0 <UB_VGA_Screen_Init+0x88>)
 8000e60:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e64:	619a      	str	r2, [r3, #24]

  // TIM2
  HAL_TIM_Base_Start(&htim2);
 8000e66:	481b      	ldr	r0, [pc, #108]	; (8000ed4 <UB_VGA_Screen_Init+0x8c>)
 8000e68:	f001 fbdf 	bl	800262a <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000e6c:	210c      	movs	r1, #12
 8000e6e:	4819      	ldr	r0, [pc, #100]	; (8000ed4 <UB_VGA_Screen_Init+0x8c>)
 8000e70:	f001 fc2a 	bl	80026c8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_3);
 8000e74:	2108      	movs	r1, #8
 8000e76:	4817      	ldr	r0, [pc, #92]	; (8000ed4 <UB_VGA_Screen_Init+0x8c>)
 8000e78:	f001 fc64 	bl	8002744 <HAL_TIM_PWM_Start_IT>

  // TIM1
  __HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_UPDATE);
 8000e7c:	4b16      	ldr	r3, [pc, #88]	; (8000ed8 <UB_VGA_Screen_Init+0x90>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	68da      	ldr	r2, [r3, #12]
 8000e82:	4b15      	ldr	r3, [pc, #84]	; (8000ed8 <UB_VGA_Screen_Init+0x90>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000e8a:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(&htim1);
 8000e8c:	4b12      	ldr	r3, [pc, #72]	; (8000ed8 <UB_VGA_Screen_Init+0x90>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	4b11      	ldr	r3, [pc, #68]	; (8000ed8 <UB_VGA_Screen_Init+0x90>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f042 0201 	orr.w	r2, r2, #1
 8000e9a:	601a      	str	r2, [r3, #0]
  HAL_DMA_Start_IT(&hdma_tim1_up, (uint32_t)&VGA_RAM1[0], VGA_GPIOE_ODR_ADDRESS, VGA_DISPLAY_X + 1);
 8000e9c:	490f      	ldr	r1, [pc, #60]	; (8000edc <UB_VGA_Screen_Init+0x94>)
 8000e9e:	f240 1341 	movw	r3, #321	; 0x141
 8000ea2:	4a0f      	ldr	r2, [pc, #60]	; (8000ee0 <UB_VGA_Screen_Init+0x98>)
 8000ea4:	480f      	ldr	r0, [pc, #60]	; (8000ee4 <UB_VGA_Screen_Init+0x9c>)
 8000ea6:	f000 fa9d 	bl	80013e4 <HAL_DMA_Start_IT>

  HAL_DMA_Init(&hdma_tim1_up);
 8000eaa:	480e      	ldr	r0, [pc, #56]	; (8000ee4 <UB_VGA_Screen_Init+0x9c>)
 8000eac:	f000 f9ec 	bl	8001288 <HAL_DMA_Init>
  __HAL_DMA_ENABLE_IT(&hdma_tim1_up, DMA_IT_TC);
 8000eb0:	4b0c      	ldr	r3, [pc, #48]	; (8000ee4 <UB_VGA_Screen_Init+0x9c>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	4b0b      	ldr	r3, [pc, #44]	; (8000ee4 <UB_VGA_Screen_Init+0x9c>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f042 0210 	orr.w	r2, r2, #16
 8000ebe:	601a      	str	r2, [r3, #0]

  //-----------------------
  // Register swap and safe
  //-----------------------
  // content of CR-Register read and save
  VGA.dma2_cr_reg = DMA2_Stream5->CR;
 8000ec0:	4b09      	ldr	r3, [pc, #36]	; (8000ee8 <UB_VGA_Screen_Init+0xa0>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a01      	ldr	r2, [pc, #4]	; (8000ecc <UB_VGA_Screen_Init+0x84>)
 8000ec6:	6093      	str	r3, [r2, #8]
}
 8000ec8:	bf00      	nop
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	20000098 	.word	0x20000098
 8000ed0:	40020400 	.word	0x40020400
 8000ed4:	20012e34 	.word	0x20012e34
 8000ed8:	20012d94 	.word	0x20012d94
 8000edc:	200000a4 	.word	0x200000a4
 8000ee0:	40021015 	.word	0x40021015
 8000ee4:	20012dd4 	.word	0x20012dd4
 8000ee8:	40026488 	.word	0x40026488

08000eec <UB_VGA_FillScreen>:

//--------------------------------------------------------------
// fill the DMA RAM buffer with one color
//--------------------------------------------------------------
void UB_VGA_FillScreen(uint8_t color)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	71fb      	strb	r3, [r7, #7]
  uint16_t xp,yp;

  for(yp = 0; yp < VGA_DISPLAY_Y; yp++) {
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	81bb      	strh	r3, [r7, #12]
 8000efa:	e012      	b.n	8000f22 <UB_VGA_FillScreen+0x36>
    for(xp = 0; xp < VGA_DISPLAY_X; xp++) {
 8000efc:	2300      	movs	r3, #0
 8000efe:	81fb      	strh	r3, [r7, #14]
 8000f00:	e008      	b.n	8000f14 <UB_VGA_FillScreen+0x28>
      UB_VGA_SetPixel(xp, yp, color);
 8000f02:	79fa      	ldrb	r2, [r7, #7]
 8000f04:	89b9      	ldrh	r1, [r7, #12]
 8000f06:	89fb      	ldrh	r3, [r7, #14]
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f000 f811 	bl	8000f30 <UB_VGA_SetPixel>
    for(xp = 0; xp < VGA_DISPLAY_X; xp++) {
 8000f0e:	89fb      	ldrh	r3, [r7, #14]
 8000f10:	3301      	adds	r3, #1
 8000f12:	81fb      	strh	r3, [r7, #14]
 8000f14:	89fb      	ldrh	r3, [r7, #14]
 8000f16:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000f1a:	d3f2      	bcc.n	8000f02 <UB_VGA_FillScreen+0x16>
  for(yp = 0; yp < VGA_DISPLAY_Y; yp++) {
 8000f1c:	89bb      	ldrh	r3, [r7, #12]
 8000f1e:	3301      	adds	r3, #1
 8000f20:	81bb      	strh	r3, [r7, #12]
 8000f22:	89bb      	ldrh	r3, [r7, #12]
 8000f24:	2bef      	cmp	r3, #239	; 0xef
 8000f26:	d9e9      	bls.n	8000efc <UB_VGA_FillScreen+0x10>
    }
  }
}
 8000f28:	bf00      	nop
 8000f2a:	3710      	adds	r7, #16
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}

08000f30 <UB_VGA_SetPixel>:
//--------------------------------------------------------------
// put one Pixel on the screen with one color
// Important : the last Pixel+1 from every line must be black (don't know why??)
//--------------------------------------------------------------
void UB_VGA_SetPixel(uint16_t xp, uint16_t yp, uint8_t color)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	4603      	mov	r3, r0
 8000f38:	80fb      	strh	r3, [r7, #6]
 8000f3a:	460b      	mov	r3, r1
 8000f3c:	80bb      	strh	r3, [r7, #4]
 8000f3e:	4613      	mov	r3, r2
 8000f40:	70fb      	strb	r3, [r7, #3]
  if(xp >= VGA_DISPLAY_X)
 8000f42:	88fb      	ldrh	r3, [r7, #6]
 8000f44:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000f48:	d301      	bcc.n	8000f4e <UB_VGA_SetPixel+0x1e>
    xp = 0;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	80fb      	strh	r3, [r7, #6]
  if(yp >= VGA_DISPLAY_Y)
 8000f4e:	88bb      	ldrh	r3, [r7, #4]
 8000f50:	2bef      	cmp	r3, #239	; 0xef
 8000f52:	d901      	bls.n	8000f58 <UB_VGA_SetPixel+0x28>
    yp = 0;
 8000f54:	2300      	movs	r3, #0
 8000f56:	80bb      	strh	r3, [r7, #4]

  // Write pixel to ram
  VGA_RAM1[(yp * (VGA_DISPLAY_X + 1)) + xp] = color;
 8000f58:	88ba      	ldrh	r2, [r7, #4]
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	009b      	lsls	r3, r3, #2
 8000f5e:	4413      	add	r3, r2
 8000f60:	019b      	lsls	r3, r3, #6
 8000f62:	441a      	add	r2, r3
 8000f64:	88fb      	ldrh	r3, [r7, #6]
 8000f66:	4413      	add	r3, r2
 8000f68:	4904      	ldr	r1, [pc, #16]	; (8000f7c <UB_VGA_SetPixel+0x4c>)
 8000f6a:	78fa      	ldrb	r2, [r7, #3]
 8000f6c:	54ca      	strb	r2, [r1, r3]
}
 8000f6e:	bf00      	nop
 8000f70:	370c      	adds	r7, #12
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	200000a4 	.word	0x200000a4

08000f80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f84:	4b0e      	ldr	r3, [pc, #56]	; (8000fc0 <HAL_Init+0x40>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a0d      	ldr	r2, [pc, #52]	; (8000fc0 <HAL_Init+0x40>)
 8000f8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f90:	4b0b      	ldr	r3, [pc, #44]	; (8000fc0 <HAL_Init+0x40>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a0a      	ldr	r2, [pc, #40]	; (8000fc0 <HAL_Init+0x40>)
 8000f96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f9a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f9c:	4b08      	ldr	r3, [pc, #32]	; (8000fc0 <HAL_Init+0x40>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a07      	ldr	r2, [pc, #28]	; (8000fc0 <HAL_Init+0x40>)
 8000fa2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fa6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fa8:	2003      	movs	r0, #3
 8000faa:	f000 f92b 	bl	8001204 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fae:	2000      	movs	r0, #0
 8000fb0:	f000 f808 	bl	8000fc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fb4:	f7ff fc16 	bl	80007e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fb8:	2300      	movs	r3, #0
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	40023c00 	.word	0x40023c00

08000fc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fcc:	4b12      	ldr	r3, [pc, #72]	; (8001018 <HAL_InitTick+0x54>)
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	4b12      	ldr	r3, [pc, #72]	; (800101c <HAL_InitTick+0x58>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fda:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fde:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f000 f943 	bl	800126e <HAL_SYSTICK_Config>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	e00e      	b.n	8001010 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2b0f      	cmp	r3, #15
 8000ff6:	d80a      	bhi.n	800100e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	6879      	ldr	r1, [r7, #4]
 8000ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8001000:	f000 f90b 	bl	800121a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001004:	4a06      	ldr	r2, [pc, #24]	; (8001020 <HAL_InitTick+0x5c>)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800100a:	2300      	movs	r3, #0
 800100c:	e000      	b.n	8001010 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800100e:	2301      	movs	r3, #1
}
 8001010:	4618      	mov	r0, r3
 8001012:	3708      	adds	r7, #8
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	20000000 	.word	0x20000000
 800101c:	20000008 	.word	0x20000008
 8001020:	20000004 	.word	0x20000004

08001024 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001028:	4b06      	ldr	r3, [pc, #24]	; (8001044 <HAL_IncTick+0x20>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	461a      	mov	r2, r3
 800102e:	4b06      	ldr	r3, [pc, #24]	; (8001048 <HAL_IncTick+0x24>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4413      	add	r3, r2
 8001034:	4a04      	ldr	r2, [pc, #16]	; (8001048 <HAL_IncTick+0x24>)
 8001036:	6013      	str	r3, [r2, #0]
}
 8001038:	bf00      	nop
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	20000008 	.word	0x20000008
 8001048:	20012eb4 	.word	0x20012eb4

0800104c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  return uwTick;
 8001050:	4b03      	ldr	r3, [pc, #12]	; (8001060 <HAL_GetTick+0x14>)
 8001052:	681b      	ldr	r3, [r3, #0]
}
 8001054:	4618      	mov	r0, r3
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	20012eb4 	.word	0x20012eb4

08001064 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001064:	b480      	push	{r7}
 8001066:	b085      	sub	sp, #20
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	f003 0307 	and.w	r3, r3, #7
 8001072:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001074:	4b0c      	ldr	r3, [pc, #48]	; (80010a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001076:	68db      	ldr	r3, [r3, #12]
 8001078:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800107a:	68ba      	ldr	r2, [r7, #8]
 800107c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001080:	4013      	ands	r3, r2
 8001082:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800108c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001090:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001094:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001096:	4a04      	ldr	r2, [pc, #16]	; (80010a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	60d3      	str	r3, [r2, #12]
}
 800109c:	bf00      	nop
 800109e:	3714      	adds	r7, #20
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr
 80010a8:	e000ed00 	.word	0xe000ed00

080010ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010b0:	4b04      	ldr	r3, [pc, #16]	; (80010c4 <__NVIC_GetPriorityGrouping+0x18>)
 80010b2:	68db      	ldr	r3, [r3, #12]
 80010b4:	0a1b      	lsrs	r3, r3, #8
 80010b6:	f003 0307 	and.w	r3, r3, #7
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr
 80010c4:	e000ed00 	.word	0xe000ed00

080010c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4603      	mov	r3, r0
 80010d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	db0b      	blt.n	80010f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010da:	79fb      	ldrb	r3, [r7, #7]
 80010dc:	f003 021f 	and.w	r2, r3, #31
 80010e0:	4907      	ldr	r1, [pc, #28]	; (8001100 <__NVIC_EnableIRQ+0x38>)
 80010e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e6:	095b      	lsrs	r3, r3, #5
 80010e8:	2001      	movs	r0, #1
 80010ea:	fa00 f202 	lsl.w	r2, r0, r2
 80010ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010f2:	bf00      	nop
 80010f4:	370c      	adds	r7, #12
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	e000e100 	.word	0xe000e100

08001104 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	4603      	mov	r3, r0
 800110c:	6039      	str	r1, [r7, #0]
 800110e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001110:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001114:	2b00      	cmp	r3, #0
 8001116:	db0a      	blt.n	800112e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	b2da      	uxtb	r2, r3
 800111c:	490c      	ldr	r1, [pc, #48]	; (8001150 <__NVIC_SetPriority+0x4c>)
 800111e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001122:	0112      	lsls	r2, r2, #4
 8001124:	b2d2      	uxtb	r2, r2
 8001126:	440b      	add	r3, r1
 8001128:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800112c:	e00a      	b.n	8001144 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	b2da      	uxtb	r2, r3
 8001132:	4908      	ldr	r1, [pc, #32]	; (8001154 <__NVIC_SetPriority+0x50>)
 8001134:	79fb      	ldrb	r3, [r7, #7]
 8001136:	f003 030f 	and.w	r3, r3, #15
 800113a:	3b04      	subs	r3, #4
 800113c:	0112      	lsls	r2, r2, #4
 800113e:	b2d2      	uxtb	r2, r2
 8001140:	440b      	add	r3, r1
 8001142:	761a      	strb	r2, [r3, #24]
}
 8001144:	bf00      	nop
 8001146:	370c      	adds	r7, #12
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr
 8001150:	e000e100 	.word	0xe000e100
 8001154:	e000ed00 	.word	0xe000ed00

08001158 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001158:	b480      	push	{r7}
 800115a:	b089      	sub	sp, #36	; 0x24
 800115c:	af00      	add	r7, sp, #0
 800115e:	60f8      	str	r0, [r7, #12]
 8001160:	60b9      	str	r1, [r7, #8]
 8001162:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	f003 0307 	and.w	r3, r3, #7
 800116a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800116c:	69fb      	ldr	r3, [r7, #28]
 800116e:	f1c3 0307 	rsb	r3, r3, #7
 8001172:	2b04      	cmp	r3, #4
 8001174:	bf28      	it	cs
 8001176:	2304      	movcs	r3, #4
 8001178:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	3304      	adds	r3, #4
 800117e:	2b06      	cmp	r3, #6
 8001180:	d902      	bls.n	8001188 <NVIC_EncodePriority+0x30>
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	3b03      	subs	r3, #3
 8001186:	e000      	b.n	800118a <NVIC_EncodePriority+0x32>
 8001188:	2300      	movs	r3, #0
 800118a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800118c:	f04f 32ff 	mov.w	r2, #4294967295
 8001190:	69bb      	ldr	r3, [r7, #24]
 8001192:	fa02 f303 	lsl.w	r3, r2, r3
 8001196:	43da      	mvns	r2, r3
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	401a      	ands	r2, r3
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011a0:	f04f 31ff 	mov.w	r1, #4294967295
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	fa01 f303 	lsl.w	r3, r1, r3
 80011aa:	43d9      	mvns	r1, r3
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011b0:	4313      	orrs	r3, r2
         );
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3724      	adds	r7, #36	; 0x24
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
	...

080011c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	3b01      	subs	r3, #1
 80011cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011d0:	d301      	bcc.n	80011d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011d2:	2301      	movs	r3, #1
 80011d4:	e00f      	b.n	80011f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011d6:	4a0a      	ldr	r2, [pc, #40]	; (8001200 <SysTick_Config+0x40>)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	3b01      	subs	r3, #1
 80011dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011de:	210f      	movs	r1, #15
 80011e0:	f04f 30ff 	mov.w	r0, #4294967295
 80011e4:	f7ff ff8e 	bl	8001104 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011e8:	4b05      	ldr	r3, [pc, #20]	; (8001200 <SysTick_Config+0x40>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011ee:	4b04      	ldr	r3, [pc, #16]	; (8001200 <SysTick_Config+0x40>)
 80011f0:	2207      	movs	r2, #7
 80011f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011f4:	2300      	movs	r3, #0
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	e000e010 	.word	0xe000e010

08001204 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800120c:	6878      	ldr	r0, [r7, #4]
 800120e:	f7ff ff29 	bl	8001064 <__NVIC_SetPriorityGrouping>
}
 8001212:	bf00      	nop
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}

0800121a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800121a:	b580      	push	{r7, lr}
 800121c:	b086      	sub	sp, #24
 800121e:	af00      	add	r7, sp, #0
 8001220:	4603      	mov	r3, r0
 8001222:	60b9      	str	r1, [r7, #8]
 8001224:	607a      	str	r2, [r7, #4]
 8001226:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001228:	2300      	movs	r3, #0
 800122a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800122c:	f7ff ff3e 	bl	80010ac <__NVIC_GetPriorityGrouping>
 8001230:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001232:	687a      	ldr	r2, [r7, #4]
 8001234:	68b9      	ldr	r1, [r7, #8]
 8001236:	6978      	ldr	r0, [r7, #20]
 8001238:	f7ff ff8e 	bl	8001158 <NVIC_EncodePriority>
 800123c:	4602      	mov	r2, r0
 800123e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001242:	4611      	mov	r1, r2
 8001244:	4618      	mov	r0, r3
 8001246:	f7ff ff5d 	bl	8001104 <__NVIC_SetPriority>
}
 800124a:	bf00      	nop
 800124c:	3718      	adds	r7, #24
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}

08001252 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001252:	b580      	push	{r7, lr}
 8001254:	b082      	sub	sp, #8
 8001256:	af00      	add	r7, sp, #0
 8001258:	4603      	mov	r3, r0
 800125a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800125c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff ff31 	bl	80010c8 <__NVIC_EnableIRQ>
}
 8001266:	bf00      	nop
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}

0800126e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800126e:	b580      	push	{r7, lr}
 8001270:	b082      	sub	sp, #8
 8001272:	af00      	add	r7, sp, #0
 8001274:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001276:	6878      	ldr	r0, [r7, #4]
 8001278:	f7ff ffa2 	bl	80011c0 <SysTick_Config>
 800127c:	4603      	mov	r3, r0
}
 800127e:	4618      	mov	r0, r3
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
	...

08001288 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b086      	sub	sp, #24
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001290:	2300      	movs	r3, #0
 8001292:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001294:	f7ff feda 	bl	800104c <HAL_GetTick>
 8001298:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d101      	bne.n	80012a4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80012a0:	2301      	movs	r3, #1
 80012a2:	e099      	b.n	80013d8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2200      	movs	r2, #0
 80012a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2202      	movs	r2, #2
 80012b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f022 0201 	bic.w	r2, r2, #1
 80012c2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012c4:	e00f      	b.n	80012e6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80012c6:	f7ff fec1 	bl	800104c <HAL_GetTick>
 80012ca:	4602      	mov	r2, r0
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	1ad3      	subs	r3, r2, r3
 80012d0:	2b05      	cmp	r3, #5
 80012d2:	d908      	bls.n	80012e6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2220      	movs	r2, #32
 80012d8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2203      	movs	r2, #3
 80012de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80012e2:	2303      	movs	r3, #3
 80012e4:	e078      	b.n	80013d8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f003 0301 	and.w	r3, r3, #1
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d1e8      	bne.n	80012c6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80012fc:	697a      	ldr	r2, [r7, #20]
 80012fe:	4b38      	ldr	r3, [pc, #224]	; (80013e0 <HAL_DMA_Init+0x158>)
 8001300:	4013      	ands	r3, r2
 8001302:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	685a      	ldr	r2, [r3, #4]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	689b      	ldr	r3, [r3, #8]
 800130c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001312:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	691b      	ldr	r3, [r3, #16]
 8001318:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800131e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	699b      	ldr	r3, [r3, #24]
 8001324:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800132a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6a1b      	ldr	r3, [r3, #32]
 8001330:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001332:	697a      	ldr	r2, [r7, #20]
 8001334:	4313      	orrs	r3, r2
 8001336:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800133c:	2b04      	cmp	r3, #4
 800133e:	d107      	bne.n	8001350 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001348:	4313      	orrs	r3, r2
 800134a:	697a      	ldr	r2, [r7, #20]
 800134c:	4313      	orrs	r3, r2
 800134e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	697a      	ldr	r2, [r7, #20]
 8001356:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	695b      	ldr	r3, [r3, #20]
 800135e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	f023 0307 	bic.w	r3, r3, #7
 8001366:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800136c:	697a      	ldr	r2, [r7, #20]
 800136e:	4313      	orrs	r3, r2
 8001370:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001376:	2b04      	cmp	r3, #4
 8001378:	d117      	bne.n	80013aa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800137e:	697a      	ldr	r2, [r7, #20]
 8001380:	4313      	orrs	r3, r2
 8001382:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001388:	2b00      	cmp	r3, #0
 800138a:	d00e      	beq.n	80013aa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800138c:	6878      	ldr	r0, [r7, #4]
 800138e:	f000 fa91 	bl	80018b4 <DMA_CheckFifoParam>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d008      	beq.n	80013aa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2240      	movs	r2, #64	; 0x40
 800139c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2201      	movs	r2, #1
 80013a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80013a6:	2301      	movs	r3, #1
 80013a8:	e016      	b.n	80013d8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	697a      	ldr	r2, [r7, #20]
 80013b0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	f000 fa48 	bl	8001848 <DMA_CalcBaseAndBitshift>
 80013b8:	4603      	mov	r3, r0
 80013ba:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013c0:	223f      	movs	r2, #63	; 0x3f
 80013c2:	409a      	lsls	r2, r3
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2200      	movs	r2, #0
 80013cc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2201      	movs	r2, #1
 80013d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80013d6:	2300      	movs	r3, #0
}
 80013d8:	4618      	mov	r0, r3
 80013da:	3718      	adds	r7, #24
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	f010803f 	.word	0xf010803f

080013e4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b086      	sub	sp, #24
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	60f8      	str	r0, [r7, #12]
 80013ec:	60b9      	str	r1, [r7, #8]
 80013ee:	607a      	str	r2, [r7, #4]
 80013f0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80013f2:	2300      	movs	r3, #0
 80013f4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013fa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001402:	2b01      	cmp	r3, #1
 8001404:	d101      	bne.n	800140a <HAL_DMA_Start_IT+0x26>
 8001406:	2302      	movs	r3, #2
 8001408:	e040      	b.n	800148c <HAL_DMA_Start_IT+0xa8>
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	2201      	movs	r2, #1
 800140e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001418:	b2db      	uxtb	r3, r3
 800141a:	2b01      	cmp	r3, #1
 800141c:	d12f      	bne.n	800147e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	2202      	movs	r2, #2
 8001422:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	2200      	movs	r2, #0
 800142a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	687a      	ldr	r2, [r7, #4]
 8001430:	68b9      	ldr	r1, [r7, #8]
 8001432:	68f8      	ldr	r0, [r7, #12]
 8001434:	f000 f9da 	bl	80017ec <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800143c:	223f      	movs	r2, #63	; 0x3f
 800143e:	409a      	lsls	r2, r3
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f042 0216 	orr.w	r2, r2, #22
 8001452:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001458:	2b00      	cmp	r3, #0
 800145a:	d007      	beq.n	800146c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f042 0208 	orr.w	r2, r2, #8
 800146a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f042 0201 	orr.w	r2, r2, #1
 800147a:	601a      	str	r2, [r3, #0]
 800147c:	e005      	b.n	800148a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	2200      	movs	r2, #0
 8001482:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001486:	2302      	movs	r3, #2
 8001488:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800148a:	7dfb      	ldrb	r3, [r7, #23]
}
 800148c:	4618      	mov	r0, r3
 800148e:	3718      	adds	r7, #24
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}

08001494 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014a2:	b2db      	uxtb	r3, r3
 80014a4:	2b02      	cmp	r3, #2
 80014a6:	d004      	beq.n	80014b2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2280      	movs	r2, #128	; 0x80
 80014ac:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	e00c      	b.n	80014cc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2205      	movs	r2, #5
 80014b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f022 0201 	bic.w	r2, r2, #1
 80014c8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80014ca:	2300      	movs	r3, #0
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	370c      	adds	r7, #12
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr

080014d8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b086      	sub	sp, #24
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80014e0:	2300      	movs	r3, #0
 80014e2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80014e4:	4b92      	ldr	r3, [pc, #584]	; (8001730 <HAL_DMA_IRQHandler+0x258>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a92      	ldr	r2, [pc, #584]	; (8001734 <HAL_DMA_IRQHandler+0x25c>)
 80014ea:	fba2 2303 	umull	r2, r3, r2, r3
 80014ee:	0a9b      	lsrs	r3, r3, #10
 80014f0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014f6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001502:	2208      	movs	r2, #8
 8001504:	409a      	lsls	r2, r3
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	4013      	ands	r3, r2
 800150a:	2b00      	cmp	r3, #0
 800150c:	d01a      	beq.n	8001544 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f003 0304 	and.w	r3, r3, #4
 8001518:	2b00      	cmp	r3, #0
 800151a:	d013      	beq.n	8001544 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f022 0204 	bic.w	r2, r2, #4
 800152a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001530:	2208      	movs	r2, #8
 8001532:	409a      	lsls	r2, r3
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800153c:	f043 0201 	orr.w	r2, r3, #1
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001548:	2201      	movs	r2, #1
 800154a:	409a      	lsls	r2, r3
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	4013      	ands	r3, r2
 8001550:	2b00      	cmp	r3, #0
 8001552:	d012      	beq.n	800157a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	695b      	ldr	r3, [r3, #20]
 800155a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800155e:	2b00      	cmp	r3, #0
 8001560:	d00b      	beq.n	800157a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001566:	2201      	movs	r2, #1
 8001568:	409a      	lsls	r2, r3
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001572:	f043 0202 	orr.w	r2, r3, #2
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800157e:	2204      	movs	r2, #4
 8001580:	409a      	lsls	r2, r3
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	4013      	ands	r3, r2
 8001586:	2b00      	cmp	r3, #0
 8001588:	d012      	beq.n	80015b0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f003 0302 	and.w	r3, r3, #2
 8001594:	2b00      	cmp	r3, #0
 8001596:	d00b      	beq.n	80015b0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800159c:	2204      	movs	r2, #4
 800159e:	409a      	lsls	r2, r3
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015a8:	f043 0204 	orr.w	r2, r3, #4
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015b4:	2210      	movs	r2, #16
 80015b6:	409a      	lsls	r2, r3
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	4013      	ands	r3, r2
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d043      	beq.n	8001648 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f003 0308 	and.w	r3, r3, #8
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d03c      	beq.n	8001648 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015d2:	2210      	movs	r2, #16
 80015d4:	409a      	lsls	r2, r3
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d018      	beq.n	800161a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d108      	bne.n	8001608 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d024      	beq.n	8001648 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001602:	6878      	ldr	r0, [r7, #4]
 8001604:	4798      	blx	r3
 8001606:	e01f      	b.n	8001648 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800160c:	2b00      	cmp	r3, #0
 800160e:	d01b      	beq.n	8001648 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001614:	6878      	ldr	r0, [r7, #4]
 8001616:	4798      	blx	r3
 8001618:	e016      	b.n	8001648 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001624:	2b00      	cmp	r3, #0
 8001626:	d107      	bne.n	8001638 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f022 0208 	bic.w	r2, r2, #8
 8001636:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163c:	2b00      	cmp	r3, #0
 800163e:	d003      	beq.n	8001648 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001644:	6878      	ldr	r0, [r7, #4]
 8001646:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800164c:	2220      	movs	r2, #32
 800164e:	409a      	lsls	r2, r3
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	4013      	ands	r3, r2
 8001654:	2b00      	cmp	r3, #0
 8001656:	f000 808e 	beq.w	8001776 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 0310 	and.w	r3, r3, #16
 8001664:	2b00      	cmp	r3, #0
 8001666:	f000 8086 	beq.w	8001776 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800166e:	2220      	movs	r2, #32
 8001670:	409a      	lsls	r2, r3
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800167c:	b2db      	uxtb	r3, r3
 800167e:	2b05      	cmp	r3, #5
 8001680:	d136      	bne.n	80016f0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f022 0216 	bic.w	r2, r2, #22
 8001690:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	695a      	ldr	r2, [r3, #20]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80016a0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d103      	bne.n	80016b2 <HAL_DMA_IRQHandler+0x1da>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d007      	beq.n	80016c2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f022 0208 	bic.w	r2, r2, #8
 80016c0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016c6:	223f      	movs	r2, #63	; 0x3f
 80016c8:	409a      	lsls	r2, r3
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2200      	movs	r2, #0
 80016d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2201      	movs	r2, #1
 80016da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d07d      	beq.n	80017e2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	4798      	blx	r3
        }
        return;
 80016ee:	e078      	b.n	80017e2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d01c      	beq.n	8001738 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001708:	2b00      	cmp	r3, #0
 800170a:	d108      	bne.n	800171e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001710:	2b00      	cmp	r3, #0
 8001712:	d030      	beq.n	8001776 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	4798      	blx	r3
 800171c:	e02b      	b.n	8001776 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001722:	2b00      	cmp	r3, #0
 8001724:	d027      	beq.n	8001776 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	4798      	blx	r3
 800172e:	e022      	b.n	8001776 <HAL_DMA_IRQHandler+0x29e>
 8001730:	20000000 	.word	0x20000000
 8001734:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001742:	2b00      	cmp	r3, #0
 8001744:	d10f      	bne.n	8001766 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f022 0210 	bic.w	r2, r2, #16
 8001754:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2200      	movs	r2, #0
 800175a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2201      	movs	r2, #1
 8001762:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800176a:	2b00      	cmp	r3, #0
 800176c:	d003      	beq.n	8001776 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800177a:	2b00      	cmp	r3, #0
 800177c:	d032      	beq.n	80017e4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001782:	f003 0301 	and.w	r3, r3, #1
 8001786:	2b00      	cmp	r3, #0
 8001788:	d022      	beq.n	80017d0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2205      	movs	r2, #5
 800178e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f022 0201 	bic.w	r2, r2, #1
 80017a0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	3301      	adds	r3, #1
 80017a6:	60bb      	str	r3, [r7, #8]
 80017a8:	697a      	ldr	r2, [r7, #20]
 80017aa:	429a      	cmp	r2, r3
 80017ac:	d307      	bcc.n	80017be <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 0301 	and.w	r3, r3, #1
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d1f2      	bne.n	80017a2 <HAL_DMA_IRQHandler+0x2ca>
 80017bc:	e000      	b.n	80017c0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80017be:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2200      	movs	r2, #0
 80017c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2201      	movs	r2, #1
 80017cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d005      	beq.n	80017e4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	4798      	blx	r3
 80017e0:	e000      	b.n	80017e4 <HAL_DMA_IRQHandler+0x30c>
        return;
 80017e2:	bf00      	nop
    }
  }
}
 80017e4:	3718      	adds	r7, #24
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop

080017ec <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b085      	sub	sp, #20
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	60f8      	str	r0, [r7, #12]
 80017f4:	60b9      	str	r1, [r7, #8]
 80017f6:	607a      	str	r2, [r7, #4]
 80017f8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001808:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	683a      	ldr	r2, [r7, #0]
 8001810:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	2b40      	cmp	r3, #64	; 0x40
 8001818:	d108      	bne.n	800182c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	687a      	ldr	r2, [r7, #4]
 8001820:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	68ba      	ldr	r2, [r7, #8]
 8001828:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800182a:	e007      	b.n	800183c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	68ba      	ldr	r2, [r7, #8]
 8001832:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	687a      	ldr	r2, [r7, #4]
 800183a:	60da      	str	r2, [r3, #12]
}
 800183c:	bf00      	nop
 800183e:	3714      	adds	r7, #20
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr

08001848 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001848:	b480      	push	{r7}
 800184a:	b085      	sub	sp, #20
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	b2db      	uxtb	r3, r3
 8001856:	3b10      	subs	r3, #16
 8001858:	4a14      	ldr	r2, [pc, #80]	; (80018ac <DMA_CalcBaseAndBitshift+0x64>)
 800185a:	fba2 2303 	umull	r2, r3, r2, r3
 800185e:	091b      	lsrs	r3, r3, #4
 8001860:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001862:	4a13      	ldr	r2, [pc, #76]	; (80018b0 <DMA_CalcBaseAndBitshift+0x68>)
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	4413      	add	r3, r2
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	461a      	mov	r2, r3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	2b03      	cmp	r3, #3
 8001874:	d909      	bls.n	800188a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800187e:	f023 0303 	bic.w	r3, r3, #3
 8001882:	1d1a      	adds	r2, r3, #4
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	659a      	str	r2, [r3, #88]	; 0x58
 8001888:	e007      	b.n	800189a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001892:	f023 0303 	bic.w	r3, r3, #3
 8001896:	687a      	ldr	r2, [r7, #4]
 8001898:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3714      	adds	r7, #20
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	aaaaaaab 	.word	0xaaaaaaab
 80018b0:	0800453c 	.word	0x0800453c

080018b4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b085      	sub	sp, #20
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018bc:	2300      	movs	r3, #0
 80018be:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018c4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	699b      	ldr	r3, [r3, #24]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d11f      	bne.n	800190e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	2b03      	cmp	r3, #3
 80018d2:	d855      	bhi.n	8001980 <DMA_CheckFifoParam+0xcc>
 80018d4:	a201      	add	r2, pc, #4	; (adr r2, 80018dc <DMA_CheckFifoParam+0x28>)
 80018d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018da:	bf00      	nop
 80018dc:	080018ed 	.word	0x080018ed
 80018e0:	080018ff 	.word	0x080018ff
 80018e4:	080018ed 	.word	0x080018ed
 80018e8:	08001981 	.word	0x08001981
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d045      	beq.n	8001984 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80018fc:	e042      	b.n	8001984 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001902:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001906:	d13f      	bne.n	8001988 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001908:	2301      	movs	r3, #1
 800190a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800190c:	e03c      	b.n	8001988 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	699b      	ldr	r3, [r3, #24]
 8001912:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001916:	d121      	bne.n	800195c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	2b03      	cmp	r3, #3
 800191c:	d836      	bhi.n	800198c <DMA_CheckFifoParam+0xd8>
 800191e:	a201      	add	r2, pc, #4	; (adr r2, 8001924 <DMA_CheckFifoParam+0x70>)
 8001920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001924:	08001935 	.word	0x08001935
 8001928:	0800193b 	.word	0x0800193b
 800192c:	08001935 	.word	0x08001935
 8001930:	0800194d 	.word	0x0800194d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	73fb      	strb	r3, [r7, #15]
      break;
 8001938:	e02f      	b.n	800199a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800193e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d024      	beq.n	8001990 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800194a:	e021      	b.n	8001990 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001950:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001954:	d11e      	bne.n	8001994 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800195a:	e01b      	b.n	8001994 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	2b02      	cmp	r3, #2
 8001960:	d902      	bls.n	8001968 <DMA_CheckFifoParam+0xb4>
 8001962:	2b03      	cmp	r3, #3
 8001964:	d003      	beq.n	800196e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001966:	e018      	b.n	800199a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001968:	2301      	movs	r3, #1
 800196a:	73fb      	strb	r3, [r7, #15]
      break;
 800196c:	e015      	b.n	800199a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001972:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d00e      	beq.n	8001998 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	73fb      	strb	r3, [r7, #15]
      break;
 800197e:	e00b      	b.n	8001998 <DMA_CheckFifoParam+0xe4>
      break;
 8001980:	bf00      	nop
 8001982:	e00a      	b.n	800199a <DMA_CheckFifoParam+0xe6>
      break;
 8001984:	bf00      	nop
 8001986:	e008      	b.n	800199a <DMA_CheckFifoParam+0xe6>
      break;
 8001988:	bf00      	nop
 800198a:	e006      	b.n	800199a <DMA_CheckFifoParam+0xe6>
      break;
 800198c:	bf00      	nop
 800198e:	e004      	b.n	800199a <DMA_CheckFifoParam+0xe6>
      break;
 8001990:	bf00      	nop
 8001992:	e002      	b.n	800199a <DMA_CheckFifoParam+0xe6>
      break;   
 8001994:	bf00      	nop
 8001996:	e000      	b.n	800199a <DMA_CheckFifoParam+0xe6>
      break;
 8001998:	bf00      	nop
    }
  } 
  
  return status; 
 800199a:	7bfb      	ldrb	r3, [r7, #15]
}
 800199c:	4618      	mov	r0, r3
 800199e:	3714      	adds	r7, #20
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr

080019a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b089      	sub	sp, #36	; 0x24
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019b2:	2300      	movs	r3, #0
 80019b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019b6:	2300      	movs	r3, #0
 80019b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019ba:	2300      	movs	r3, #0
 80019bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019be:	2300      	movs	r3, #0
 80019c0:	61fb      	str	r3, [r7, #28]
 80019c2:	e16b      	b.n	8001c9c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019c4:	2201      	movs	r2, #1
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	fa02 f303 	lsl.w	r3, r2, r3
 80019cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	697a      	ldr	r2, [r7, #20]
 80019d4:	4013      	ands	r3, r2
 80019d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019d8:	693a      	ldr	r2, [r7, #16]
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	429a      	cmp	r2, r3
 80019de:	f040 815a 	bne.w	8001c96 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d00b      	beq.n	8001a02 <HAL_GPIO_Init+0x5a>
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	2b02      	cmp	r3, #2
 80019f0:	d007      	beq.n	8001a02 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019f6:	2b11      	cmp	r3, #17
 80019f8:	d003      	beq.n	8001a02 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	2b12      	cmp	r3, #18
 8001a00:	d130      	bne.n	8001a64 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	005b      	lsls	r3, r3, #1
 8001a0c:	2203      	movs	r2, #3
 8001a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a12:	43db      	mvns	r3, r3
 8001a14:	69ba      	ldr	r2, [r7, #24]
 8001a16:	4013      	ands	r3, r2
 8001a18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	68da      	ldr	r2, [r3, #12]
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	005b      	lsls	r3, r3, #1
 8001a22:	fa02 f303 	lsl.w	r3, r2, r3
 8001a26:	69ba      	ldr	r2, [r7, #24]
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	69ba      	ldr	r2, [r7, #24]
 8001a30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a38:	2201      	movs	r2, #1
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a40:	43db      	mvns	r3, r3
 8001a42:	69ba      	ldr	r2, [r7, #24]
 8001a44:	4013      	ands	r3, r2
 8001a46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	091b      	lsrs	r3, r3, #4
 8001a4e:	f003 0201 	and.w	r2, r3, #1
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	fa02 f303 	lsl.w	r3, r2, r3
 8001a58:	69ba      	ldr	r2, [r7, #24]
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	69ba      	ldr	r2, [r7, #24]
 8001a62:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	005b      	lsls	r3, r3, #1
 8001a6e:	2203      	movs	r2, #3
 8001a70:	fa02 f303 	lsl.w	r3, r2, r3
 8001a74:	43db      	mvns	r3, r3
 8001a76:	69ba      	ldr	r2, [r7, #24]
 8001a78:	4013      	ands	r3, r2
 8001a7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	689a      	ldr	r2, [r3, #8]
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	005b      	lsls	r3, r3, #1
 8001a84:	fa02 f303 	lsl.w	r3, r2, r3
 8001a88:	69ba      	ldr	r2, [r7, #24]
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	69ba      	ldr	r2, [r7, #24]
 8001a92:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	2b02      	cmp	r3, #2
 8001a9a:	d003      	beq.n	8001aa4 <HAL_GPIO_Init+0xfc>
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	2b12      	cmp	r3, #18
 8001aa2:	d123      	bne.n	8001aec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001aa4:	69fb      	ldr	r3, [r7, #28]
 8001aa6:	08da      	lsrs	r2, r3, #3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	3208      	adds	r2, #8
 8001aac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ab0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	f003 0307 	and.w	r3, r3, #7
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	220f      	movs	r2, #15
 8001abc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac0:	43db      	mvns	r3, r3
 8001ac2:	69ba      	ldr	r2, [r7, #24]
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	691a      	ldr	r2, [r3, #16]
 8001acc:	69fb      	ldr	r3, [r7, #28]
 8001ace:	f003 0307 	and.w	r3, r3, #7
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad8:	69ba      	ldr	r2, [r7, #24]
 8001ada:	4313      	orrs	r3, r2
 8001adc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	08da      	lsrs	r2, r3, #3
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	3208      	adds	r2, #8
 8001ae6:	69b9      	ldr	r1, [r7, #24]
 8001ae8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	005b      	lsls	r3, r3, #1
 8001af6:	2203      	movs	r2, #3
 8001af8:	fa02 f303 	lsl.w	r3, r2, r3
 8001afc:	43db      	mvns	r3, r3
 8001afe:	69ba      	ldr	r2, [r7, #24]
 8001b00:	4013      	ands	r3, r2
 8001b02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f003 0203 	and.w	r2, r3, #3
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	005b      	lsls	r3, r3, #1
 8001b10:	fa02 f303 	lsl.w	r3, r2, r3
 8001b14:	69ba      	ldr	r2, [r7, #24]
 8001b16:	4313      	orrs	r3, r2
 8001b18:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	69ba      	ldr	r2, [r7, #24]
 8001b1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	f000 80b4 	beq.w	8001c96 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b2e:	2300      	movs	r3, #0
 8001b30:	60fb      	str	r3, [r7, #12]
 8001b32:	4b5f      	ldr	r3, [pc, #380]	; (8001cb0 <HAL_GPIO_Init+0x308>)
 8001b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b36:	4a5e      	ldr	r2, [pc, #376]	; (8001cb0 <HAL_GPIO_Init+0x308>)
 8001b38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b3c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b3e:	4b5c      	ldr	r3, [pc, #368]	; (8001cb0 <HAL_GPIO_Init+0x308>)
 8001b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b46:	60fb      	str	r3, [r7, #12]
 8001b48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b4a:	4a5a      	ldr	r2, [pc, #360]	; (8001cb4 <HAL_GPIO_Init+0x30c>)
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	089b      	lsrs	r3, r3, #2
 8001b50:	3302      	adds	r3, #2
 8001b52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	f003 0303 	and.w	r3, r3, #3
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	220f      	movs	r2, #15
 8001b62:	fa02 f303 	lsl.w	r3, r2, r3
 8001b66:	43db      	mvns	r3, r3
 8001b68:	69ba      	ldr	r2, [r7, #24]
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4a51      	ldr	r2, [pc, #324]	; (8001cb8 <HAL_GPIO_Init+0x310>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d02b      	beq.n	8001bce <HAL_GPIO_Init+0x226>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4a50      	ldr	r2, [pc, #320]	; (8001cbc <HAL_GPIO_Init+0x314>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d025      	beq.n	8001bca <HAL_GPIO_Init+0x222>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4a4f      	ldr	r2, [pc, #316]	; (8001cc0 <HAL_GPIO_Init+0x318>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d01f      	beq.n	8001bc6 <HAL_GPIO_Init+0x21e>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4a4e      	ldr	r2, [pc, #312]	; (8001cc4 <HAL_GPIO_Init+0x31c>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d019      	beq.n	8001bc2 <HAL_GPIO_Init+0x21a>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4a4d      	ldr	r2, [pc, #308]	; (8001cc8 <HAL_GPIO_Init+0x320>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d013      	beq.n	8001bbe <HAL_GPIO_Init+0x216>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4a4c      	ldr	r2, [pc, #304]	; (8001ccc <HAL_GPIO_Init+0x324>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d00d      	beq.n	8001bba <HAL_GPIO_Init+0x212>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4a4b      	ldr	r2, [pc, #300]	; (8001cd0 <HAL_GPIO_Init+0x328>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d007      	beq.n	8001bb6 <HAL_GPIO_Init+0x20e>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4a4a      	ldr	r2, [pc, #296]	; (8001cd4 <HAL_GPIO_Init+0x32c>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d101      	bne.n	8001bb2 <HAL_GPIO_Init+0x20a>
 8001bae:	2307      	movs	r3, #7
 8001bb0:	e00e      	b.n	8001bd0 <HAL_GPIO_Init+0x228>
 8001bb2:	2308      	movs	r3, #8
 8001bb4:	e00c      	b.n	8001bd0 <HAL_GPIO_Init+0x228>
 8001bb6:	2306      	movs	r3, #6
 8001bb8:	e00a      	b.n	8001bd0 <HAL_GPIO_Init+0x228>
 8001bba:	2305      	movs	r3, #5
 8001bbc:	e008      	b.n	8001bd0 <HAL_GPIO_Init+0x228>
 8001bbe:	2304      	movs	r3, #4
 8001bc0:	e006      	b.n	8001bd0 <HAL_GPIO_Init+0x228>
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e004      	b.n	8001bd0 <HAL_GPIO_Init+0x228>
 8001bc6:	2302      	movs	r3, #2
 8001bc8:	e002      	b.n	8001bd0 <HAL_GPIO_Init+0x228>
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e000      	b.n	8001bd0 <HAL_GPIO_Init+0x228>
 8001bce:	2300      	movs	r3, #0
 8001bd0:	69fa      	ldr	r2, [r7, #28]
 8001bd2:	f002 0203 	and.w	r2, r2, #3
 8001bd6:	0092      	lsls	r2, r2, #2
 8001bd8:	4093      	lsls	r3, r2
 8001bda:	69ba      	ldr	r2, [r7, #24]
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001be0:	4934      	ldr	r1, [pc, #208]	; (8001cb4 <HAL_GPIO_Init+0x30c>)
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	089b      	lsrs	r3, r3, #2
 8001be6:	3302      	adds	r3, #2
 8001be8:	69ba      	ldr	r2, [r7, #24]
 8001bea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bee:	4b3a      	ldr	r3, [pc, #232]	; (8001cd8 <HAL_GPIO_Init+0x330>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	43db      	mvns	r3, r3
 8001bf8:	69ba      	ldr	r2, [r7, #24]
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d003      	beq.n	8001c12 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001c0a:	69ba      	ldr	r2, [r7, #24]
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c12:	4a31      	ldr	r2, [pc, #196]	; (8001cd8 <HAL_GPIO_Init+0x330>)
 8001c14:	69bb      	ldr	r3, [r7, #24]
 8001c16:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001c18:	4b2f      	ldr	r3, [pc, #188]	; (8001cd8 <HAL_GPIO_Init+0x330>)
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	43db      	mvns	r3, r3
 8001c22:	69ba      	ldr	r2, [r7, #24]
 8001c24:	4013      	ands	r3, r2
 8001c26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d003      	beq.n	8001c3c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001c34:	69ba      	ldr	r2, [r7, #24]
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c3c:	4a26      	ldr	r2, [pc, #152]	; (8001cd8 <HAL_GPIO_Init+0x330>)
 8001c3e:	69bb      	ldr	r3, [r7, #24]
 8001c40:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c42:	4b25      	ldr	r3, [pc, #148]	; (8001cd8 <HAL_GPIO_Init+0x330>)
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	43db      	mvns	r3, r3
 8001c4c:	69ba      	ldr	r2, [r7, #24]
 8001c4e:	4013      	ands	r3, r2
 8001c50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d003      	beq.n	8001c66 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001c5e:	69ba      	ldr	r2, [r7, #24]
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	4313      	orrs	r3, r2
 8001c64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c66:	4a1c      	ldr	r2, [pc, #112]	; (8001cd8 <HAL_GPIO_Init+0x330>)
 8001c68:	69bb      	ldr	r3, [r7, #24]
 8001c6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c6c:	4b1a      	ldr	r3, [pc, #104]	; (8001cd8 <HAL_GPIO_Init+0x330>)
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	43db      	mvns	r3, r3
 8001c76:	69ba      	ldr	r2, [r7, #24]
 8001c78:	4013      	ands	r3, r2
 8001c7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d003      	beq.n	8001c90 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001c88:	69ba      	ldr	r2, [r7, #24]
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c90:	4a11      	ldr	r2, [pc, #68]	; (8001cd8 <HAL_GPIO_Init+0x330>)
 8001c92:	69bb      	ldr	r3, [r7, #24]
 8001c94:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	3301      	adds	r3, #1
 8001c9a:	61fb      	str	r3, [r7, #28]
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	2b0f      	cmp	r3, #15
 8001ca0:	f67f ae90 	bls.w	80019c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ca4:	bf00      	nop
 8001ca6:	3724      	adds	r7, #36	; 0x24
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr
 8001cb0:	40023800 	.word	0x40023800
 8001cb4:	40013800 	.word	0x40013800
 8001cb8:	40020000 	.word	0x40020000
 8001cbc:	40020400 	.word	0x40020400
 8001cc0:	40020800 	.word	0x40020800
 8001cc4:	40020c00 	.word	0x40020c00
 8001cc8:	40021000 	.word	0x40021000
 8001ccc:	40021400 	.word	0x40021400
 8001cd0:	40021800 	.word	0x40021800
 8001cd4:	40021c00 	.word	0x40021c00
 8001cd8:	40013c00 	.word	0x40013c00

08001cdc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	460b      	mov	r3, r1
 8001ce6:	807b      	strh	r3, [r7, #2]
 8001ce8:	4613      	mov	r3, r2
 8001cea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cec:	787b      	ldrb	r3, [r7, #1]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d003      	beq.n	8001cfa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cf2:	887a      	ldrh	r2, [r7, #2]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001cf8:	e003      	b.n	8001d02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001cfa:	887b      	ldrh	r3, [r7, #2]
 8001cfc:	041a      	lsls	r2, r3, #16
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	619a      	str	r2, [r3, #24]
}
 8001d02:	bf00      	nop
 8001d04:	370c      	adds	r7, #12
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
	...

08001d10 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b086      	sub	sp, #24
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d101      	bne.n	8001d22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e25b      	b.n	80021da <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0301 	and.w	r3, r3, #1
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d075      	beq.n	8001e1a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d2e:	4ba3      	ldr	r3, [pc, #652]	; (8001fbc <HAL_RCC_OscConfig+0x2ac>)
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	f003 030c 	and.w	r3, r3, #12
 8001d36:	2b04      	cmp	r3, #4
 8001d38:	d00c      	beq.n	8001d54 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d3a:	4ba0      	ldr	r3, [pc, #640]	; (8001fbc <HAL_RCC_OscConfig+0x2ac>)
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d42:	2b08      	cmp	r3, #8
 8001d44:	d112      	bne.n	8001d6c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d46:	4b9d      	ldr	r3, [pc, #628]	; (8001fbc <HAL_RCC_OscConfig+0x2ac>)
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d52:	d10b      	bne.n	8001d6c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d54:	4b99      	ldr	r3, [pc, #612]	; (8001fbc <HAL_RCC_OscConfig+0x2ac>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d05b      	beq.n	8001e18 <HAL_RCC_OscConfig+0x108>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d157      	bne.n	8001e18 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e236      	b.n	80021da <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d74:	d106      	bne.n	8001d84 <HAL_RCC_OscConfig+0x74>
 8001d76:	4b91      	ldr	r3, [pc, #580]	; (8001fbc <HAL_RCC_OscConfig+0x2ac>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a90      	ldr	r2, [pc, #576]	; (8001fbc <HAL_RCC_OscConfig+0x2ac>)
 8001d7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d80:	6013      	str	r3, [r2, #0]
 8001d82:	e01d      	b.n	8001dc0 <HAL_RCC_OscConfig+0xb0>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d8c:	d10c      	bne.n	8001da8 <HAL_RCC_OscConfig+0x98>
 8001d8e:	4b8b      	ldr	r3, [pc, #556]	; (8001fbc <HAL_RCC_OscConfig+0x2ac>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a8a      	ldr	r2, [pc, #552]	; (8001fbc <HAL_RCC_OscConfig+0x2ac>)
 8001d94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d98:	6013      	str	r3, [r2, #0]
 8001d9a:	4b88      	ldr	r3, [pc, #544]	; (8001fbc <HAL_RCC_OscConfig+0x2ac>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a87      	ldr	r2, [pc, #540]	; (8001fbc <HAL_RCC_OscConfig+0x2ac>)
 8001da0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001da4:	6013      	str	r3, [r2, #0]
 8001da6:	e00b      	b.n	8001dc0 <HAL_RCC_OscConfig+0xb0>
 8001da8:	4b84      	ldr	r3, [pc, #528]	; (8001fbc <HAL_RCC_OscConfig+0x2ac>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a83      	ldr	r2, [pc, #524]	; (8001fbc <HAL_RCC_OscConfig+0x2ac>)
 8001dae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001db2:	6013      	str	r3, [r2, #0]
 8001db4:	4b81      	ldr	r3, [pc, #516]	; (8001fbc <HAL_RCC_OscConfig+0x2ac>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a80      	ldr	r2, [pc, #512]	; (8001fbc <HAL_RCC_OscConfig+0x2ac>)
 8001dba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dbe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d013      	beq.n	8001df0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc8:	f7ff f940 	bl	800104c <HAL_GetTick>
 8001dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dce:	e008      	b.n	8001de2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001dd0:	f7ff f93c 	bl	800104c <HAL_GetTick>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	2b64      	cmp	r3, #100	; 0x64
 8001ddc:	d901      	bls.n	8001de2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001dde:	2303      	movs	r3, #3
 8001de0:	e1fb      	b.n	80021da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001de2:	4b76      	ldr	r3, [pc, #472]	; (8001fbc <HAL_RCC_OscConfig+0x2ac>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d0f0      	beq.n	8001dd0 <HAL_RCC_OscConfig+0xc0>
 8001dee:	e014      	b.n	8001e1a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001df0:	f7ff f92c 	bl	800104c <HAL_GetTick>
 8001df4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001df6:	e008      	b.n	8001e0a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001df8:	f7ff f928 	bl	800104c <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	2b64      	cmp	r3, #100	; 0x64
 8001e04:	d901      	bls.n	8001e0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e1e7      	b.n	80021da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e0a:	4b6c      	ldr	r3, [pc, #432]	; (8001fbc <HAL_RCC_OscConfig+0x2ac>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d1f0      	bne.n	8001df8 <HAL_RCC_OscConfig+0xe8>
 8001e16:	e000      	b.n	8001e1a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 0302 	and.w	r3, r3, #2
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d063      	beq.n	8001eee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e26:	4b65      	ldr	r3, [pc, #404]	; (8001fbc <HAL_RCC_OscConfig+0x2ac>)
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	f003 030c 	and.w	r3, r3, #12
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d00b      	beq.n	8001e4a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e32:	4b62      	ldr	r3, [pc, #392]	; (8001fbc <HAL_RCC_OscConfig+0x2ac>)
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e3a:	2b08      	cmp	r3, #8
 8001e3c:	d11c      	bne.n	8001e78 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e3e:	4b5f      	ldr	r3, [pc, #380]	; (8001fbc <HAL_RCC_OscConfig+0x2ac>)
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d116      	bne.n	8001e78 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e4a:	4b5c      	ldr	r3, [pc, #368]	; (8001fbc <HAL_RCC_OscConfig+0x2ac>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 0302 	and.w	r3, r3, #2
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d005      	beq.n	8001e62 <HAL_RCC_OscConfig+0x152>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	68db      	ldr	r3, [r3, #12]
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d001      	beq.n	8001e62 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e1bb      	b.n	80021da <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e62:	4b56      	ldr	r3, [pc, #344]	; (8001fbc <HAL_RCC_OscConfig+0x2ac>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	691b      	ldr	r3, [r3, #16]
 8001e6e:	00db      	lsls	r3, r3, #3
 8001e70:	4952      	ldr	r1, [pc, #328]	; (8001fbc <HAL_RCC_OscConfig+0x2ac>)
 8001e72:	4313      	orrs	r3, r2
 8001e74:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e76:	e03a      	b.n	8001eee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d020      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e80:	4b4f      	ldr	r3, [pc, #316]	; (8001fc0 <HAL_RCC_OscConfig+0x2b0>)
 8001e82:	2201      	movs	r2, #1
 8001e84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e86:	f7ff f8e1 	bl	800104c <HAL_GetTick>
 8001e8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e8c:	e008      	b.n	8001ea0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e8e:	f7ff f8dd 	bl	800104c <HAL_GetTick>
 8001e92:	4602      	mov	r2, r0
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	1ad3      	subs	r3, r2, r3
 8001e98:	2b02      	cmp	r3, #2
 8001e9a:	d901      	bls.n	8001ea0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	e19c      	b.n	80021da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ea0:	4b46      	ldr	r3, [pc, #280]	; (8001fbc <HAL_RCC_OscConfig+0x2ac>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 0302 	and.w	r3, r3, #2
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d0f0      	beq.n	8001e8e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eac:	4b43      	ldr	r3, [pc, #268]	; (8001fbc <HAL_RCC_OscConfig+0x2ac>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	691b      	ldr	r3, [r3, #16]
 8001eb8:	00db      	lsls	r3, r3, #3
 8001eba:	4940      	ldr	r1, [pc, #256]	; (8001fbc <HAL_RCC_OscConfig+0x2ac>)
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	600b      	str	r3, [r1, #0]
 8001ec0:	e015      	b.n	8001eee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ec2:	4b3f      	ldr	r3, [pc, #252]	; (8001fc0 <HAL_RCC_OscConfig+0x2b0>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ec8:	f7ff f8c0 	bl	800104c <HAL_GetTick>
 8001ecc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ece:	e008      	b.n	8001ee2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ed0:	f7ff f8bc 	bl	800104c <HAL_GetTick>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d901      	bls.n	8001ee2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e17b      	b.n	80021da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ee2:	4b36      	ldr	r3, [pc, #216]	; (8001fbc <HAL_RCC_OscConfig+0x2ac>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0302 	and.w	r3, r3, #2
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d1f0      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 0308 	and.w	r3, r3, #8
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d030      	beq.n	8001f5c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	695b      	ldr	r3, [r3, #20]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d016      	beq.n	8001f30 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f02:	4b30      	ldr	r3, [pc, #192]	; (8001fc4 <HAL_RCC_OscConfig+0x2b4>)
 8001f04:	2201      	movs	r2, #1
 8001f06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f08:	f7ff f8a0 	bl	800104c <HAL_GetTick>
 8001f0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f0e:	e008      	b.n	8001f22 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f10:	f7ff f89c 	bl	800104c <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d901      	bls.n	8001f22 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e15b      	b.n	80021da <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f22:	4b26      	ldr	r3, [pc, #152]	; (8001fbc <HAL_RCC_OscConfig+0x2ac>)
 8001f24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f26:	f003 0302 	and.w	r3, r3, #2
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d0f0      	beq.n	8001f10 <HAL_RCC_OscConfig+0x200>
 8001f2e:	e015      	b.n	8001f5c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f30:	4b24      	ldr	r3, [pc, #144]	; (8001fc4 <HAL_RCC_OscConfig+0x2b4>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f36:	f7ff f889 	bl	800104c <HAL_GetTick>
 8001f3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f3c:	e008      	b.n	8001f50 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f3e:	f7ff f885 	bl	800104c <HAL_GetTick>
 8001f42:	4602      	mov	r2, r0
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	1ad3      	subs	r3, r2, r3
 8001f48:	2b02      	cmp	r3, #2
 8001f4a:	d901      	bls.n	8001f50 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	e144      	b.n	80021da <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f50:	4b1a      	ldr	r3, [pc, #104]	; (8001fbc <HAL_RCC_OscConfig+0x2ac>)
 8001f52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f54:	f003 0302 	and.w	r3, r3, #2
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d1f0      	bne.n	8001f3e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 0304 	and.w	r3, r3, #4
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	f000 80a0 	beq.w	80020aa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f6e:	4b13      	ldr	r3, [pc, #76]	; (8001fbc <HAL_RCC_OscConfig+0x2ac>)
 8001f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d10f      	bne.n	8001f9a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	60bb      	str	r3, [r7, #8]
 8001f7e:	4b0f      	ldr	r3, [pc, #60]	; (8001fbc <HAL_RCC_OscConfig+0x2ac>)
 8001f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f82:	4a0e      	ldr	r2, [pc, #56]	; (8001fbc <HAL_RCC_OscConfig+0x2ac>)
 8001f84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f88:	6413      	str	r3, [r2, #64]	; 0x40
 8001f8a:	4b0c      	ldr	r3, [pc, #48]	; (8001fbc <HAL_RCC_OscConfig+0x2ac>)
 8001f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f92:	60bb      	str	r3, [r7, #8]
 8001f94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f96:	2301      	movs	r3, #1
 8001f98:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f9a:	4b0b      	ldr	r3, [pc, #44]	; (8001fc8 <HAL_RCC_OscConfig+0x2b8>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d121      	bne.n	8001fea <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fa6:	4b08      	ldr	r3, [pc, #32]	; (8001fc8 <HAL_RCC_OscConfig+0x2b8>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a07      	ldr	r2, [pc, #28]	; (8001fc8 <HAL_RCC_OscConfig+0x2b8>)
 8001fac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fb0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fb2:	f7ff f84b 	bl	800104c <HAL_GetTick>
 8001fb6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fb8:	e011      	b.n	8001fde <HAL_RCC_OscConfig+0x2ce>
 8001fba:	bf00      	nop
 8001fbc:	40023800 	.word	0x40023800
 8001fc0:	42470000 	.word	0x42470000
 8001fc4:	42470e80 	.word	0x42470e80
 8001fc8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fcc:	f7ff f83e 	bl	800104c <HAL_GetTick>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	d901      	bls.n	8001fde <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e0fd      	b.n	80021da <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fde:	4b81      	ldr	r3, [pc, #516]	; (80021e4 <HAL_RCC_OscConfig+0x4d4>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d0f0      	beq.n	8001fcc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d106      	bne.n	8002000 <HAL_RCC_OscConfig+0x2f0>
 8001ff2:	4b7d      	ldr	r3, [pc, #500]	; (80021e8 <HAL_RCC_OscConfig+0x4d8>)
 8001ff4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ff6:	4a7c      	ldr	r2, [pc, #496]	; (80021e8 <HAL_RCC_OscConfig+0x4d8>)
 8001ff8:	f043 0301 	orr.w	r3, r3, #1
 8001ffc:	6713      	str	r3, [r2, #112]	; 0x70
 8001ffe:	e01c      	b.n	800203a <HAL_RCC_OscConfig+0x32a>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	2b05      	cmp	r3, #5
 8002006:	d10c      	bne.n	8002022 <HAL_RCC_OscConfig+0x312>
 8002008:	4b77      	ldr	r3, [pc, #476]	; (80021e8 <HAL_RCC_OscConfig+0x4d8>)
 800200a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800200c:	4a76      	ldr	r2, [pc, #472]	; (80021e8 <HAL_RCC_OscConfig+0x4d8>)
 800200e:	f043 0304 	orr.w	r3, r3, #4
 8002012:	6713      	str	r3, [r2, #112]	; 0x70
 8002014:	4b74      	ldr	r3, [pc, #464]	; (80021e8 <HAL_RCC_OscConfig+0x4d8>)
 8002016:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002018:	4a73      	ldr	r2, [pc, #460]	; (80021e8 <HAL_RCC_OscConfig+0x4d8>)
 800201a:	f043 0301 	orr.w	r3, r3, #1
 800201e:	6713      	str	r3, [r2, #112]	; 0x70
 8002020:	e00b      	b.n	800203a <HAL_RCC_OscConfig+0x32a>
 8002022:	4b71      	ldr	r3, [pc, #452]	; (80021e8 <HAL_RCC_OscConfig+0x4d8>)
 8002024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002026:	4a70      	ldr	r2, [pc, #448]	; (80021e8 <HAL_RCC_OscConfig+0x4d8>)
 8002028:	f023 0301 	bic.w	r3, r3, #1
 800202c:	6713      	str	r3, [r2, #112]	; 0x70
 800202e:	4b6e      	ldr	r3, [pc, #440]	; (80021e8 <HAL_RCC_OscConfig+0x4d8>)
 8002030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002032:	4a6d      	ldr	r2, [pc, #436]	; (80021e8 <HAL_RCC_OscConfig+0x4d8>)
 8002034:	f023 0304 	bic.w	r3, r3, #4
 8002038:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d015      	beq.n	800206e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002042:	f7ff f803 	bl	800104c <HAL_GetTick>
 8002046:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002048:	e00a      	b.n	8002060 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800204a:	f7fe ffff 	bl	800104c <HAL_GetTick>
 800204e:	4602      	mov	r2, r0
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	1ad3      	subs	r3, r2, r3
 8002054:	f241 3288 	movw	r2, #5000	; 0x1388
 8002058:	4293      	cmp	r3, r2
 800205a:	d901      	bls.n	8002060 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800205c:	2303      	movs	r3, #3
 800205e:	e0bc      	b.n	80021da <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002060:	4b61      	ldr	r3, [pc, #388]	; (80021e8 <HAL_RCC_OscConfig+0x4d8>)
 8002062:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002064:	f003 0302 	and.w	r3, r3, #2
 8002068:	2b00      	cmp	r3, #0
 800206a:	d0ee      	beq.n	800204a <HAL_RCC_OscConfig+0x33a>
 800206c:	e014      	b.n	8002098 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800206e:	f7fe ffed 	bl	800104c <HAL_GetTick>
 8002072:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002074:	e00a      	b.n	800208c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002076:	f7fe ffe9 	bl	800104c <HAL_GetTick>
 800207a:	4602      	mov	r2, r0
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	f241 3288 	movw	r2, #5000	; 0x1388
 8002084:	4293      	cmp	r3, r2
 8002086:	d901      	bls.n	800208c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002088:	2303      	movs	r3, #3
 800208a:	e0a6      	b.n	80021da <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800208c:	4b56      	ldr	r3, [pc, #344]	; (80021e8 <HAL_RCC_OscConfig+0x4d8>)
 800208e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002090:	f003 0302 	and.w	r3, r3, #2
 8002094:	2b00      	cmp	r3, #0
 8002096:	d1ee      	bne.n	8002076 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002098:	7dfb      	ldrb	r3, [r7, #23]
 800209a:	2b01      	cmp	r3, #1
 800209c:	d105      	bne.n	80020aa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800209e:	4b52      	ldr	r3, [pc, #328]	; (80021e8 <HAL_RCC_OscConfig+0x4d8>)
 80020a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a2:	4a51      	ldr	r2, [pc, #324]	; (80021e8 <HAL_RCC_OscConfig+0x4d8>)
 80020a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020a8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	699b      	ldr	r3, [r3, #24]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	f000 8092 	beq.w	80021d8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80020b4:	4b4c      	ldr	r3, [pc, #304]	; (80021e8 <HAL_RCC_OscConfig+0x4d8>)
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	f003 030c 	and.w	r3, r3, #12
 80020bc:	2b08      	cmp	r3, #8
 80020be:	d05c      	beq.n	800217a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	699b      	ldr	r3, [r3, #24]
 80020c4:	2b02      	cmp	r3, #2
 80020c6:	d141      	bne.n	800214c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020c8:	4b48      	ldr	r3, [pc, #288]	; (80021ec <HAL_RCC_OscConfig+0x4dc>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ce:	f7fe ffbd 	bl	800104c <HAL_GetTick>
 80020d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020d4:	e008      	b.n	80020e8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020d6:	f7fe ffb9 	bl	800104c <HAL_GetTick>
 80020da:	4602      	mov	r2, r0
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	2b02      	cmp	r3, #2
 80020e2:	d901      	bls.n	80020e8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80020e4:	2303      	movs	r3, #3
 80020e6:	e078      	b.n	80021da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020e8:	4b3f      	ldr	r3, [pc, #252]	; (80021e8 <HAL_RCC_OscConfig+0x4d8>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d1f0      	bne.n	80020d6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	69da      	ldr	r2, [r3, #28]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6a1b      	ldr	r3, [r3, #32]
 80020fc:	431a      	orrs	r2, r3
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002102:	019b      	lsls	r3, r3, #6
 8002104:	431a      	orrs	r2, r3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800210a:	085b      	lsrs	r3, r3, #1
 800210c:	3b01      	subs	r3, #1
 800210e:	041b      	lsls	r3, r3, #16
 8002110:	431a      	orrs	r2, r3
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002116:	061b      	lsls	r3, r3, #24
 8002118:	4933      	ldr	r1, [pc, #204]	; (80021e8 <HAL_RCC_OscConfig+0x4d8>)
 800211a:	4313      	orrs	r3, r2
 800211c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800211e:	4b33      	ldr	r3, [pc, #204]	; (80021ec <HAL_RCC_OscConfig+0x4dc>)
 8002120:	2201      	movs	r2, #1
 8002122:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002124:	f7fe ff92 	bl	800104c <HAL_GetTick>
 8002128:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800212a:	e008      	b.n	800213e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800212c:	f7fe ff8e 	bl	800104c <HAL_GetTick>
 8002130:	4602      	mov	r2, r0
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	2b02      	cmp	r3, #2
 8002138:	d901      	bls.n	800213e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800213a:	2303      	movs	r3, #3
 800213c:	e04d      	b.n	80021da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800213e:	4b2a      	ldr	r3, [pc, #168]	; (80021e8 <HAL_RCC_OscConfig+0x4d8>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d0f0      	beq.n	800212c <HAL_RCC_OscConfig+0x41c>
 800214a:	e045      	b.n	80021d8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800214c:	4b27      	ldr	r3, [pc, #156]	; (80021ec <HAL_RCC_OscConfig+0x4dc>)
 800214e:	2200      	movs	r2, #0
 8002150:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002152:	f7fe ff7b 	bl	800104c <HAL_GetTick>
 8002156:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002158:	e008      	b.n	800216c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800215a:	f7fe ff77 	bl	800104c <HAL_GetTick>
 800215e:	4602      	mov	r2, r0
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	1ad3      	subs	r3, r2, r3
 8002164:	2b02      	cmp	r3, #2
 8002166:	d901      	bls.n	800216c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002168:	2303      	movs	r3, #3
 800216a:	e036      	b.n	80021da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800216c:	4b1e      	ldr	r3, [pc, #120]	; (80021e8 <HAL_RCC_OscConfig+0x4d8>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002174:	2b00      	cmp	r3, #0
 8002176:	d1f0      	bne.n	800215a <HAL_RCC_OscConfig+0x44a>
 8002178:	e02e      	b.n	80021d8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	699b      	ldr	r3, [r3, #24]
 800217e:	2b01      	cmp	r3, #1
 8002180:	d101      	bne.n	8002186 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e029      	b.n	80021da <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002186:	4b18      	ldr	r3, [pc, #96]	; (80021e8 <HAL_RCC_OscConfig+0x4d8>)
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	69db      	ldr	r3, [r3, #28]
 8002196:	429a      	cmp	r2, r3
 8002198:	d11c      	bne.n	80021d4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d115      	bne.n	80021d4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80021a8:	68fa      	ldr	r2, [r7, #12]
 80021aa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80021ae:	4013      	ands	r3, r2
 80021b0:	687a      	ldr	r2, [r7, #4]
 80021b2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d10d      	bne.n	80021d4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80021c2:	429a      	cmp	r2, r3
 80021c4:	d106      	bne.n	80021d4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d001      	beq.n	80021d8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	e000      	b.n	80021da <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80021d8:	2300      	movs	r3, #0
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3718      	adds	r7, #24
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	40007000 	.word	0x40007000
 80021e8:	40023800 	.word	0x40023800
 80021ec:	42470060 	.word	0x42470060

080021f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b084      	sub	sp, #16
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d101      	bne.n	8002204 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	e0cc      	b.n	800239e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002204:	4b68      	ldr	r3, [pc, #416]	; (80023a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 030f 	and.w	r3, r3, #15
 800220c:	683a      	ldr	r2, [r7, #0]
 800220e:	429a      	cmp	r2, r3
 8002210:	d90c      	bls.n	800222c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002212:	4b65      	ldr	r3, [pc, #404]	; (80023a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002214:	683a      	ldr	r2, [r7, #0]
 8002216:	b2d2      	uxtb	r2, r2
 8002218:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800221a:	4b63      	ldr	r3, [pc, #396]	; (80023a8 <HAL_RCC_ClockConfig+0x1b8>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 030f 	and.w	r3, r3, #15
 8002222:	683a      	ldr	r2, [r7, #0]
 8002224:	429a      	cmp	r2, r3
 8002226:	d001      	beq.n	800222c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e0b8      	b.n	800239e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0302 	and.w	r3, r3, #2
 8002234:	2b00      	cmp	r3, #0
 8002236:	d020      	beq.n	800227a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0304 	and.w	r3, r3, #4
 8002240:	2b00      	cmp	r3, #0
 8002242:	d005      	beq.n	8002250 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002244:	4b59      	ldr	r3, [pc, #356]	; (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	4a58      	ldr	r2, [pc, #352]	; (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 800224a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800224e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 0308 	and.w	r3, r3, #8
 8002258:	2b00      	cmp	r3, #0
 800225a:	d005      	beq.n	8002268 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800225c:	4b53      	ldr	r3, [pc, #332]	; (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	4a52      	ldr	r2, [pc, #328]	; (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 8002262:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002266:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002268:	4b50      	ldr	r3, [pc, #320]	; (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	494d      	ldr	r1, [pc, #308]	; (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 8002276:	4313      	orrs	r3, r2
 8002278:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0301 	and.w	r3, r3, #1
 8002282:	2b00      	cmp	r3, #0
 8002284:	d044      	beq.n	8002310 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	2b01      	cmp	r3, #1
 800228c:	d107      	bne.n	800229e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800228e:	4b47      	ldr	r3, [pc, #284]	; (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d119      	bne.n	80022ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e07f      	b.n	800239e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d003      	beq.n	80022ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022aa:	2b03      	cmp	r3, #3
 80022ac:	d107      	bne.n	80022be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022ae:	4b3f      	ldr	r3, [pc, #252]	; (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d109      	bne.n	80022ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e06f      	b.n	800239e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022be:	4b3b      	ldr	r3, [pc, #236]	; (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0302 	and.w	r3, r3, #2
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d101      	bne.n	80022ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e067      	b.n	800239e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022ce:	4b37      	ldr	r3, [pc, #220]	; (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	f023 0203 	bic.w	r2, r3, #3
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	4934      	ldr	r1, [pc, #208]	; (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 80022dc:	4313      	orrs	r3, r2
 80022de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022e0:	f7fe feb4 	bl	800104c <HAL_GetTick>
 80022e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022e6:	e00a      	b.n	80022fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022e8:	f7fe feb0 	bl	800104c <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d901      	bls.n	80022fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	e04f      	b.n	800239e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022fe:	4b2b      	ldr	r3, [pc, #172]	; (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	f003 020c 	and.w	r2, r3, #12
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	429a      	cmp	r2, r3
 800230e:	d1eb      	bne.n	80022e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002310:	4b25      	ldr	r3, [pc, #148]	; (80023a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 030f 	and.w	r3, r3, #15
 8002318:	683a      	ldr	r2, [r7, #0]
 800231a:	429a      	cmp	r2, r3
 800231c:	d20c      	bcs.n	8002338 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800231e:	4b22      	ldr	r3, [pc, #136]	; (80023a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002320:	683a      	ldr	r2, [r7, #0]
 8002322:	b2d2      	uxtb	r2, r2
 8002324:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002326:	4b20      	ldr	r3, [pc, #128]	; (80023a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 030f 	and.w	r3, r3, #15
 800232e:	683a      	ldr	r2, [r7, #0]
 8002330:	429a      	cmp	r2, r3
 8002332:	d001      	beq.n	8002338 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	e032      	b.n	800239e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0304 	and.w	r3, r3, #4
 8002340:	2b00      	cmp	r3, #0
 8002342:	d008      	beq.n	8002356 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002344:	4b19      	ldr	r3, [pc, #100]	; (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	4916      	ldr	r1, [pc, #88]	; (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 8002352:	4313      	orrs	r3, r2
 8002354:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0308 	and.w	r3, r3, #8
 800235e:	2b00      	cmp	r3, #0
 8002360:	d009      	beq.n	8002376 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002362:	4b12      	ldr	r3, [pc, #72]	; (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	691b      	ldr	r3, [r3, #16]
 800236e:	00db      	lsls	r3, r3, #3
 8002370:	490e      	ldr	r1, [pc, #56]	; (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 8002372:	4313      	orrs	r3, r2
 8002374:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002376:	f000 f821 	bl	80023bc <HAL_RCC_GetSysClockFreq>
 800237a:	4601      	mov	r1, r0
 800237c:	4b0b      	ldr	r3, [pc, #44]	; (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	091b      	lsrs	r3, r3, #4
 8002382:	f003 030f 	and.w	r3, r3, #15
 8002386:	4a0a      	ldr	r2, [pc, #40]	; (80023b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002388:	5cd3      	ldrb	r3, [r2, r3]
 800238a:	fa21 f303 	lsr.w	r3, r1, r3
 800238e:	4a09      	ldr	r2, [pc, #36]	; (80023b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002390:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002392:	4b09      	ldr	r3, [pc, #36]	; (80023b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4618      	mov	r0, r3
 8002398:	f7fe fe14 	bl	8000fc4 <HAL_InitTick>

  return HAL_OK;
 800239c:	2300      	movs	r3, #0
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3710      	adds	r7, #16
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	40023c00 	.word	0x40023c00
 80023ac:	40023800 	.word	0x40023800
 80023b0:	08004524 	.word	0x08004524
 80023b4:	20000000 	.word	0x20000000
 80023b8:	20000004 	.word	0x20000004

080023bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023be:	b085      	sub	sp, #20
 80023c0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80023c2:	2300      	movs	r3, #0
 80023c4:	607b      	str	r3, [r7, #4]
 80023c6:	2300      	movs	r3, #0
 80023c8:	60fb      	str	r3, [r7, #12]
 80023ca:	2300      	movs	r3, #0
 80023cc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80023ce:	2300      	movs	r3, #0
 80023d0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023d2:	4b63      	ldr	r3, [pc, #396]	; (8002560 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	f003 030c 	and.w	r3, r3, #12
 80023da:	2b04      	cmp	r3, #4
 80023dc:	d007      	beq.n	80023ee <HAL_RCC_GetSysClockFreq+0x32>
 80023de:	2b08      	cmp	r3, #8
 80023e0:	d008      	beq.n	80023f4 <HAL_RCC_GetSysClockFreq+0x38>
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	f040 80b4 	bne.w	8002550 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80023e8:	4b5e      	ldr	r3, [pc, #376]	; (8002564 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80023ea:	60bb      	str	r3, [r7, #8]
       break;
 80023ec:	e0b3      	b.n	8002556 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80023ee:	4b5e      	ldr	r3, [pc, #376]	; (8002568 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80023f0:	60bb      	str	r3, [r7, #8]
      break;
 80023f2:	e0b0      	b.n	8002556 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023f4:	4b5a      	ldr	r3, [pc, #360]	; (8002560 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80023fc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80023fe:	4b58      	ldr	r3, [pc, #352]	; (8002560 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d04a      	beq.n	80024a0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800240a:	4b55      	ldr	r3, [pc, #340]	; (8002560 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	099b      	lsrs	r3, r3, #6
 8002410:	f04f 0400 	mov.w	r4, #0
 8002414:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002418:	f04f 0200 	mov.w	r2, #0
 800241c:	ea03 0501 	and.w	r5, r3, r1
 8002420:	ea04 0602 	and.w	r6, r4, r2
 8002424:	4629      	mov	r1, r5
 8002426:	4632      	mov	r2, r6
 8002428:	f04f 0300 	mov.w	r3, #0
 800242c:	f04f 0400 	mov.w	r4, #0
 8002430:	0154      	lsls	r4, r2, #5
 8002432:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002436:	014b      	lsls	r3, r1, #5
 8002438:	4619      	mov	r1, r3
 800243a:	4622      	mov	r2, r4
 800243c:	1b49      	subs	r1, r1, r5
 800243e:	eb62 0206 	sbc.w	r2, r2, r6
 8002442:	f04f 0300 	mov.w	r3, #0
 8002446:	f04f 0400 	mov.w	r4, #0
 800244a:	0194      	lsls	r4, r2, #6
 800244c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002450:	018b      	lsls	r3, r1, #6
 8002452:	1a5b      	subs	r3, r3, r1
 8002454:	eb64 0402 	sbc.w	r4, r4, r2
 8002458:	f04f 0100 	mov.w	r1, #0
 800245c:	f04f 0200 	mov.w	r2, #0
 8002460:	00e2      	lsls	r2, r4, #3
 8002462:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002466:	00d9      	lsls	r1, r3, #3
 8002468:	460b      	mov	r3, r1
 800246a:	4614      	mov	r4, r2
 800246c:	195b      	adds	r3, r3, r5
 800246e:	eb44 0406 	adc.w	r4, r4, r6
 8002472:	f04f 0100 	mov.w	r1, #0
 8002476:	f04f 0200 	mov.w	r2, #0
 800247a:	0262      	lsls	r2, r4, #9
 800247c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002480:	0259      	lsls	r1, r3, #9
 8002482:	460b      	mov	r3, r1
 8002484:	4614      	mov	r4, r2
 8002486:	4618      	mov	r0, r3
 8002488:	4621      	mov	r1, r4
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	f04f 0400 	mov.w	r4, #0
 8002490:	461a      	mov	r2, r3
 8002492:	4623      	mov	r3, r4
 8002494:	f7fd fea0 	bl	80001d8 <__aeabi_uldivmod>
 8002498:	4603      	mov	r3, r0
 800249a:	460c      	mov	r4, r1
 800249c:	60fb      	str	r3, [r7, #12]
 800249e:	e049      	b.n	8002534 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024a0:	4b2f      	ldr	r3, [pc, #188]	; (8002560 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	099b      	lsrs	r3, r3, #6
 80024a6:	f04f 0400 	mov.w	r4, #0
 80024aa:	f240 11ff 	movw	r1, #511	; 0x1ff
 80024ae:	f04f 0200 	mov.w	r2, #0
 80024b2:	ea03 0501 	and.w	r5, r3, r1
 80024b6:	ea04 0602 	and.w	r6, r4, r2
 80024ba:	4629      	mov	r1, r5
 80024bc:	4632      	mov	r2, r6
 80024be:	f04f 0300 	mov.w	r3, #0
 80024c2:	f04f 0400 	mov.w	r4, #0
 80024c6:	0154      	lsls	r4, r2, #5
 80024c8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80024cc:	014b      	lsls	r3, r1, #5
 80024ce:	4619      	mov	r1, r3
 80024d0:	4622      	mov	r2, r4
 80024d2:	1b49      	subs	r1, r1, r5
 80024d4:	eb62 0206 	sbc.w	r2, r2, r6
 80024d8:	f04f 0300 	mov.w	r3, #0
 80024dc:	f04f 0400 	mov.w	r4, #0
 80024e0:	0194      	lsls	r4, r2, #6
 80024e2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80024e6:	018b      	lsls	r3, r1, #6
 80024e8:	1a5b      	subs	r3, r3, r1
 80024ea:	eb64 0402 	sbc.w	r4, r4, r2
 80024ee:	f04f 0100 	mov.w	r1, #0
 80024f2:	f04f 0200 	mov.w	r2, #0
 80024f6:	00e2      	lsls	r2, r4, #3
 80024f8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80024fc:	00d9      	lsls	r1, r3, #3
 80024fe:	460b      	mov	r3, r1
 8002500:	4614      	mov	r4, r2
 8002502:	195b      	adds	r3, r3, r5
 8002504:	eb44 0406 	adc.w	r4, r4, r6
 8002508:	f04f 0100 	mov.w	r1, #0
 800250c:	f04f 0200 	mov.w	r2, #0
 8002510:	02a2      	lsls	r2, r4, #10
 8002512:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002516:	0299      	lsls	r1, r3, #10
 8002518:	460b      	mov	r3, r1
 800251a:	4614      	mov	r4, r2
 800251c:	4618      	mov	r0, r3
 800251e:	4621      	mov	r1, r4
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	f04f 0400 	mov.w	r4, #0
 8002526:	461a      	mov	r2, r3
 8002528:	4623      	mov	r3, r4
 800252a:	f7fd fe55 	bl	80001d8 <__aeabi_uldivmod>
 800252e:	4603      	mov	r3, r0
 8002530:	460c      	mov	r4, r1
 8002532:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002534:	4b0a      	ldr	r3, [pc, #40]	; (8002560 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	0c1b      	lsrs	r3, r3, #16
 800253a:	f003 0303 	and.w	r3, r3, #3
 800253e:	3301      	adds	r3, #1
 8002540:	005b      	lsls	r3, r3, #1
 8002542:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002544:	68fa      	ldr	r2, [r7, #12]
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	fbb2 f3f3 	udiv	r3, r2, r3
 800254c:	60bb      	str	r3, [r7, #8]
      break;
 800254e:	e002      	b.n	8002556 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002550:	4b04      	ldr	r3, [pc, #16]	; (8002564 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002552:	60bb      	str	r3, [r7, #8]
      break;
 8002554:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002556:	68bb      	ldr	r3, [r7, #8]
}
 8002558:	4618      	mov	r0, r3
 800255a:	3714      	adds	r7, #20
 800255c:	46bd      	mov	sp, r7
 800255e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002560:	40023800 	.word	0x40023800
 8002564:	00f42400 	.word	0x00f42400
 8002568:	007a1200 	.word	0x007a1200

0800256c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002570:	4b03      	ldr	r3, [pc, #12]	; (8002580 <HAL_RCC_GetHCLKFreq+0x14>)
 8002572:	681b      	ldr	r3, [r3, #0]
}
 8002574:	4618      	mov	r0, r3
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop
 8002580:	20000000 	.word	0x20000000

08002584 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002588:	f7ff fff0 	bl	800256c <HAL_RCC_GetHCLKFreq>
 800258c:	4601      	mov	r1, r0
 800258e:	4b05      	ldr	r3, [pc, #20]	; (80025a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	0a9b      	lsrs	r3, r3, #10
 8002594:	f003 0307 	and.w	r3, r3, #7
 8002598:	4a03      	ldr	r2, [pc, #12]	; (80025a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800259a:	5cd3      	ldrb	r3, [r2, r3]
 800259c:	fa21 f303 	lsr.w	r3, r1, r3
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	40023800 	.word	0x40023800
 80025a8:	08004534 	.word	0x08004534

080025ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80025b0:	f7ff ffdc 	bl	800256c <HAL_RCC_GetHCLKFreq>
 80025b4:	4601      	mov	r1, r0
 80025b6:	4b05      	ldr	r3, [pc, #20]	; (80025cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	0b5b      	lsrs	r3, r3, #13
 80025bc:	f003 0307 	and.w	r3, r3, #7
 80025c0:	4a03      	ldr	r2, [pc, #12]	; (80025d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025c2:	5cd3      	ldrb	r3, [r2, r3]
 80025c4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	40023800 	.word	0x40023800
 80025d0:	08004534 	.word	0x08004534

080025d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b082      	sub	sp, #8
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d101      	bne.n	80025e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e01d      	b.n	8002622 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d106      	bne.n	8002600 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2200      	movs	r2, #0
 80025f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f7fe fad8 	bl	8000bb0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2202      	movs	r2, #2
 8002604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	3304      	adds	r3, #4
 8002610:	4619      	mov	r1, r3
 8002612:	4610      	mov	r0, r2
 8002614:	f000 fbd2 	bl	8002dbc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2201      	movs	r2, #1
 800261c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002620:	2300      	movs	r3, #0
}
 8002622:	4618      	mov	r0, r3
 8002624:	3708      	adds	r7, #8
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}

0800262a <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800262a:	b480      	push	{r7}
 800262c:	b085      	sub	sp, #20
 800262e:	af00      	add	r7, sp, #0
 8002630:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2202      	movs	r2, #2
 8002636:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	f003 0307 	and.w	r3, r3, #7
 8002644:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2b06      	cmp	r3, #6
 800264a:	d007      	beq.n	800265c <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f042 0201 	orr.w	r2, r2, #1
 800265a:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2201      	movs	r2, #1
 8002660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002664:	2300      	movs	r3, #0
}
 8002666:	4618      	mov	r0, r3
 8002668:	3714      	adds	r7, #20
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr

08002672 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002672:	b580      	push	{r7, lr}
 8002674:	b082      	sub	sp, #8
 8002676:	af00      	add	r7, sp, #0
 8002678:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d101      	bne.n	8002684 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e01d      	b.n	80026c0 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800268a:	b2db      	uxtb	r3, r3
 800268c:	2b00      	cmp	r3, #0
 800268e:	d106      	bne.n	800269e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2200      	movs	r2, #0
 8002694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	f7fe fadb 	bl	8000c54 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2202      	movs	r2, #2
 80026a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	3304      	adds	r3, #4
 80026ae:	4619      	mov	r1, r3
 80026b0:	4610      	mov	r0, r2
 80026b2:	f000 fb83 	bl	8002dbc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2201      	movs	r2, #1
 80026ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80026be:	2300      	movs	r3, #0
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3708      	adds	r7, #8
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}

080026c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b084      	sub	sp, #16
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	2201      	movs	r2, #1
 80026d8:	6839      	ldr	r1, [r7, #0]
 80026da:	4618      	mov	r0, r3
 80026dc:	f000 fe58 	bl	8003390 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a15      	ldr	r2, [pc, #84]	; (800273c <HAL_TIM_PWM_Start+0x74>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d004      	beq.n	80026f4 <HAL_TIM_PWM_Start+0x2c>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a14      	ldr	r2, [pc, #80]	; (8002740 <HAL_TIM_PWM_Start+0x78>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d101      	bne.n	80026f8 <HAL_TIM_PWM_Start+0x30>
 80026f4:	2301      	movs	r3, #1
 80026f6:	e000      	b.n	80026fa <HAL_TIM_PWM_Start+0x32>
 80026f8:	2300      	movs	r3, #0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d007      	beq.n	800270e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800270c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	f003 0307 	and.w	r3, r3, #7
 8002718:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2b06      	cmp	r3, #6
 800271e:	d007      	beq.n	8002730 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f042 0201 	orr.w	r2, r2, #1
 800272e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002730:	2300      	movs	r3, #0
}
 8002732:	4618      	mov	r0, r3
 8002734:	3710      	adds	r7, #16
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	40010000 	.word	0x40010000
 8002740:	40010400 	.word	0x40010400

08002744 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b084      	sub	sp, #16
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	2b0c      	cmp	r3, #12
 8002752:	d841      	bhi.n	80027d8 <HAL_TIM_PWM_Start_IT+0x94>
 8002754:	a201      	add	r2, pc, #4	; (adr r2, 800275c <HAL_TIM_PWM_Start_IT+0x18>)
 8002756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800275a:	bf00      	nop
 800275c:	08002791 	.word	0x08002791
 8002760:	080027d9 	.word	0x080027d9
 8002764:	080027d9 	.word	0x080027d9
 8002768:	080027d9 	.word	0x080027d9
 800276c:	080027a3 	.word	0x080027a3
 8002770:	080027d9 	.word	0x080027d9
 8002774:	080027d9 	.word	0x080027d9
 8002778:	080027d9 	.word	0x080027d9
 800277c:	080027b5 	.word	0x080027b5
 8002780:	080027d9 	.word	0x080027d9
 8002784:	080027d9 	.word	0x080027d9
 8002788:	080027d9 	.word	0x080027d9
 800278c:	080027c7 	.word	0x080027c7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	68da      	ldr	r2, [r3, #12]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f042 0202 	orr.w	r2, r2, #2
 800279e:	60da      	str	r2, [r3, #12]
      break;
 80027a0:	e01b      	b.n	80027da <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	68da      	ldr	r2, [r3, #12]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f042 0204 	orr.w	r2, r2, #4
 80027b0:	60da      	str	r2, [r3, #12]
      break;
 80027b2:	e012      	b.n	80027da <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	68da      	ldr	r2, [r3, #12]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f042 0208 	orr.w	r2, r2, #8
 80027c2:	60da      	str	r2, [r3, #12]
      break;
 80027c4:	e009      	b.n	80027da <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	68da      	ldr	r2, [r3, #12]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f042 0210 	orr.w	r2, r2, #16
 80027d4:	60da      	str	r2, [r3, #12]
      break;
 80027d6:	e000      	b.n	80027da <HAL_TIM_PWM_Start_IT+0x96>
    }

    default:
      break;
 80027d8:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	2201      	movs	r2, #1
 80027e0:	6839      	ldr	r1, [r7, #0]
 80027e2:	4618      	mov	r0, r3
 80027e4:	f000 fdd4 	bl	8003390 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a15      	ldr	r2, [pc, #84]	; (8002844 <HAL_TIM_PWM_Start_IT+0x100>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d004      	beq.n	80027fc <HAL_TIM_PWM_Start_IT+0xb8>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a14      	ldr	r2, [pc, #80]	; (8002848 <HAL_TIM_PWM_Start_IT+0x104>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d101      	bne.n	8002800 <HAL_TIM_PWM_Start_IT+0xbc>
 80027fc:	2301      	movs	r3, #1
 80027fe:	e000      	b.n	8002802 <HAL_TIM_PWM_Start_IT+0xbe>
 8002800:	2300      	movs	r3, #0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d007      	beq.n	8002816 <HAL_TIM_PWM_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002814:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	f003 0307 	and.w	r3, r3, #7
 8002820:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2b06      	cmp	r3, #6
 8002826:	d007      	beq.n	8002838 <HAL_TIM_PWM_Start_IT+0xf4>
  {
    __HAL_TIM_ENABLE(htim);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f042 0201 	orr.w	r2, r2, #1
 8002836:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002838:	2300      	movs	r3, #0
}
 800283a:	4618      	mov	r0, r3
 800283c:	3710      	adds	r7, #16
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	40010000 	.word	0x40010000
 8002848:	40010400 	.word	0x40010400

0800284c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	691b      	ldr	r3, [r3, #16]
 800285a:	f003 0302 	and.w	r3, r3, #2
 800285e:	2b02      	cmp	r3, #2
 8002860:	d122      	bne.n	80028a8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	f003 0302 	and.w	r3, r3, #2
 800286c:	2b02      	cmp	r3, #2
 800286e:	d11b      	bne.n	80028a8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f06f 0202 	mvn.w	r2, #2
 8002878:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2201      	movs	r2, #1
 800287e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	699b      	ldr	r3, [r3, #24]
 8002886:	f003 0303 	and.w	r3, r3, #3
 800288a:	2b00      	cmp	r3, #0
 800288c:	d003      	beq.n	8002896 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f000 fa75 	bl	8002d7e <HAL_TIM_IC_CaptureCallback>
 8002894:	e005      	b.n	80028a2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f000 fa67 	bl	8002d6a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800289c:	6878      	ldr	r0, [r7, #4]
 800289e:	f000 fa78 	bl	8002d92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2200      	movs	r2, #0
 80028a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	691b      	ldr	r3, [r3, #16]
 80028ae:	f003 0304 	and.w	r3, r3, #4
 80028b2:	2b04      	cmp	r3, #4
 80028b4:	d122      	bne.n	80028fc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	68db      	ldr	r3, [r3, #12]
 80028bc:	f003 0304 	and.w	r3, r3, #4
 80028c0:	2b04      	cmp	r3, #4
 80028c2:	d11b      	bne.n	80028fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f06f 0204 	mvn.w	r2, #4
 80028cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2202      	movs	r2, #2
 80028d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	699b      	ldr	r3, [r3, #24]
 80028da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d003      	beq.n	80028ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f000 fa4b 	bl	8002d7e <HAL_TIM_IC_CaptureCallback>
 80028e8:	e005      	b.n	80028f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f000 fa3d 	bl	8002d6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	f000 fa4e 	bl	8002d92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2200      	movs	r2, #0
 80028fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	691b      	ldr	r3, [r3, #16]
 8002902:	f003 0308 	and.w	r3, r3, #8
 8002906:	2b08      	cmp	r3, #8
 8002908:	d122      	bne.n	8002950 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	f003 0308 	and.w	r3, r3, #8
 8002914:	2b08      	cmp	r3, #8
 8002916:	d11b      	bne.n	8002950 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f06f 0208 	mvn.w	r2, #8
 8002920:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2204      	movs	r2, #4
 8002926:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	69db      	ldr	r3, [r3, #28]
 800292e:	f003 0303 	and.w	r3, r3, #3
 8002932:	2b00      	cmp	r3, #0
 8002934:	d003      	beq.n	800293e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f000 fa21 	bl	8002d7e <HAL_TIM_IC_CaptureCallback>
 800293c:	e005      	b.n	800294a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f000 fa13 	bl	8002d6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002944:	6878      	ldr	r0, [r7, #4]
 8002946:	f000 fa24 	bl	8002d92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2200      	movs	r2, #0
 800294e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	691b      	ldr	r3, [r3, #16]
 8002956:	f003 0310 	and.w	r3, r3, #16
 800295a:	2b10      	cmp	r3, #16
 800295c:	d122      	bne.n	80029a4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	f003 0310 	and.w	r3, r3, #16
 8002968:	2b10      	cmp	r3, #16
 800296a:	d11b      	bne.n	80029a4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f06f 0210 	mvn.w	r2, #16
 8002974:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2208      	movs	r2, #8
 800297a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	69db      	ldr	r3, [r3, #28]
 8002982:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002986:	2b00      	cmp	r3, #0
 8002988:	d003      	beq.n	8002992 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f000 f9f7 	bl	8002d7e <HAL_TIM_IC_CaptureCallback>
 8002990:	e005      	b.n	800299e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f000 f9e9 	bl	8002d6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	f000 f9fa 	bl	8002d92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2200      	movs	r2, #0
 80029a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	691b      	ldr	r3, [r3, #16]
 80029aa:	f003 0301 	and.w	r3, r3, #1
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d10e      	bne.n	80029d0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	f003 0301 	and.w	r3, r3, #1
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d107      	bne.n	80029d0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f06f 0201 	mvn.w	r2, #1
 80029c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f000 f9c3 	bl	8002d56 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	691b      	ldr	r3, [r3, #16]
 80029d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029da:	2b80      	cmp	r3, #128	; 0x80
 80029dc:	d10e      	bne.n	80029fc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029e8:	2b80      	cmp	r3, #128	; 0x80
 80029ea:	d107      	bne.n	80029fc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80029f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f000 fd76 	bl	80034e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	691b      	ldr	r3, [r3, #16]
 8002a02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a06:	2b40      	cmp	r3, #64	; 0x40
 8002a08:	d10e      	bne.n	8002a28 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a14:	2b40      	cmp	r3, #64	; 0x40
 8002a16:	d107      	bne.n	8002a28 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002a20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f000 f9bf 	bl	8002da6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	691b      	ldr	r3, [r3, #16]
 8002a2e:	f003 0320 	and.w	r3, r3, #32
 8002a32:	2b20      	cmp	r3, #32
 8002a34:	d10e      	bne.n	8002a54 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	f003 0320 	and.w	r3, r3, #32
 8002a40:	2b20      	cmp	r3, #32
 8002a42:	d107      	bne.n	8002a54 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f06f 0220 	mvn.w	r2, #32
 8002a4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f000 fd40 	bl	80034d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a54:	bf00      	nop
 8002a56:	3708      	adds	r7, #8
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}

08002a5c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b084      	sub	sp, #16
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	60f8      	str	r0, [r7, #12]
 8002a64:	60b9      	str	r1, [r7, #8]
 8002a66:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	d101      	bne.n	8002a76 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002a72:	2302      	movs	r3, #2
 8002a74:	e0b4      	b.n	8002be0 <HAL_TIM_PWM_ConfigChannel+0x184>
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2201      	movs	r2, #1
 8002a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2202      	movs	r2, #2
 8002a82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2b0c      	cmp	r3, #12
 8002a8a:	f200 809f 	bhi.w	8002bcc <HAL_TIM_PWM_ConfigChannel+0x170>
 8002a8e:	a201      	add	r2, pc, #4	; (adr r2, 8002a94 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a94:	08002ac9 	.word	0x08002ac9
 8002a98:	08002bcd 	.word	0x08002bcd
 8002a9c:	08002bcd 	.word	0x08002bcd
 8002aa0:	08002bcd 	.word	0x08002bcd
 8002aa4:	08002b09 	.word	0x08002b09
 8002aa8:	08002bcd 	.word	0x08002bcd
 8002aac:	08002bcd 	.word	0x08002bcd
 8002ab0:	08002bcd 	.word	0x08002bcd
 8002ab4:	08002b4b 	.word	0x08002b4b
 8002ab8:	08002bcd 	.word	0x08002bcd
 8002abc:	08002bcd 	.word	0x08002bcd
 8002ac0:	08002bcd 	.word	0x08002bcd
 8002ac4:	08002b8b 	.word	0x08002b8b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	68b9      	ldr	r1, [r7, #8]
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f000 fa14 	bl	8002efc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	699a      	ldr	r2, [r3, #24]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f042 0208 	orr.w	r2, r2, #8
 8002ae2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	699a      	ldr	r2, [r3, #24]
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f022 0204 	bic.w	r2, r2, #4
 8002af2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	6999      	ldr	r1, [r3, #24]
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	691a      	ldr	r2, [r3, #16]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	430a      	orrs	r2, r1
 8002b04:	619a      	str	r2, [r3, #24]
      break;
 8002b06:	e062      	b.n	8002bce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	68b9      	ldr	r1, [r7, #8]
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f000 fa64 	bl	8002fdc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	699a      	ldr	r2, [r3, #24]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	699a      	ldr	r2, [r3, #24]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	6999      	ldr	r1, [r3, #24]
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	691b      	ldr	r3, [r3, #16]
 8002b3e:	021a      	lsls	r2, r3, #8
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	430a      	orrs	r2, r1
 8002b46:	619a      	str	r2, [r3, #24]
      break;
 8002b48:	e041      	b.n	8002bce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	68b9      	ldr	r1, [r7, #8]
 8002b50:	4618      	mov	r0, r3
 8002b52:	f000 fab9 	bl	80030c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	69da      	ldr	r2, [r3, #28]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f042 0208 	orr.w	r2, r2, #8
 8002b64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	69da      	ldr	r2, [r3, #28]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f022 0204 	bic.w	r2, r2, #4
 8002b74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	69d9      	ldr	r1, [r3, #28]
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	691a      	ldr	r2, [r3, #16]
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	430a      	orrs	r2, r1
 8002b86:	61da      	str	r2, [r3, #28]
      break;
 8002b88:	e021      	b.n	8002bce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	68b9      	ldr	r1, [r7, #8]
 8002b90:	4618      	mov	r0, r3
 8002b92:	f000 fb0d 	bl	80031b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	69da      	ldr	r2, [r3, #28]
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ba4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	69da      	ldr	r2, [r3, #28]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bb4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	69d9      	ldr	r1, [r3, #28]
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	691b      	ldr	r3, [r3, #16]
 8002bc0:	021a      	lsls	r2, r3, #8
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	430a      	orrs	r2, r1
 8002bc8:	61da      	str	r2, [r3, #28]
      break;
 8002bca:	e000      	b.n	8002bce <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8002bcc:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002bde:	2300      	movs	r3, #0
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	3710      	adds	r7, #16
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}

08002be8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d101      	bne.n	8002c00 <HAL_TIM_ConfigClockSource+0x18>
 8002bfc:	2302      	movs	r3, #2
 8002bfe:	e0a6      	b.n	8002d4e <HAL_TIM_ConfigClockSource+0x166>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2201      	movs	r2, #1
 8002c04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2202      	movs	r2, #2
 8002c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002c1e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c26:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	68fa      	ldr	r2, [r7, #12]
 8002c2e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	2b40      	cmp	r3, #64	; 0x40
 8002c36:	d067      	beq.n	8002d08 <HAL_TIM_ConfigClockSource+0x120>
 8002c38:	2b40      	cmp	r3, #64	; 0x40
 8002c3a:	d80b      	bhi.n	8002c54 <HAL_TIM_ConfigClockSource+0x6c>
 8002c3c:	2b10      	cmp	r3, #16
 8002c3e:	d073      	beq.n	8002d28 <HAL_TIM_ConfigClockSource+0x140>
 8002c40:	2b10      	cmp	r3, #16
 8002c42:	d802      	bhi.n	8002c4a <HAL_TIM_ConfigClockSource+0x62>
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d06f      	beq.n	8002d28 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002c48:	e078      	b.n	8002d3c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002c4a:	2b20      	cmp	r3, #32
 8002c4c:	d06c      	beq.n	8002d28 <HAL_TIM_ConfigClockSource+0x140>
 8002c4e:	2b30      	cmp	r3, #48	; 0x30
 8002c50:	d06a      	beq.n	8002d28 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002c52:	e073      	b.n	8002d3c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002c54:	2b70      	cmp	r3, #112	; 0x70
 8002c56:	d00d      	beq.n	8002c74 <HAL_TIM_ConfigClockSource+0x8c>
 8002c58:	2b70      	cmp	r3, #112	; 0x70
 8002c5a:	d804      	bhi.n	8002c66 <HAL_TIM_ConfigClockSource+0x7e>
 8002c5c:	2b50      	cmp	r3, #80	; 0x50
 8002c5e:	d033      	beq.n	8002cc8 <HAL_TIM_ConfigClockSource+0xe0>
 8002c60:	2b60      	cmp	r3, #96	; 0x60
 8002c62:	d041      	beq.n	8002ce8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002c64:	e06a      	b.n	8002d3c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002c66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c6a:	d066      	beq.n	8002d3a <HAL_TIM_ConfigClockSource+0x152>
 8002c6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c70:	d017      	beq.n	8002ca2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002c72:	e063      	b.n	8002d3c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6818      	ldr	r0, [r3, #0]
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	6899      	ldr	r1, [r3, #8]
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	685a      	ldr	r2, [r3, #4]
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	f000 fb64 	bl	8003350 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002c96:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	68fa      	ldr	r2, [r7, #12]
 8002c9e:	609a      	str	r2, [r3, #8]
      break;
 8002ca0:	e04c      	b.n	8002d3c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6818      	ldr	r0, [r3, #0]
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	6899      	ldr	r1, [r3, #8]
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	685a      	ldr	r2, [r3, #4]
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	f000 fb4d 	bl	8003350 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	689a      	ldr	r2, [r3, #8]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002cc4:	609a      	str	r2, [r3, #8]
      break;
 8002cc6:	e039      	b.n	8002d3c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6818      	ldr	r0, [r3, #0]
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	6859      	ldr	r1, [r3, #4]
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	f000 fac1 	bl	800325c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	2150      	movs	r1, #80	; 0x50
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f000 fb1a 	bl	800331a <TIM_ITRx_SetConfig>
      break;
 8002ce6:	e029      	b.n	8002d3c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6818      	ldr	r0, [r3, #0]
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	6859      	ldr	r1, [r3, #4]
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	f000 fae0 	bl	80032ba <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	2160      	movs	r1, #96	; 0x60
 8002d00:	4618      	mov	r0, r3
 8002d02:	f000 fb0a 	bl	800331a <TIM_ITRx_SetConfig>
      break;
 8002d06:	e019      	b.n	8002d3c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6818      	ldr	r0, [r3, #0]
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	6859      	ldr	r1, [r3, #4]
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	461a      	mov	r2, r3
 8002d16:	f000 faa1 	bl	800325c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	2140      	movs	r1, #64	; 0x40
 8002d20:	4618      	mov	r0, r3
 8002d22:	f000 fafa 	bl	800331a <TIM_ITRx_SetConfig>
      break;
 8002d26:	e009      	b.n	8002d3c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4619      	mov	r1, r3
 8002d32:	4610      	mov	r0, r2
 8002d34:	f000 faf1 	bl	800331a <TIM_ITRx_SetConfig>
      break;
 8002d38:	e000      	b.n	8002d3c <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002d3a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2201      	movs	r2, #1
 8002d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2200      	movs	r2, #0
 8002d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d4c:	2300      	movs	r3, #0
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3710      	adds	r7, #16
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}

08002d56 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d56:	b480      	push	{r7}
 8002d58:	b083      	sub	sp, #12
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002d5e:	bf00      	nop
 8002d60:	370c      	adds	r7, #12
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr

08002d6a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d6a:	b480      	push	{r7}
 8002d6c:	b083      	sub	sp, #12
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d72:	bf00      	nop
 8002d74:	370c      	adds	r7, #12
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr

08002d7e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d7e:	b480      	push	{r7}
 8002d80:	b083      	sub	sp, #12
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d86:	bf00      	nop
 8002d88:	370c      	adds	r7, #12
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr

08002d92 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d92:	b480      	push	{r7}
 8002d94:	b083      	sub	sp, #12
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d9a:	bf00      	nop
 8002d9c:	370c      	adds	r7, #12
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr

08002da6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002da6:	b480      	push	{r7}
 8002da8:	b083      	sub	sp, #12
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002dae:	bf00      	nop
 8002db0:	370c      	adds	r7, #12
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr
	...

08002dbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b085      	sub	sp, #20
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
 8002dc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	4a40      	ldr	r2, [pc, #256]	; (8002ed0 <TIM_Base_SetConfig+0x114>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d013      	beq.n	8002dfc <TIM_Base_SetConfig+0x40>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dda:	d00f      	beq.n	8002dfc <TIM_Base_SetConfig+0x40>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	4a3d      	ldr	r2, [pc, #244]	; (8002ed4 <TIM_Base_SetConfig+0x118>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d00b      	beq.n	8002dfc <TIM_Base_SetConfig+0x40>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	4a3c      	ldr	r2, [pc, #240]	; (8002ed8 <TIM_Base_SetConfig+0x11c>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d007      	beq.n	8002dfc <TIM_Base_SetConfig+0x40>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	4a3b      	ldr	r2, [pc, #236]	; (8002edc <TIM_Base_SetConfig+0x120>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d003      	beq.n	8002dfc <TIM_Base_SetConfig+0x40>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	4a3a      	ldr	r2, [pc, #232]	; (8002ee0 <TIM_Base_SetConfig+0x124>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d108      	bne.n	8002e0e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	68fa      	ldr	r2, [r7, #12]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	4a2f      	ldr	r2, [pc, #188]	; (8002ed0 <TIM_Base_SetConfig+0x114>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d02b      	beq.n	8002e6e <TIM_Base_SetConfig+0xb2>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e1c:	d027      	beq.n	8002e6e <TIM_Base_SetConfig+0xb2>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	4a2c      	ldr	r2, [pc, #176]	; (8002ed4 <TIM_Base_SetConfig+0x118>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d023      	beq.n	8002e6e <TIM_Base_SetConfig+0xb2>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4a2b      	ldr	r2, [pc, #172]	; (8002ed8 <TIM_Base_SetConfig+0x11c>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d01f      	beq.n	8002e6e <TIM_Base_SetConfig+0xb2>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4a2a      	ldr	r2, [pc, #168]	; (8002edc <TIM_Base_SetConfig+0x120>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d01b      	beq.n	8002e6e <TIM_Base_SetConfig+0xb2>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	4a29      	ldr	r2, [pc, #164]	; (8002ee0 <TIM_Base_SetConfig+0x124>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d017      	beq.n	8002e6e <TIM_Base_SetConfig+0xb2>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	4a28      	ldr	r2, [pc, #160]	; (8002ee4 <TIM_Base_SetConfig+0x128>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d013      	beq.n	8002e6e <TIM_Base_SetConfig+0xb2>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	4a27      	ldr	r2, [pc, #156]	; (8002ee8 <TIM_Base_SetConfig+0x12c>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d00f      	beq.n	8002e6e <TIM_Base_SetConfig+0xb2>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4a26      	ldr	r2, [pc, #152]	; (8002eec <TIM_Base_SetConfig+0x130>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d00b      	beq.n	8002e6e <TIM_Base_SetConfig+0xb2>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4a25      	ldr	r2, [pc, #148]	; (8002ef0 <TIM_Base_SetConfig+0x134>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d007      	beq.n	8002e6e <TIM_Base_SetConfig+0xb2>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4a24      	ldr	r2, [pc, #144]	; (8002ef4 <TIM_Base_SetConfig+0x138>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d003      	beq.n	8002e6e <TIM_Base_SetConfig+0xb2>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4a23      	ldr	r2, [pc, #140]	; (8002ef8 <TIM_Base_SetConfig+0x13c>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d108      	bne.n	8002e80 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	68db      	ldr	r3, [r3, #12]
 8002e7a:	68fa      	ldr	r2, [r7, #12]
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	695b      	ldr	r3, [r3, #20]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	68fa      	ldr	r2, [r7, #12]
 8002e92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	689a      	ldr	r2, [r3, #8]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	4a0a      	ldr	r2, [pc, #40]	; (8002ed0 <TIM_Base_SetConfig+0x114>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d003      	beq.n	8002eb4 <TIM_Base_SetConfig+0xf8>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	4a0c      	ldr	r2, [pc, #48]	; (8002ee0 <TIM_Base_SetConfig+0x124>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d103      	bne.n	8002ebc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	691a      	ldr	r2, [r3, #16]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	615a      	str	r2, [r3, #20]
}
 8002ec2:	bf00      	nop
 8002ec4:	3714      	adds	r7, #20
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr
 8002ece:	bf00      	nop
 8002ed0:	40010000 	.word	0x40010000
 8002ed4:	40000400 	.word	0x40000400
 8002ed8:	40000800 	.word	0x40000800
 8002edc:	40000c00 	.word	0x40000c00
 8002ee0:	40010400 	.word	0x40010400
 8002ee4:	40014000 	.word	0x40014000
 8002ee8:	40014400 	.word	0x40014400
 8002eec:	40014800 	.word	0x40014800
 8002ef0:	40001800 	.word	0x40001800
 8002ef4:	40001c00 	.word	0x40001c00
 8002ef8:	40002000 	.word	0x40002000

08002efc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b087      	sub	sp, #28
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
 8002f04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6a1b      	ldr	r3, [r3, #32]
 8002f0a:	f023 0201 	bic.w	r2, r3, #1
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6a1b      	ldr	r3, [r3, #32]
 8002f16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	699b      	ldr	r3, [r3, #24]
 8002f22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	f023 0303 	bic.w	r3, r3, #3
 8002f32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	68fa      	ldr	r2, [r7, #12]
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	f023 0302 	bic.w	r3, r3, #2
 8002f44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	697a      	ldr	r2, [r7, #20]
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	4a20      	ldr	r2, [pc, #128]	; (8002fd4 <TIM_OC1_SetConfig+0xd8>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d003      	beq.n	8002f60 <TIM_OC1_SetConfig+0x64>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	4a1f      	ldr	r2, [pc, #124]	; (8002fd8 <TIM_OC1_SetConfig+0xdc>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d10c      	bne.n	8002f7a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	f023 0308 	bic.w	r3, r3, #8
 8002f66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	697a      	ldr	r2, [r7, #20]
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	f023 0304 	bic.w	r3, r3, #4
 8002f78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	4a15      	ldr	r2, [pc, #84]	; (8002fd4 <TIM_OC1_SetConfig+0xd8>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d003      	beq.n	8002f8a <TIM_OC1_SetConfig+0x8e>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	4a14      	ldr	r2, [pc, #80]	; (8002fd8 <TIM_OC1_SetConfig+0xdc>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d111      	bne.n	8002fae <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002f98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	695b      	ldr	r3, [r3, #20]
 8002f9e:	693a      	ldr	r2, [r7, #16]
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	699b      	ldr	r3, [r3, #24]
 8002fa8:	693a      	ldr	r2, [r7, #16]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	693a      	ldr	r2, [r7, #16]
 8002fb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	68fa      	ldr	r2, [r7, #12]
 8002fb8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	685a      	ldr	r2, [r3, #4]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	697a      	ldr	r2, [r7, #20]
 8002fc6:	621a      	str	r2, [r3, #32]
}
 8002fc8:	bf00      	nop
 8002fca:	371c      	adds	r7, #28
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr
 8002fd4:	40010000 	.word	0x40010000
 8002fd8:	40010400 	.word	0x40010400

08002fdc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b087      	sub	sp, #28
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6a1b      	ldr	r3, [r3, #32]
 8002fea:	f023 0210 	bic.w	r2, r3, #16
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6a1b      	ldr	r3, [r3, #32]
 8002ff6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	699b      	ldr	r3, [r3, #24]
 8003002:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800300a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003012:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	021b      	lsls	r3, r3, #8
 800301a:	68fa      	ldr	r2, [r7, #12]
 800301c:	4313      	orrs	r3, r2
 800301e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	f023 0320 	bic.w	r3, r3, #32
 8003026:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	011b      	lsls	r3, r3, #4
 800302e:	697a      	ldr	r2, [r7, #20]
 8003030:	4313      	orrs	r3, r2
 8003032:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	4a22      	ldr	r2, [pc, #136]	; (80030c0 <TIM_OC2_SetConfig+0xe4>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d003      	beq.n	8003044 <TIM_OC2_SetConfig+0x68>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	4a21      	ldr	r2, [pc, #132]	; (80030c4 <TIM_OC2_SetConfig+0xe8>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d10d      	bne.n	8003060 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800304a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	011b      	lsls	r3, r3, #4
 8003052:	697a      	ldr	r2, [r7, #20]
 8003054:	4313      	orrs	r3, r2
 8003056:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800305e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	4a17      	ldr	r2, [pc, #92]	; (80030c0 <TIM_OC2_SetConfig+0xe4>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d003      	beq.n	8003070 <TIM_OC2_SetConfig+0x94>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	4a16      	ldr	r2, [pc, #88]	; (80030c4 <TIM_OC2_SetConfig+0xe8>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d113      	bne.n	8003098 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003076:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800307e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	695b      	ldr	r3, [r3, #20]
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	693a      	ldr	r2, [r7, #16]
 8003088:	4313      	orrs	r3, r2
 800308a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	699b      	ldr	r3, [r3, #24]
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	693a      	ldr	r2, [r7, #16]
 8003094:	4313      	orrs	r3, r2
 8003096:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	693a      	ldr	r2, [r7, #16]
 800309c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	68fa      	ldr	r2, [r7, #12]
 80030a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	685a      	ldr	r2, [r3, #4]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	697a      	ldr	r2, [r7, #20]
 80030b0:	621a      	str	r2, [r3, #32]
}
 80030b2:	bf00      	nop
 80030b4:	371c      	adds	r7, #28
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr
 80030be:	bf00      	nop
 80030c0:	40010000 	.word	0x40010000
 80030c4:	40010400 	.word	0x40010400

080030c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b087      	sub	sp, #28
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6a1b      	ldr	r3, [r3, #32]
 80030d6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6a1b      	ldr	r3, [r3, #32]
 80030e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	69db      	ldr	r3, [r3, #28]
 80030ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	f023 0303 	bic.w	r3, r3, #3
 80030fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	68fa      	ldr	r2, [r7, #12]
 8003106:	4313      	orrs	r3, r2
 8003108:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003110:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	021b      	lsls	r3, r3, #8
 8003118:	697a      	ldr	r2, [r7, #20]
 800311a:	4313      	orrs	r3, r2
 800311c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4a21      	ldr	r2, [pc, #132]	; (80031a8 <TIM_OC3_SetConfig+0xe0>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d003      	beq.n	800312e <TIM_OC3_SetConfig+0x66>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4a20      	ldr	r2, [pc, #128]	; (80031ac <TIM_OC3_SetConfig+0xe4>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d10d      	bne.n	800314a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003134:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	68db      	ldr	r3, [r3, #12]
 800313a:	021b      	lsls	r3, r3, #8
 800313c:	697a      	ldr	r2, [r7, #20]
 800313e:	4313      	orrs	r3, r2
 8003140:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003148:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4a16      	ldr	r2, [pc, #88]	; (80031a8 <TIM_OC3_SetConfig+0xe0>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d003      	beq.n	800315a <TIM_OC3_SetConfig+0x92>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4a15      	ldr	r2, [pc, #84]	; (80031ac <TIM_OC3_SetConfig+0xe4>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d113      	bne.n	8003182 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003160:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003168:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	695b      	ldr	r3, [r3, #20]
 800316e:	011b      	lsls	r3, r3, #4
 8003170:	693a      	ldr	r2, [r7, #16]
 8003172:	4313      	orrs	r3, r2
 8003174:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	699b      	ldr	r3, [r3, #24]
 800317a:	011b      	lsls	r3, r3, #4
 800317c:	693a      	ldr	r2, [r7, #16]
 800317e:	4313      	orrs	r3, r2
 8003180:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	693a      	ldr	r2, [r7, #16]
 8003186:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	68fa      	ldr	r2, [r7, #12]
 800318c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	685a      	ldr	r2, [r3, #4]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	697a      	ldr	r2, [r7, #20]
 800319a:	621a      	str	r2, [r3, #32]
}
 800319c:	bf00      	nop
 800319e:	371c      	adds	r7, #28
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr
 80031a8:	40010000 	.word	0x40010000
 80031ac:	40010400 	.word	0x40010400

080031b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b087      	sub	sp, #28
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
 80031b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6a1b      	ldr	r3, [r3, #32]
 80031be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6a1b      	ldr	r3, [r3, #32]
 80031ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	69db      	ldr	r3, [r3, #28]
 80031d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	021b      	lsls	r3, r3, #8
 80031ee:	68fa      	ldr	r2, [r7, #12]
 80031f0:	4313      	orrs	r3, r2
 80031f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80031fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	031b      	lsls	r3, r3, #12
 8003202:	693a      	ldr	r2, [r7, #16]
 8003204:	4313      	orrs	r3, r2
 8003206:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	4a12      	ldr	r2, [pc, #72]	; (8003254 <TIM_OC4_SetConfig+0xa4>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d003      	beq.n	8003218 <TIM_OC4_SetConfig+0x68>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	4a11      	ldr	r2, [pc, #68]	; (8003258 <TIM_OC4_SetConfig+0xa8>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d109      	bne.n	800322c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800321e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	695b      	ldr	r3, [r3, #20]
 8003224:	019b      	lsls	r3, r3, #6
 8003226:	697a      	ldr	r2, [r7, #20]
 8003228:	4313      	orrs	r3, r2
 800322a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	697a      	ldr	r2, [r7, #20]
 8003230:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	68fa      	ldr	r2, [r7, #12]
 8003236:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	685a      	ldr	r2, [r3, #4]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	693a      	ldr	r2, [r7, #16]
 8003244:	621a      	str	r2, [r3, #32]
}
 8003246:	bf00      	nop
 8003248:	371c      	adds	r7, #28
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr
 8003252:	bf00      	nop
 8003254:	40010000 	.word	0x40010000
 8003258:	40010400 	.word	0x40010400

0800325c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800325c:	b480      	push	{r7}
 800325e:	b087      	sub	sp, #28
 8003260:	af00      	add	r7, sp, #0
 8003262:	60f8      	str	r0, [r7, #12]
 8003264:	60b9      	str	r1, [r7, #8]
 8003266:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	6a1b      	ldr	r3, [r3, #32]
 800326c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	6a1b      	ldr	r3, [r3, #32]
 8003272:	f023 0201 	bic.w	r2, r3, #1
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	699b      	ldr	r3, [r3, #24]
 800327e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003286:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	011b      	lsls	r3, r3, #4
 800328c:	693a      	ldr	r2, [r7, #16]
 800328e:	4313      	orrs	r3, r2
 8003290:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	f023 030a 	bic.w	r3, r3, #10
 8003298:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800329a:	697a      	ldr	r2, [r7, #20]
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	4313      	orrs	r3, r2
 80032a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	693a      	ldr	r2, [r7, #16]
 80032a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	697a      	ldr	r2, [r7, #20]
 80032ac:	621a      	str	r2, [r3, #32]
}
 80032ae:	bf00      	nop
 80032b0:	371c      	adds	r7, #28
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr

080032ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032ba:	b480      	push	{r7}
 80032bc:	b087      	sub	sp, #28
 80032be:	af00      	add	r7, sp, #0
 80032c0:	60f8      	str	r0, [r7, #12]
 80032c2:	60b9      	str	r1, [r7, #8]
 80032c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	6a1b      	ldr	r3, [r3, #32]
 80032ca:	f023 0210 	bic.w	r2, r3, #16
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	699b      	ldr	r3, [r3, #24]
 80032d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	6a1b      	ldr	r3, [r3, #32]
 80032dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80032e4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	031b      	lsls	r3, r3, #12
 80032ea:	697a      	ldr	r2, [r7, #20]
 80032ec:	4313      	orrs	r3, r2
 80032ee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80032f6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	011b      	lsls	r3, r3, #4
 80032fc:	693a      	ldr	r2, [r7, #16]
 80032fe:	4313      	orrs	r3, r2
 8003300:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	697a      	ldr	r2, [r7, #20]
 8003306:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	693a      	ldr	r2, [r7, #16]
 800330c:	621a      	str	r2, [r3, #32]
}
 800330e:	bf00      	nop
 8003310:	371c      	adds	r7, #28
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr

0800331a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800331a:	b480      	push	{r7}
 800331c:	b085      	sub	sp, #20
 800331e:	af00      	add	r7, sp, #0
 8003320:	6078      	str	r0, [r7, #4]
 8003322:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003330:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003332:	683a      	ldr	r2, [r7, #0]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	4313      	orrs	r3, r2
 8003338:	f043 0307 	orr.w	r3, r3, #7
 800333c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	68fa      	ldr	r2, [r7, #12]
 8003342:	609a      	str	r2, [r3, #8]
}
 8003344:	bf00      	nop
 8003346:	3714      	adds	r7, #20
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr

08003350 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003350:	b480      	push	{r7}
 8003352:	b087      	sub	sp, #28
 8003354:	af00      	add	r7, sp, #0
 8003356:	60f8      	str	r0, [r7, #12]
 8003358:	60b9      	str	r1, [r7, #8]
 800335a:	607a      	str	r2, [r7, #4]
 800335c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800336a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	021a      	lsls	r2, r3, #8
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	431a      	orrs	r2, r3
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	4313      	orrs	r3, r2
 8003378:	697a      	ldr	r2, [r7, #20]
 800337a:	4313      	orrs	r3, r2
 800337c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	697a      	ldr	r2, [r7, #20]
 8003382:	609a      	str	r2, [r3, #8]
}
 8003384:	bf00      	nop
 8003386:	371c      	adds	r7, #28
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr

08003390 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003390:	b480      	push	{r7}
 8003392:	b087      	sub	sp, #28
 8003394:	af00      	add	r7, sp, #0
 8003396:	60f8      	str	r0, [r7, #12]
 8003398:	60b9      	str	r1, [r7, #8]
 800339a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	f003 031f 	and.w	r3, r3, #31
 80033a2:	2201      	movs	r2, #1
 80033a4:	fa02 f303 	lsl.w	r3, r2, r3
 80033a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	6a1a      	ldr	r2, [r3, #32]
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	43db      	mvns	r3, r3
 80033b2:	401a      	ands	r2, r3
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	6a1a      	ldr	r2, [r3, #32]
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	f003 031f 	and.w	r3, r3, #31
 80033c2:	6879      	ldr	r1, [r7, #4]
 80033c4:	fa01 f303 	lsl.w	r3, r1, r3
 80033c8:	431a      	orrs	r2, r3
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	621a      	str	r2, [r3, #32]
}
 80033ce:	bf00      	nop
 80033d0:	371c      	adds	r7, #28
 80033d2:	46bd      	mov	sp, r7
 80033d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d8:	4770      	bx	lr
	...

080033dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80033dc:	b480      	push	{r7}
 80033de:	b085      	sub	sp, #20
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
 80033e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d101      	bne.n	80033f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80033f0:	2302      	movs	r3, #2
 80033f2:	e05a      	b.n	80034aa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2201      	movs	r2, #1
 80033f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2202      	movs	r2, #2
 8003400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800341a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	68fa      	ldr	r2, [r7, #12]
 8003422:	4313      	orrs	r3, r2
 8003424:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	68fa      	ldr	r2, [r7, #12]
 800342c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a21      	ldr	r2, [pc, #132]	; (80034b8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d022      	beq.n	800347e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003440:	d01d      	beq.n	800347e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a1d      	ldr	r2, [pc, #116]	; (80034bc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d018      	beq.n	800347e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a1b      	ldr	r2, [pc, #108]	; (80034c0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d013      	beq.n	800347e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a1a      	ldr	r2, [pc, #104]	; (80034c4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d00e      	beq.n	800347e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a18      	ldr	r2, [pc, #96]	; (80034c8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d009      	beq.n	800347e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a17      	ldr	r2, [pc, #92]	; (80034cc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d004      	beq.n	800347e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a15      	ldr	r2, [pc, #84]	; (80034d0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d10c      	bne.n	8003498 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003484:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	68ba      	ldr	r2, [r7, #8]
 800348c:	4313      	orrs	r3, r2
 800348e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	68ba      	ldr	r2, [r7, #8]
 8003496:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2201      	movs	r2, #1
 800349c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2200      	movs	r2, #0
 80034a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80034a8:	2300      	movs	r3, #0
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3714      	adds	r7, #20
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr
 80034b6:	bf00      	nop
 80034b8:	40010000 	.word	0x40010000
 80034bc:	40000400 	.word	0x40000400
 80034c0:	40000800 	.word	0x40000800
 80034c4:	40000c00 	.word	0x40000c00
 80034c8:	40010400 	.word	0x40010400
 80034cc:	40014000 	.word	0x40014000
 80034d0:	40001800 	.word	0x40001800

080034d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b083      	sub	sp, #12
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80034dc:	bf00      	nop
 80034de:	370c      	adds	r7, #12
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr

080034e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b083      	sub	sp, #12
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80034f0:	bf00      	nop
 80034f2:	370c      	adds	r7, #12
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr

080034fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b082      	sub	sp, #8
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d101      	bne.n	800350e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e03f      	b.n	800358e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003514:	b2db      	uxtb	r3, r3
 8003516:	2b00      	cmp	r3, #0
 8003518:	d106      	bne.n	8003528 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2200      	movs	r2, #0
 800351e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f7fd fc1e 	bl	8000d64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2224      	movs	r2, #36	; 0x24
 800352c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	68da      	ldr	r2, [r3, #12]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800353e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f000 fb4b 	bl	8003bdc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	691a      	ldr	r2, [r3, #16]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003554:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	695a      	ldr	r2, [r3, #20]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003564:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	68da      	ldr	r2, [r3, #12]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003574:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2200      	movs	r2, #0
 800357a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2220      	movs	r2, #32
 8003580:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2220      	movs	r2, #32
 8003588:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800358c:	2300      	movs	r3, #0
}
 800358e:	4618      	mov	r0, r3
 8003590:	3708      	adds	r7, #8
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}

08003596 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003596:	b580      	push	{r7, lr}
 8003598:	b088      	sub	sp, #32
 800359a:	af02      	add	r7, sp, #8
 800359c:	60f8      	str	r0, [r7, #12]
 800359e:	60b9      	str	r1, [r7, #8]
 80035a0:	603b      	str	r3, [r7, #0]
 80035a2:	4613      	mov	r3, r2
 80035a4:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80035a6:	2300      	movs	r3, #0
 80035a8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	2b20      	cmp	r3, #32
 80035b4:	f040 8083 	bne.w	80036be <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d002      	beq.n	80035c4 <HAL_UART_Transmit+0x2e>
 80035be:	88fb      	ldrh	r3, [r7, #6]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d101      	bne.n	80035c8 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	e07b      	b.n	80036c0 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d101      	bne.n	80035d6 <HAL_UART_Transmit+0x40>
 80035d2:	2302      	movs	r3, #2
 80035d4:	e074      	b.n	80036c0 <HAL_UART_Transmit+0x12a>
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2201      	movs	r2, #1
 80035da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2200      	movs	r2, #0
 80035e2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2221      	movs	r2, #33	; 0x21
 80035e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80035ec:	f7fd fd2e 	bl	800104c <HAL_GetTick>
 80035f0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	88fa      	ldrh	r2, [r7, #6]
 80035f6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	88fa      	ldrh	r2, [r7, #6]
 80035fc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2200      	movs	r2, #0
 8003602:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003606:	e042      	b.n	800368e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800360c:	b29b      	uxth	r3, r3
 800360e:	3b01      	subs	r3, #1
 8003610:	b29a      	uxth	r2, r3
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800361e:	d122      	bne.n	8003666 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	9300      	str	r3, [sp, #0]
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	2200      	movs	r2, #0
 8003628:	2180      	movs	r1, #128	; 0x80
 800362a:	68f8      	ldr	r0, [r7, #12]
 800362c:	f000 f96a 	bl	8003904 <UART_WaitOnFlagUntilTimeout>
 8003630:	4603      	mov	r3, r0
 8003632:	2b00      	cmp	r3, #0
 8003634:	d001      	beq.n	800363a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8003636:	2303      	movs	r3, #3
 8003638:	e042      	b.n	80036c0 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	881b      	ldrh	r3, [r3, #0]
 8003642:	461a      	mov	r2, r3
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800364c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	691b      	ldr	r3, [r3, #16]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d103      	bne.n	800365e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	3302      	adds	r3, #2
 800365a:	60bb      	str	r3, [r7, #8]
 800365c:	e017      	b.n	800368e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	3301      	adds	r3, #1
 8003662:	60bb      	str	r3, [r7, #8]
 8003664:	e013      	b.n	800368e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	9300      	str	r3, [sp, #0]
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	2200      	movs	r2, #0
 800366e:	2180      	movs	r1, #128	; 0x80
 8003670:	68f8      	ldr	r0, [r7, #12]
 8003672:	f000 f947 	bl	8003904 <UART_WaitOnFlagUntilTimeout>
 8003676:	4603      	mov	r3, r0
 8003678:	2b00      	cmp	r3, #0
 800367a:	d001      	beq.n	8003680 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800367c:	2303      	movs	r3, #3
 800367e:	e01f      	b.n	80036c0 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	1c5a      	adds	r2, r3, #1
 8003684:	60ba      	str	r2, [r7, #8]
 8003686:	781a      	ldrb	r2, [r3, #0]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003692:	b29b      	uxth	r3, r3
 8003694:	2b00      	cmp	r3, #0
 8003696:	d1b7      	bne.n	8003608 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	9300      	str	r3, [sp, #0]
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	2200      	movs	r2, #0
 80036a0:	2140      	movs	r1, #64	; 0x40
 80036a2:	68f8      	ldr	r0, [r7, #12]
 80036a4:	f000 f92e 	bl	8003904 <UART_WaitOnFlagUntilTimeout>
 80036a8:	4603      	mov	r3, r0
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d001      	beq.n	80036b2 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	e006      	b.n	80036c0 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2220      	movs	r2, #32
 80036b6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80036ba:	2300      	movs	r3, #0
 80036bc:	e000      	b.n	80036c0 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80036be:	2302      	movs	r3, #2
  }
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3718      	adds	r7, #24
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}

080036c8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b088      	sub	sp, #32
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	68db      	ldr	r3, [r3, #12]
 80036de:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	695b      	ldr	r3, [r3, #20]
 80036e6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80036e8:	2300      	movs	r3, #0
 80036ea:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80036ec:	2300      	movs	r3, #0
 80036ee:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80036f0:	69fb      	ldr	r3, [r7, #28]
 80036f2:	f003 030f 	and.w	r3, r3, #15
 80036f6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d10d      	bne.n	800371a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	f003 0320 	and.w	r3, r3, #32
 8003704:	2b00      	cmp	r3, #0
 8003706:	d008      	beq.n	800371a <HAL_UART_IRQHandler+0x52>
 8003708:	69bb      	ldr	r3, [r7, #24]
 800370a:	f003 0320 	and.w	r3, r3, #32
 800370e:	2b00      	cmp	r3, #0
 8003710:	d003      	beq.n	800371a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f000 f9e0 	bl	8003ad8 <UART_Receive_IT>
      return;
 8003718:	e0d1      	b.n	80038be <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	2b00      	cmp	r3, #0
 800371e:	f000 80b0 	beq.w	8003882 <HAL_UART_IRQHandler+0x1ba>
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	f003 0301 	and.w	r3, r3, #1
 8003728:	2b00      	cmp	r3, #0
 800372a:	d105      	bne.n	8003738 <HAL_UART_IRQHandler+0x70>
 800372c:	69bb      	ldr	r3, [r7, #24]
 800372e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003732:	2b00      	cmp	r3, #0
 8003734:	f000 80a5 	beq.w	8003882 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003738:	69fb      	ldr	r3, [r7, #28]
 800373a:	f003 0301 	and.w	r3, r3, #1
 800373e:	2b00      	cmp	r3, #0
 8003740:	d00a      	beq.n	8003758 <HAL_UART_IRQHandler+0x90>
 8003742:	69bb      	ldr	r3, [r7, #24]
 8003744:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003748:	2b00      	cmp	r3, #0
 800374a:	d005      	beq.n	8003758 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003750:	f043 0201 	orr.w	r2, r3, #1
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003758:	69fb      	ldr	r3, [r7, #28]
 800375a:	f003 0304 	and.w	r3, r3, #4
 800375e:	2b00      	cmp	r3, #0
 8003760:	d00a      	beq.n	8003778 <HAL_UART_IRQHandler+0xb0>
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	f003 0301 	and.w	r3, r3, #1
 8003768:	2b00      	cmp	r3, #0
 800376a:	d005      	beq.n	8003778 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003770:	f043 0202 	orr.w	r2, r3, #2
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003778:	69fb      	ldr	r3, [r7, #28]
 800377a:	f003 0302 	and.w	r3, r3, #2
 800377e:	2b00      	cmp	r3, #0
 8003780:	d00a      	beq.n	8003798 <HAL_UART_IRQHandler+0xd0>
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	f003 0301 	and.w	r3, r3, #1
 8003788:	2b00      	cmp	r3, #0
 800378a:	d005      	beq.n	8003798 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003790:	f043 0204 	orr.w	r2, r3, #4
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003798:	69fb      	ldr	r3, [r7, #28]
 800379a:	f003 0308 	and.w	r3, r3, #8
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d00f      	beq.n	80037c2 <HAL_UART_IRQHandler+0xfa>
 80037a2:	69bb      	ldr	r3, [r7, #24]
 80037a4:	f003 0320 	and.w	r3, r3, #32
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d104      	bne.n	80037b6 <HAL_UART_IRQHandler+0xee>
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	f003 0301 	and.w	r3, r3, #1
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d005      	beq.n	80037c2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037ba:	f043 0208 	orr.w	r2, r3, #8
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d078      	beq.n	80038bc <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80037ca:	69fb      	ldr	r3, [r7, #28]
 80037cc:	f003 0320 	and.w	r3, r3, #32
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d007      	beq.n	80037e4 <HAL_UART_IRQHandler+0x11c>
 80037d4:	69bb      	ldr	r3, [r7, #24]
 80037d6:	f003 0320 	and.w	r3, r3, #32
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d002      	beq.n	80037e4 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f000 f97a 	bl	8003ad8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	695b      	ldr	r3, [r3, #20]
 80037ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037ee:	2b40      	cmp	r3, #64	; 0x40
 80037f0:	bf0c      	ite	eq
 80037f2:	2301      	moveq	r3, #1
 80037f4:	2300      	movne	r3, #0
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037fe:	f003 0308 	and.w	r3, r3, #8
 8003802:	2b00      	cmp	r3, #0
 8003804:	d102      	bne.n	800380c <HAL_UART_IRQHandler+0x144>
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d031      	beq.n	8003870 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	f000 f8c3 	bl	8003998 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	695b      	ldr	r3, [r3, #20]
 8003818:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800381c:	2b40      	cmp	r3, #64	; 0x40
 800381e:	d123      	bne.n	8003868 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	695a      	ldr	r2, [r3, #20]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800382e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003834:	2b00      	cmp	r3, #0
 8003836:	d013      	beq.n	8003860 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800383c:	4a21      	ldr	r2, [pc, #132]	; (80038c4 <HAL_UART_IRQHandler+0x1fc>)
 800383e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003844:	4618      	mov	r0, r3
 8003846:	f7fd fe25 	bl	8001494 <HAL_DMA_Abort_IT>
 800384a:	4603      	mov	r3, r0
 800384c:	2b00      	cmp	r3, #0
 800384e:	d016      	beq.n	800387e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003854:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800385a:	4610      	mov	r0, r2
 800385c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800385e:	e00e      	b.n	800387e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f000 f845 	bl	80038f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003866:	e00a      	b.n	800387e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	f000 f841 	bl	80038f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800386e:	e006      	b.n	800387e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	f000 f83d 	bl	80038f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2200      	movs	r2, #0
 800387a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800387c:	e01e      	b.n	80038bc <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800387e:	bf00      	nop
    return;
 8003880:	e01c      	b.n	80038bc <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003882:	69fb      	ldr	r3, [r7, #28]
 8003884:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003888:	2b00      	cmp	r3, #0
 800388a:	d008      	beq.n	800389e <HAL_UART_IRQHandler+0x1d6>
 800388c:	69bb      	ldr	r3, [r7, #24]
 800388e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003892:	2b00      	cmp	r3, #0
 8003894:	d003      	beq.n	800389e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f000 f8b0 	bl	80039fc <UART_Transmit_IT>
    return;
 800389c:	e00f      	b.n	80038be <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800389e:	69fb      	ldr	r3, [r7, #28]
 80038a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d00a      	beq.n	80038be <HAL_UART_IRQHandler+0x1f6>
 80038a8:	69bb      	ldr	r3, [r7, #24]
 80038aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d005      	beq.n	80038be <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f000 f8f8 	bl	8003aa8 <UART_EndTransmit_IT>
    return;
 80038b8:	bf00      	nop
 80038ba:	e000      	b.n	80038be <HAL_UART_IRQHandler+0x1f6>
    return;
 80038bc:	bf00      	nop
  }
}
 80038be:	3720      	adds	r7, #32
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}
 80038c4:	080039d5 	.word	0x080039d5

080038c8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b083      	sub	sp, #12
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80038d0:	bf00      	nop
 80038d2:	370c      	adds	r7, #12
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr

080038dc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80038dc:	b480      	push	{r7}
 80038de:	b083      	sub	sp, #12
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80038e4:	bf00      	nop
 80038e6:	370c      	adds	r7, #12
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr

080038f0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80038f8:	bf00      	nop
 80038fa:	370c      	adds	r7, #12
 80038fc:	46bd      	mov	sp, r7
 80038fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003902:	4770      	bx	lr

08003904 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b084      	sub	sp, #16
 8003908:	af00      	add	r7, sp, #0
 800390a:	60f8      	str	r0, [r7, #12]
 800390c:	60b9      	str	r1, [r7, #8]
 800390e:	603b      	str	r3, [r7, #0]
 8003910:	4613      	mov	r3, r2
 8003912:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003914:	e02c      	b.n	8003970 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003916:	69bb      	ldr	r3, [r7, #24]
 8003918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800391c:	d028      	beq.n	8003970 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800391e:	69bb      	ldr	r3, [r7, #24]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d007      	beq.n	8003934 <UART_WaitOnFlagUntilTimeout+0x30>
 8003924:	f7fd fb92 	bl	800104c <HAL_GetTick>
 8003928:	4602      	mov	r2, r0
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	1ad3      	subs	r3, r2, r3
 800392e:	69ba      	ldr	r2, [r7, #24]
 8003930:	429a      	cmp	r2, r3
 8003932:	d21d      	bcs.n	8003970 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	68da      	ldr	r2, [r3, #12]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003942:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	695a      	ldr	r2, [r3, #20]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f022 0201 	bic.w	r2, r2, #1
 8003952:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2220      	movs	r2, #32
 8003958:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2220      	movs	r2, #32
 8003960:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2200      	movs	r2, #0
 8003968:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800396c:	2303      	movs	r3, #3
 800396e:	e00f      	b.n	8003990 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	4013      	ands	r3, r2
 800397a:	68ba      	ldr	r2, [r7, #8]
 800397c:	429a      	cmp	r2, r3
 800397e:	bf0c      	ite	eq
 8003980:	2301      	moveq	r3, #1
 8003982:	2300      	movne	r3, #0
 8003984:	b2db      	uxtb	r3, r3
 8003986:	461a      	mov	r2, r3
 8003988:	79fb      	ldrb	r3, [r7, #7]
 800398a:	429a      	cmp	r2, r3
 800398c:	d0c3      	beq.n	8003916 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800398e:	2300      	movs	r3, #0
}
 8003990:	4618      	mov	r0, r3
 8003992:	3710      	adds	r7, #16
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}

08003998 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003998:	b480      	push	{r7}
 800399a:	b083      	sub	sp, #12
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	68da      	ldr	r2, [r3, #12]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80039ae:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	695a      	ldr	r2, [r3, #20]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f022 0201 	bic.w	r2, r2, #1
 80039be:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2220      	movs	r2, #32
 80039c4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80039c8:	bf00      	nop
 80039ca:	370c      	adds	r7, #12
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr

080039d4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039e0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2200      	movs	r2, #0
 80039e6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2200      	movs	r2, #0
 80039ec:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80039ee:	68f8      	ldr	r0, [r7, #12]
 80039f0:	f7ff ff7e 	bl	80038f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80039f4:	bf00      	nop
 80039f6:	3710      	adds	r7, #16
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}

080039fc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b085      	sub	sp, #20
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003a0a:	b2db      	uxtb	r3, r3
 8003a0c:	2b21      	cmp	r3, #33	; 0x21
 8003a0e:	d144      	bne.n	8003a9a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a18:	d11a      	bne.n	8003a50 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6a1b      	ldr	r3, [r3, #32]
 8003a1e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	881b      	ldrh	r3, [r3, #0]
 8003a24:	461a      	mov	r2, r3
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a2e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	691b      	ldr	r3, [r3, #16]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d105      	bne.n	8003a44 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6a1b      	ldr	r3, [r3, #32]
 8003a3c:	1c9a      	adds	r2, r3, #2
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	621a      	str	r2, [r3, #32]
 8003a42:	e00e      	b.n	8003a62 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6a1b      	ldr	r3, [r3, #32]
 8003a48:	1c5a      	adds	r2, r3, #1
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	621a      	str	r2, [r3, #32]
 8003a4e:	e008      	b.n	8003a62 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6a1b      	ldr	r3, [r3, #32]
 8003a54:	1c59      	adds	r1, r3, #1
 8003a56:	687a      	ldr	r2, [r7, #4]
 8003a58:	6211      	str	r1, [r2, #32]
 8003a5a:	781a      	ldrb	r2, [r3, #0]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a66:	b29b      	uxth	r3, r3
 8003a68:	3b01      	subs	r3, #1
 8003a6a:	b29b      	uxth	r3, r3
 8003a6c:	687a      	ldr	r2, [r7, #4]
 8003a6e:	4619      	mov	r1, r3
 8003a70:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d10f      	bne.n	8003a96 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	68da      	ldr	r2, [r3, #12]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a84:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	68da      	ldr	r2, [r3, #12]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a94:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003a96:	2300      	movs	r3, #0
 8003a98:	e000      	b.n	8003a9c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003a9a:	2302      	movs	r3, #2
  }
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	3714      	adds	r7, #20
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr

08003aa8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b082      	sub	sp, #8
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	68da      	ldr	r2, [r3, #12]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003abe:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2220      	movs	r2, #32
 8003ac4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	f7ff fefd 	bl	80038c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003ace:	2300      	movs	r3, #0
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3708      	adds	r7, #8
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}

08003ad8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b084      	sub	sp, #16
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	2b22      	cmp	r3, #34	; 0x22
 8003aea:	d171      	bne.n	8003bd0 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003af4:	d123      	bne.n	8003b3e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003afa:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	691b      	ldr	r3, [r3, #16]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d10e      	bne.n	8003b22 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	b29b      	uxth	r3, r3
 8003b0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b10:	b29a      	uxth	r2, r3
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b1a:	1c9a      	adds	r2, r3, #2
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	629a      	str	r2, [r3, #40]	; 0x28
 8003b20:	e029      	b.n	8003b76 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	b29b      	uxth	r3, r3
 8003b2a:	b2db      	uxtb	r3, r3
 8003b2c:	b29a      	uxth	r2, r3
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b36:	1c5a      	adds	r2, r3, #1
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	629a      	str	r2, [r3, #40]	; 0x28
 8003b3c:	e01b      	b.n	8003b76 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	691b      	ldr	r3, [r3, #16]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d10a      	bne.n	8003b5c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	6858      	ldr	r0, [r3, #4]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b50:	1c59      	adds	r1, r3, #1
 8003b52:	687a      	ldr	r2, [r7, #4]
 8003b54:	6291      	str	r1, [r2, #40]	; 0x28
 8003b56:	b2c2      	uxtb	r2, r0
 8003b58:	701a      	strb	r2, [r3, #0]
 8003b5a:	e00c      	b.n	8003b76 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	b2da      	uxtb	r2, r3
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b68:	1c58      	adds	r0, r3, #1
 8003b6a:	6879      	ldr	r1, [r7, #4]
 8003b6c:	6288      	str	r0, [r1, #40]	; 0x28
 8003b6e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003b72:	b2d2      	uxtb	r2, r2
 8003b74:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b7a:	b29b      	uxth	r3, r3
 8003b7c:	3b01      	subs	r3, #1
 8003b7e:	b29b      	uxth	r3, r3
 8003b80:	687a      	ldr	r2, [r7, #4]
 8003b82:	4619      	mov	r1, r3
 8003b84:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d120      	bne.n	8003bcc <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	68da      	ldr	r2, [r3, #12]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f022 0220 	bic.w	r2, r2, #32
 8003b98:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	68da      	ldr	r2, [r3, #12]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ba8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	695a      	ldr	r2, [r3, #20]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f022 0201 	bic.w	r2, r2, #1
 8003bb8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2220      	movs	r2, #32
 8003bbe:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f7ff fe8a 	bl	80038dc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	e002      	b.n	8003bd2 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	e000      	b.n	8003bd2 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003bd0:	2302      	movs	r3, #2
  }
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3710      	adds	r7, #16
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
	...

08003bdc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003bdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003be0:	b085      	sub	sp, #20
 8003be2:	af00      	add	r7, sp, #0
 8003be4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	691b      	ldr	r3, [r3, #16]
 8003bec:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	68da      	ldr	r2, [r3, #12]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	430a      	orrs	r2, r1
 8003bfa:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	689a      	ldr	r2, [r3, #8]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	691b      	ldr	r3, [r3, #16]
 8003c04:	431a      	orrs	r2, r3
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	695b      	ldr	r3, [r3, #20]
 8003c0a:	431a      	orrs	r2, r3
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	69db      	ldr	r3, [r3, #28]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	68db      	ldr	r3, [r3, #12]
 8003c1a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003c1e:	f023 030c 	bic.w	r3, r3, #12
 8003c22:	687a      	ldr	r2, [r7, #4]
 8003c24:	6812      	ldr	r2, [r2, #0]
 8003c26:	68f9      	ldr	r1, [r7, #12]
 8003c28:	430b      	orrs	r3, r1
 8003c2a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	695b      	ldr	r3, [r3, #20]
 8003c32:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	699a      	ldr	r2, [r3, #24]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	430a      	orrs	r2, r1
 8003c40:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	69db      	ldr	r3, [r3, #28]
 8003c46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c4a:	f040 818b 	bne.w	8003f64 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4ac1      	ldr	r2, [pc, #772]	; (8003f58 <UART_SetConfig+0x37c>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d005      	beq.n	8003c64 <UART_SetConfig+0x88>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4abf      	ldr	r2, [pc, #764]	; (8003f5c <UART_SetConfig+0x380>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	f040 80bd 	bne.w	8003dde <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003c64:	f7fe fca2 	bl	80025ac <HAL_RCC_GetPCLK2Freq>
 8003c68:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	461d      	mov	r5, r3
 8003c6e:	f04f 0600 	mov.w	r6, #0
 8003c72:	46a8      	mov	r8, r5
 8003c74:	46b1      	mov	r9, r6
 8003c76:	eb18 0308 	adds.w	r3, r8, r8
 8003c7a:	eb49 0409 	adc.w	r4, r9, r9
 8003c7e:	4698      	mov	r8, r3
 8003c80:	46a1      	mov	r9, r4
 8003c82:	eb18 0805 	adds.w	r8, r8, r5
 8003c86:	eb49 0906 	adc.w	r9, r9, r6
 8003c8a:	f04f 0100 	mov.w	r1, #0
 8003c8e:	f04f 0200 	mov.w	r2, #0
 8003c92:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003c96:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003c9a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003c9e:	4688      	mov	r8, r1
 8003ca0:	4691      	mov	r9, r2
 8003ca2:	eb18 0005 	adds.w	r0, r8, r5
 8003ca6:	eb49 0106 	adc.w	r1, r9, r6
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	461d      	mov	r5, r3
 8003cb0:	f04f 0600 	mov.w	r6, #0
 8003cb4:	196b      	adds	r3, r5, r5
 8003cb6:	eb46 0406 	adc.w	r4, r6, r6
 8003cba:	461a      	mov	r2, r3
 8003cbc:	4623      	mov	r3, r4
 8003cbe:	f7fc fa8b 	bl	80001d8 <__aeabi_uldivmod>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	460c      	mov	r4, r1
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	4ba5      	ldr	r3, [pc, #660]	; (8003f60 <UART_SetConfig+0x384>)
 8003cca:	fba3 2302 	umull	r2, r3, r3, r2
 8003cce:	095b      	lsrs	r3, r3, #5
 8003cd0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	461d      	mov	r5, r3
 8003cd8:	f04f 0600 	mov.w	r6, #0
 8003cdc:	46a9      	mov	r9, r5
 8003cde:	46b2      	mov	sl, r6
 8003ce0:	eb19 0309 	adds.w	r3, r9, r9
 8003ce4:	eb4a 040a 	adc.w	r4, sl, sl
 8003ce8:	4699      	mov	r9, r3
 8003cea:	46a2      	mov	sl, r4
 8003cec:	eb19 0905 	adds.w	r9, r9, r5
 8003cf0:	eb4a 0a06 	adc.w	sl, sl, r6
 8003cf4:	f04f 0100 	mov.w	r1, #0
 8003cf8:	f04f 0200 	mov.w	r2, #0
 8003cfc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d00:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003d04:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003d08:	4689      	mov	r9, r1
 8003d0a:	4692      	mov	sl, r2
 8003d0c:	eb19 0005 	adds.w	r0, r9, r5
 8003d10:	eb4a 0106 	adc.w	r1, sl, r6
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	461d      	mov	r5, r3
 8003d1a:	f04f 0600 	mov.w	r6, #0
 8003d1e:	196b      	adds	r3, r5, r5
 8003d20:	eb46 0406 	adc.w	r4, r6, r6
 8003d24:	461a      	mov	r2, r3
 8003d26:	4623      	mov	r3, r4
 8003d28:	f7fc fa56 	bl	80001d8 <__aeabi_uldivmod>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	460c      	mov	r4, r1
 8003d30:	461a      	mov	r2, r3
 8003d32:	4b8b      	ldr	r3, [pc, #556]	; (8003f60 <UART_SetConfig+0x384>)
 8003d34:	fba3 1302 	umull	r1, r3, r3, r2
 8003d38:	095b      	lsrs	r3, r3, #5
 8003d3a:	2164      	movs	r1, #100	; 0x64
 8003d3c:	fb01 f303 	mul.w	r3, r1, r3
 8003d40:	1ad3      	subs	r3, r2, r3
 8003d42:	00db      	lsls	r3, r3, #3
 8003d44:	3332      	adds	r3, #50	; 0x32
 8003d46:	4a86      	ldr	r2, [pc, #536]	; (8003f60 <UART_SetConfig+0x384>)
 8003d48:	fba2 2303 	umull	r2, r3, r2, r3
 8003d4c:	095b      	lsrs	r3, r3, #5
 8003d4e:	005b      	lsls	r3, r3, #1
 8003d50:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003d54:	4498      	add	r8, r3
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	461d      	mov	r5, r3
 8003d5a:	f04f 0600 	mov.w	r6, #0
 8003d5e:	46a9      	mov	r9, r5
 8003d60:	46b2      	mov	sl, r6
 8003d62:	eb19 0309 	adds.w	r3, r9, r9
 8003d66:	eb4a 040a 	adc.w	r4, sl, sl
 8003d6a:	4699      	mov	r9, r3
 8003d6c:	46a2      	mov	sl, r4
 8003d6e:	eb19 0905 	adds.w	r9, r9, r5
 8003d72:	eb4a 0a06 	adc.w	sl, sl, r6
 8003d76:	f04f 0100 	mov.w	r1, #0
 8003d7a:	f04f 0200 	mov.w	r2, #0
 8003d7e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d82:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003d86:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003d8a:	4689      	mov	r9, r1
 8003d8c:	4692      	mov	sl, r2
 8003d8e:	eb19 0005 	adds.w	r0, r9, r5
 8003d92:	eb4a 0106 	adc.w	r1, sl, r6
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	461d      	mov	r5, r3
 8003d9c:	f04f 0600 	mov.w	r6, #0
 8003da0:	196b      	adds	r3, r5, r5
 8003da2:	eb46 0406 	adc.w	r4, r6, r6
 8003da6:	461a      	mov	r2, r3
 8003da8:	4623      	mov	r3, r4
 8003daa:	f7fc fa15 	bl	80001d8 <__aeabi_uldivmod>
 8003dae:	4603      	mov	r3, r0
 8003db0:	460c      	mov	r4, r1
 8003db2:	461a      	mov	r2, r3
 8003db4:	4b6a      	ldr	r3, [pc, #424]	; (8003f60 <UART_SetConfig+0x384>)
 8003db6:	fba3 1302 	umull	r1, r3, r3, r2
 8003dba:	095b      	lsrs	r3, r3, #5
 8003dbc:	2164      	movs	r1, #100	; 0x64
 8003dbe:	fb01 f303 	mul.w	r3, r1, r3
 8003dc2:	1ad3      	subs	r3, r2, r3
 8003dc4:	00db      	lsls	r3, r3, #3
 8003dc6:	3332      	adds	r3, #50	; 0x32
 8003dc8:	4a65      	ldr	r2, [pc, #404]	; (8003f60 <UART_SetConfig+0x384>)
 8003dca:	fba2 2303 	umull	r2, r3, r2, r3
 8003dce:	095b      	lsrs	r3, r3, #5
 8003dd0:	f003 0207 	and.w	r2, r3, #7
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4442      	add	r2, r8
 8003dda:	609a      	str	r2, [r3, #8]
 8003ddc:	e26f      	b.n	80042be <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003dde:	f7fe fbd1 	bl	8002584 <HAL_RCC_GetPCLK1Freq>
 8003de2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	461d      	mov	r5, r3
 8003de8:	f04f 0600 	mov.w	r6, #0
 8003dec:	46a8      	mov	r8, r5
 8003dee:	46b1      	mov	r9, r6
 8003df0:	eb18 0308 	adds.w	r3, r8, r8
 8003df4:	eb49 0409 	adc.w	r4, r9, r9
 8003df8:	4698      	mov	r8, r3
 8003dfa:	46a1      	mov	r9, r4
 8003dfc:	eb18 0805 	adds.w	r8, r8, r5
 8003e00:	eb49 0906 	adc.w	r9, r9, r6
 8003e04:	f04f 0100 	mov.w	r1, #0
 8003e08:	f04f 0200 	mov.w	r2, #0
 8003e0c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003e10:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003e14:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003e18:	4688      	mov	r8, r1
 8003e1a:	4691      	mov	r9, r2
 8003e1c:	eb18 0005 	adds.w	r0, r8, r5
 8003e20:	eb49 0106 	adc.w	r1, r9, r6
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	461d      	mov	r5, r3
 8003e2a:	f04f 0600 	mov.w	r6, #0
 8003e2e:	196b      	adds	r3, r5, r5
 8003e30:	eb46 0406 	adc.w	r4, r6, r6
 8003e34:	461a      	mov	r2, r3
 8003e36:	4623      	mov	r3, r4
 8003e38:	f7fc f9ce 	bl	80001d8 <__aeabi_uldivmod>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	460c      	mov	r4, r1
 8003e40:	461a      	mov	r2, r3
 8003e42:	4b47      	ldr	r3, [pc, #284]	; (8003f60 <UART_SetConfig+0x384>)
 8003e44:	fba3 2302 	umull	r2, r3, r3, r2
 8003e48:	095b      	lsrs	r3, r3, #5
 8003e4a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	461d      	mov	r5, r3
 8003e52:	f04f 0600 	mov.w	r6, #0
 8003e56:	46a9      	mov	r9, r5
 8003e58:	46b2      	mov	sl, r6
 8003e5a:	eb19 0309 	adds.w	r3, r9, r9
 8003e5e:	eb4a 040a 	adc.w	r4, sl, sl
 8003e62:	4699      	mov	r9, r3
 8003e64:	46a2      	mov	sl, r4
 8003e66:	eb19 0905 	adds.w	r9, r9, r5
 8003e6a:	eb4a 0a06 	adc.w	sl, sl, r6
 8003e6e:	f04f 0100 	mov.w	r1, #0
 8003e72:	f04f 0200 	mov.w	r2, #0
 8003e76:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e7a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003e7e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003e82:	4689      	mov	r9, r1
 8003e84:	4692      	mov	sl, r2
 8003e86:	eb19 0005 	adds.w	r0, r9, r5
 8003e8a:	eb4a 0106 	adc.w	r1, sl, r6
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	461d      	mov	r5, r3
 8003e94:	f04f 0600 	mov.w	r6, #0
 8003e98:	196b      	adds	r3, r5, r5
 8003e9a:	eb46 0406 	adc.w	r4, r6, r6
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	4623      	mov	r3, r4
 8003ea2:	f7fc f999 	bl	80001d8 <__aeabi_uldivmod>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	460c      	mov	r4, r1
 8003eaa:	461a      	mov	r2, r3
 8003eac:	4b2c      	ldr	r3, [pc, #176]	; (8003f60 <UART_SetConfig+0x384>)
 8003eae:	fba3 1302 	umull	r1, r3, r3, r2
 8003eb2:	095b      	lsrs	r3, r3, #5
 8003eb4:	2164      	movs	r1, #100	; 0x64
 8003eb6:	fb01 f303 	mul.w	r3, r1, r3
 8003eba:	1ad3      	subs	r3, r2, r3
 8003ebc:	00db      	lsls	r3, r3, #3
 8003ebe:	3332      	adds	r3, #50	; 0x32
 8003ec0:	4a27      	ldr	r2, [pc, #156]	; (8003f60 <UART_SetConfig+0x384>)
 8003ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ec6:	095b      	lsrs	r3, r3, #5
 8003ec8:	005b      	lsls	r3, r3, #1
 8003eca:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003ece:	4498      	add	r8, r3
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	461d      	mov	r5, r3
 8003ed4:	f04f 0600 	mov.w	r6, #0
 8003ed8:	46a9      	mov	r9, r5
 8003eda:	46b2      	mov	sl, r6
 8003edc:	eb19 0309 	adds.w	r3, r9, r9
 8003ee0:	eb4a 040a 	adc.w	r4, sl, sl
 8003ee4:	4699      	mov	r9, r3
 8003ee6:	46a2      	mov	sl, r4
 8003ee8:	eb19 0905 	adds.w	r9, r9, r5
 8003eec:	eb4a 0a06 	adc.w	sl, sl, r6
 8003ef0:	f04f 0100 	mov.w	r1, #0
 8003ef4:	f04f 0200 	mov.w	r2, #0
 8003ef8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003efc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003f00:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003f04:	4689      	mov	r9, r1
 8003f06:	4692      	mov	sl, r2
 8003f08:	eb19 0005 	adds.w	r0, r9, r5
 8003f0c:	eb4a 0106 	adc.w	r1, sl, r6
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	461d      	mov	r5, r3
 8003f16:	f04f 0600 	mov.w	r6, #0
 8003f1a:	196b      	adds	r3, r5, r5
 8003f1c:	eb46 0406 	adc.w	r4, r6, r6
 8003f20:	461a      	mov	r2, r3
 8003f22:	4623      	mov	r3, r4
 8003f24:	f7fc f958 	bl	80001d8 <__aeabi_uldivmod>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	460c      	mov	r4, r1
 8003f2c:	461a      	mov	r2, r3
 8003f2e:	4b0c      	ldr	r3, [pc, #48]	; (8003f60 <UART_SetConfig+0x384>)
 8003f30:	fba3 1302 	umull	r1, r3, r3, r2
 8003f34:	095b      	lsrs	r3, r3, #5
 8003f36:	2164      	movs	r1, #100	; 0x64
 8003f38:	fb01 f303 	mul.w	r3, r1, r3
 8003f3c:	1ad3      	subs	r3, r2, r3
 8003f3e:	00db      	lsls	r3, r3, #3
 8003f40:	3332      	adds	r3, #50	; 0x32
 8003f42:	4a07      	ldr	r2, [pc, #28]	; (8003f60 <UART_SetConfig+0x384>)
 8003f44:	fba2 2303 	umull	r2, r3, r2, r3
 8003f48:	095b      	lsrs	r3, r3, #5
 8003f4a:	f003 0207 	and.w	r2, r3, #7
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4442      	add	r2, r8
 8003f54:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003f56:	e1b2      	b.n	80042be <UART_SetConfig+0x6e2>
 8003f58:	40011000 	.word	0x40011000
 8003f5c:	40011400 	.word	0x40011400
 8003f60:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4ad7      	ldr	r2, [pc, #860]	; (80042c8 <UART_SetConfig+0x6ec>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d005      	beq.n	8003f7a <UART_SetConfig+0x39e>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4ad6      	ldr	r2, [pc, #856]	; (80042cc <UART_SetConfig+0x6f0>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	f040 80d1 	bne.w	800411c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003f7a:	f7fe fb17 	bl	80025ac <HAL_RCC_GetPCLK2Freq>
 8003f7e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	469a      	mov	sl, r3
 8003f84:	f04f 0b00 	mov.w	fp, #0
 8003f88:	46d0      	mov	r8, sl
 8003f8a:	46d9      	mov	r9, fp
 8003f8c:	eb18 0308 	adds.w	r3, r8, r8
 8003f90:	eb49 0409 	adc.w	r4, r9, r9
 8003f94:	4698      	mov	r8, r3
 8003f96:	46a1      	mov	r9, r4
 8003f98:	eb18 080a 	adds.w	r8, r8, sl
 8003f9c:	eb49 090b 	adc.w	r9, r9, fp
 8003fa0:	f04f 0100 	mov.w	r1, #0
 8003fa4:	f04f 0200 	mov.w	r2, #0
 8003fa8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003fac:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003fb0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003fb4:	4688      	mov	r8, r1
 8003fb6:	4691      	mov	r9, r2
 8003fb8:	eb1a 0508 	adds.w	r5, sl, r8
 8003fbc:	eb4b 0609 	adc.w	r6, fp, r9
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	4619      	mov	r1, r3
 8003fc6:	f04f 0200 	mov.w	r2, #0
 8003fca:	f04f 0300 	mov.w	r3, #0
 8003fce:	f04f 0400 	mov.w	r4, #0
 8003fd2:	0094      	lsls	r4, r2, #2
 8003fd4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003fd8:	008b      	lsls	r3, r1, #2
 8003fda:	461a      	mov	r2, r3
 8003fdc:	4623      	mov	r3, r4
 8003fde:	4628      	mov	r0, r5
 8003fe0:	4631      	mov	r1, r6
 8003fe2:	f7fc f8f9 	bl	80001d8 <__aeabi_uldivmod>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	460c      	mov	r4, r1
 8003fea:	461a      	mov	r2, r3
 8003fec:	4bb8      	ldr	r3, [pc, #736]	; (80042d0 <UART_SetConfig+0x6f4>)
 8003fee:	fba3 2302 	umull	r2, r3, r3, r2
 8003ff2:	095b      	lsrs	r3, r3, #5
 8003ff4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	469b      	mov	fp, r3
 8003ffc:	f04f 0c00 	mov.w	ip, #0
 8004000:	46d9      	mov	r9, fp
 8004002:	46e2      	mov	sl, ip
 8004004:	eb19 0309 	adds.w	r3, r9, r9
 8004008:	eb4a 040a 	adc.w	r4, sl, sl
 800400c:	4699      	mov	r9, r3
 800400e:	46a2      	mov	sl, r4
 8004010:	eb19 090b 	adds.w	r9, r9, fp
 8004014:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004018:	f04f 0100 	mov.w	r1, #0
 800401c:	f04f 0200 	mov.w	r2, #0
 8004020:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004024:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004028:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800402c:	4689      	mov	r9, r1
 800402e:	4692      	mov	sl, r2
 8004030:	eb1b 0509 	adds.w	r5, fp, r9
 8004034:	eb4c 060a 	adc.w	r6, ip, sl
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	4619      	mov	r1, r3
 800403e:	f04f 0200 	mov.w	r2, #0
 8004042:	f04f 0300 	mov.w	r3, #0
 8004046:	f04f 0400 	mov.w	r4, #0
 800404a:	0094      	lsls	r4, r2, #2
 800404c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004050:	008b      	lsls	r3, r1, #2
 8004052:	461a      	mov	r2, r3
 8004054:	4623      	mov	r3, r4
 8004056:	4628      	mov	r0, r5
 8004058:	4631      	mov	r1, r6
 800405a:	f7fc f8bd 	bl	80001d8 <__aeabi_uldivmod>
 800405e:	4603      	mov	r3, r0
 8004060:	460c      	mov	r4, r1
 8004062:	461a      	mov	r2, r3
 8004064:	4b9a      	ldr	r3, [pc, #616]	; (80042d0 <UART_SetConfig+0x6f4>)
 8004066:	fba3 1302 	umull	r1, r3, r3, r2
 800406a:	095b      	lsrs	r3, r3, #5
 800406c:	2164      	movs	r1, #100	; 0x64
 800406e:	fb01 f303 	mul.w	r3, r1, r3
 8004072:	1ad3      	subs	r3, r2, r3
 8004074:	011b      	lsls	r3, r3, #4
 8004076:	3332      	adds	r3, #50	; 0x32
 8004078:	4a95      	ldr	r2, [pc, #596]	; (80042d0 <UART_SetConfig+0x6f4>)
 800407a:	fba2 2303 	umull	r2, r3, r2, r3
 800407e:	095b      	lsrs	r3, r3, #5
 8004080:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004084:	4498      	add	r8, r3
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	469b      	mov	fp, r3
 800408a:	f04f 0c00 	mov.w	ip, #0
 800408e:	46d9      	mov	r9, fp
 8004090:	46e2      	mov	sl, ip
 8004092:	eb19 0309 	adds.w	r3, r9, r9
 8004096:	eb4a 040a 	adc.w	r4, sl, sl
 800409a:	4699      	mov	r9, r3
 800409c:	46a2      	mov	sl, r4
 800409e:	eb19 090b 	adds.w	r9, r9, fp
 80040a2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80040a6:	f04f 0100 	mov.w	r1, #0
 80040aa:	f04f 0200 	mov.w	r2, #0
 80040ae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80040b2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80040b6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80040ba:	4689      	mov	r9, r1
 80040bc:	4692      	mov	sl, r2
 80040be:	eb1b 0509 	adds.w	r5, fp, r9
 80040c2:	eb4c 060a 	adc.w	r6, ip, sl
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	4619      	mov	r1, r3
 80040cc:	f04f 0200 	mov.w	r2, #0
 80040d0:	f04f 0300 	mov.w	r3, #0
 80040d4:	f04f 0400 	mov.w	r4, #0
 80040d8:	0094      	lsls	r4, r2, #2
 80040da:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80040de:	008b      	lsls	r3, r1, #2
 80040e0:	461a      	mov	r2, r3
 80040e2:	4623      	mov	r3, r4
 80040e4:	4628      	mov	r0, r5
 80040e6:	4631      	mov	r1, r6
 80040e8:	f7fc f876 	bl	80001d8 <__aeabi_uldivmod>
 80040ec:	4603      	mov	r3, r0
 80040ee:	460c      	mov	r4, r1
 80040f0:	461a      	mov	r2, r3
 80040f2:	4b77      	ldr	r3, [pc, #476]	; (80042d0 <UART_SetConfig+0x6f4>)
 80040f4:	fba3 1302 	umull	r1, r3, r3, r2
 80040f8:	095b      	lsrs	r3, r3, #5
 80040fa:	2164      	movs	r1, #100	; 0x64
 80040fc:	fb01 f303 	mul.w	r3, r1, r3
 8004100:	1ad3      	subs	r3, r2, r3
 8004102:	011b      	lsls	r3, r3, #4
 8004104:	3332      	adds	r3, #50	; 0x32
 8004106:	4a72      	ldr	r2, [pc, #456]	; (80042d0 <UART_SetConfig+0x6f4>)
 8004108:	fba2 2303 	umull	r2, r3, r2, r3
 800410c:	095b      	lsrs	r3, r3, #5
 800410e:	f003 020f 	and.w	r2, r3, #15
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4442      	add	r2, r8
 8004118:	609a      	str	r2, [r3, #8]
 800411a:	e0d0      	b.n	80042be <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800411c:	f7fe fa32 	bl	8002584 <HAL_RCC_GetPCLK1Freq>
 8004120:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	469a      	mov	sl, r3
 8004126:	f04f 0b00 	mov.w	fp, #0
 800412a:	46d0      	mov	r8, sl
 800412c:	46d9      	mov	r9, fp
 800412e:	eb18 0308 	adds.w	r3, r8, r8
 8004132:	eb49 0409 	adc.w	r4, r9, r9
 8004136:	4698      	mov	r8, r3
 8004138:	46a1      	mov	r9, r4
 800413a:	eb18 080a 	adds.w	r8, r8, sl
 800413e:	eb49 090b 	adc.w	r9, r9, fp
 8004142:	f04f 0100 	mov.w	r1, #0
 8004146:	f04f 0200 	mov.w	r2, #0
 800414a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800414e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004152:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004156:	4688      	mov	r8, r1
 8004158:	4691      	mov	r9, r2
 800415a:	eb1a 0508 	adds.w	r5, sl, r8
 800415e:	eb4b 0609 	adc.w	r6, fp, r9
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	4619      	mov	r1, r3
 8004168:	f04f 0200 	mov.w	r2, #0
 800416c:	f04f 0300 	mov.w	r3, #0
 8004170:	f04f 0400 	mov.w	r4, #0
 8004174:	0094      	lsls	r4, r2, #2
 8004176:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800417a:	008b      	lsls	r3, r1, #2
 800417c:	461a      	mov	r2, r3
 800417e:	4623      	mov	r3, r4
 8004180:	4628      	mov	r0, r5
 8004182:	4631      	mov	r1, r6
 8004184:	f7fc f828 	bl	80001d8 <__aeabi_uldivmod>
 8004188:	4603      	mov	r3, r0
 800418a:	460c      	mov	r4, r1
 800418c:	461a      	mov	r2, r3
 800418e:	4b50      	ldr	r3, [pc, #320]	; (80042d0 <UART_SetConfig+0x6f4>)
 8004190:	fba3 2302 	umull	r2, r3, r3, r2
 8004194:	095b      	lsrs	r3, r3, #5
 8004196:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	469b      	mov	fp, r3
 800419e:	f04f 0c00 	mov.w	ip, #0
 80041a2:	46d9      	mov	r9, fp
 80041a4:	46e2      	mov	sl, ip
 80041a6:	eb19 0309 	adds.w	r3, r9, r9
 80041aa:	eb4a 040a 	adc.w	r4, sl, sl
 80041ae:	4699      	mov	r9, r3
 80041b0:	46a2      	mov	sl, r4
 80041b2:	eb19 090b 	adds.w	r9, r9, fp
 80041b6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80041ba:	f04f 0100 	mov.w	r1, #0
 80041be:	f04f 0200 	mov.w	r2, #0
 80041c2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80041c6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80041ca:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80041ce:	4689      	mov	r9, r1
 80041d0:	4692      	mov	sl, r2
 80041d2:	eb1b 0509 	adds.w	r5, fp, r9
 80041d6:	eb4c 060a 	adc.w	r6, ip, sl
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	4619      	mov	r1, r3
 80041e0:	f04f 0200 	mov.w	r2, #0
 80041e4:	f04f 0300 	mov.w	r3, #0
 80041e8:	f04f 0400 	mov.w	r4, #0
 80041ec:	0094      	lsls	r4, r2, #2
 80041ee:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80041f2:	008b      	lsls	r3, r1, #2
 80041f4:	461a      	mov	r2, r3
 80041f6:	4623      	mov	r3, r4
 80041f8:	4628      	mov	r0, r5
 80041fa:	4631      	mov	r1, r6
 80041fc:	f7fb ffec 	bl	80001d8 <__aeabi_uldivmod>
 8004200:	4603      	mov	r3, r0
 8004202:	460c      	mov	r4, r1
 8004204:	461a      	mov	r2, r3
 8004206:	4b32      	ldr	r3, [pc, #200]	; (80042d0 <UART_SetConfig+0x6f4>)
 8004208:	fba3 1302 	umull	r1, r3, r3, r2
 800420c:	095b      	lsrs	r3, r3, #5
 800420e:	2164      	movs	r1, #100	; 0x64
 8004210:	fb01 f303 	mul.w	r3, r1, r3
 8004214:	1ad3      	subs	r3, r2, r3
 8004216:	011b      	lsls	r3, r3, #4
 8004218:	3332      	adds	r3, #50	; 0x32
 800421a:	4a2d      	ldr	r2, [pc, #180]	; (80042d0 <UART_SetConfig+0x6f4>)
 800421c:	fba2 2303 	umull	r2, r3, r2, r3
 8004220:	095b      	lsrs	r3, r3, #5
 8004222:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004226:	4498      	add	r8, r3
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	469b      	mov	fp, r3
 800422c:	f04f 0c00 	mov.w	ip, #0
 8004230:	46d9      	mov	r9, fp
 8004232:	46e2      	mov	sl, ip
 8004234:	eb19 0309 	adds.w	r3, r9, r9
 8004238:	eb4a 040a 	adc.w	r4, sl, sl
 800423c:	4699      	mov	r9, r3
 800423e:	46a2      	mov	sl, r4
 8004240:	eb19 090b 	adds.w	r9, r9, fp
 8004244:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004248:	f04f 0100 	mov.w	r1, #0
 800424c:	f04f 0200 	mov.w	r2, #0
 8004250:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004254:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004258:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800425c:	4689      	mov	r9, r1
 800425e:	4692      	mov	sl, r2
 8004260:	eb1b 0509 	adds.w	r5, fp, r9
 8004264:	eb4c 060a 	adc.w	r6, ip, sl
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	4619      	mov	r1, r3
 800426e:	f04f 0200 	mov.w	r2, #0
 8004272:	f04f 0300 	mov.w	r3, #0
 8004276:	f04f 0400 	mov.w	r4, #0
 800427a:	0094      	lsls	r4, r2, #2
 800427c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004280:	008b      	lsls	r3, r1, #2
 8004282:	461a      	mov	r2, r3
 8004284:	4623      	mov	r3, r4
 8004286:	4628      	mov	r0, r5
 8004288:	4631      	mov	r1, r6
 800428a:	f7fb ffa5 	bl	80001d8 <__aeabi_uldivmod>
 800428e:	4603      	mov	r3, r0
 8004290:	460c      	mov	r4, r1
 8004292:	461a      	mov	r2, r3
 8004294:	4b0e      	ldr	r3, [pc, #56]	; (80042d0 <UART_SetConfig+0x6f4>)
 8004296:	fba3 1302 	umull	r1, r3, r3, r2
 800429a:	095b      	lsrs	r3, r3, #5
 800429c:	2164      	movs	r1, #100	; 0x64
 800429e:	fb01 f303 	mul.w	r3, r1, r3
 80042a2:	1ad3      	subs	r3, r2, r3
 80042a4:	011b      	lsls	r3, r3, #4
 80042a6:	3332      	adds	r3, #50	; 0x32
 80042a8:	4a09      	ldr	r2, [pc, #36]	; (80042d0 <UART_SetConfig+0x6f4>)
 80042aa:	fba2 2303 	umull	r2, r3, r2, r3
 80042ae:	095b      	lsrs	r3, r3, #5
 80042b0:	f003 020f 	and.w	r2, r3, #15
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4442      	add	r2, r8
 80042ba:	609a      	str	r2, [r3, #8]
}
 80042bc:	e7ff      	b.n	80042be <UART_SetConfig+0x6e2>
 80042be:	bf00      	nop
 80042c0:	3714      	adds	r7, #20
 80042c2:	46bd      	mov	sp, r7
 80042c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042c8:	40011000 	.word	0x40011000
 80042cc:	40011400 	.word	0x40011400
 80042d0:	51eb851f 	.word	0x51eb851f

080042d4 <__errno>:
 80042d4:	4b01      	ldr	r3, [pc, #4]	; (80042dc <__errno+0x8>)
 80042d6:	6818      	ldr	r0, [r3, #0]
 80042d8:	4770      	bx	lr
 80042da:	bf00      	nop
 80042dc:	2000000c 	.word	0x2000000c

080042e0 <__libc_init_array>:
 80042e0:	b570      	push	{r4, r5, r6, lr}
 80042e2:	4e0d      	ldr	r6, [pc, #52]	; (8004318 <__libc_init_array+0x38>)
 80042e4:	4c0d      	ldr	r4, [pc, #52]	; (800431c <__libc_init_array+0x3c>)
 80042e6:	1ba4      	subs	r4, r4, r6
 80042e8:	10a4      	asrs	r4, r4, #2
 80042ea:	2500      	movs	r5, #0
 80042ec:	42a5      	cmp	r5, r4
 80042ee:	d109      	bne.n	8004304 <__libc_init_array+0x24>
 80042f0:	4e0b      	ldr	r6, [pc, #44]	; (8004320 <__libc_init_array+0x40>)
 80042f2:	4c0c      	ldr	r4, [pc, #48]	; (8004324 <__libc_init_array+0x44>)
 80042f4:	f000 f8e8 	bl	80044c8 <_init>
 80042f8:	1ba4      	subs	r4, r4, r6
 80042fa:	10a4      	asrs	r4, r4, #2
 80042fc:	2500      	movs	r5, #0
 80042fe:	42a5      	cmp	r5, r4
 8004300:	d105      	bne.n	800430e <__libc_init_array+0x2e>
 8004302:	bd70      	pop	{r4, r5, r6, pc}
 8004304:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004308:	4798      	blx	r3
 800430a:	3501      	adds	r5, #1
 800430c:	e7ee      	b.n	80042ec <__libc_init_array+0xc>
 800430e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004312:	4798      	blx	r3
 8004314:	3501      	adds	r5, #1
 8004316:	e7f2      	b.n	80042fe <__libc_init_array+0x1e>
 8004318:	0800454c 	.word	0x0800454c
 800431c:	0800454c 	.word	0x0800454c
 8004320:	0800454c 	.word	0x0800454c
 8004324:	08004550 	.word	0x08004550

08004328 <memset>:
 8004328:	4402      	add	r2, r0
 800432a:	4603      	mov	r3, r0
 800432c:	4293      	cmp	r3, r2
 800432e:	d100      	bne.n	8004332 <memset+0xa>
 8004330:	4770      	bx	lr
 8004332:	f803 1b01 	strb.w	r1, [r3], #1
 8004336:	e7f9      	b.n	800432c <memset+0x4>

08004338 <strtok>:
 8004338:	4b13      	ldr	r3, [pc, #76]	; (8004388 <strtok+0x50>)
 800433a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800433e:	681d      	ldr	r5, [r3, #0]
 8004340:	6dac      	ldr	r4, [r5, #88]	; 0x58
 8004342:	4606      	mov	r6, r0
 8004344:	460f      	mov	r7, r1
 8004346:	b9b4      	cbnz	r4, 8004376 <strtok+0x3e>
 8004348:	2050      	movs	r0, #80	; 0x50
 800434a:	f000 f849 	bl	80043e0 <malloc>
 800434e:	65a8      	str	r0, [r5, #88]	; 0x58
 8004350:	e9c0 4400 	strd	r4, r4, [r0]
 8004354:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8004358:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800435c:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8004360:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8004364:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8004368:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800436c:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8004370:	6184      	str	r4, [r0, #24]
 8004372:	7704      	strb	r4, [r0, #28]
 8004374:	6244      	str	r4, [r0, #36]	; 0x24
 8004376:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8004378:	4639      	mov	r1, r7
 800437a:	4630      	mov	r0, r6
 800437c:	2301      	movs	r3, #1
 800437e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004382:	f000 b803 	b.w	800438c <__strtok_r>
 8004386:	bf00      	nop
 8004388:	2000000c 	.word	0x2000000c

0800438c <__strtok_r>:
 800438c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800438e:	b918      	cbnz	r0, 8004398 <__strtok_r+0xc>
 8004390:	6810      	ldr	r0, [r2, #0]
 8004392:	b908      	cbnz	r0, 8004398 <__strtok_r+0xc>
 8004394:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004396:	4620      	mov	r0, r4
 8004398:	4604      	mov	r4, r0
 800439a:	460f      	mov	r7, r1
 800439c:	f814 5b01 	ldrb.w	r5, [r4], #1
 80043a0:	f817 6b01 	ldrb.w	r6, [r7], #1
 80043a4:	b91e      	cbnz	r6, 80043ae <__strtok_r+0x22>
 80043a6:	b96d      	cbnz	r5, 80043c4 <__strtok_r+0x38>
 80043a8:	6015      	str	r5, [r2, #0]
 80043aa:	4628      	mov	r0, r5
 80043ac:	e7f2      	b.n	8004394 <__strtok_r+0x8>
 80043ae:	42b5      	cmp	r5, r6
 80043b0:	d1f6      	bne.n	80043a0 <__strtok_r+0x14>
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d1ef      	bne.n	8004396 <__strtok_r+0xa>
 80043b6:	6014      	str	r4, [r2, #0]
 80043b8:	7003      	strb	r3, [r0, #0]
 80043ba:	e7eb      	b.n	8004394 <__strtok_r+0x8>
 80043bc:	462b      	mov	r3, r5
 80043be:	e00d      	b.n	80043dc <__strtok_r+0x50>
 80043c0:	b926      	cbnz	r6, 80043cc <__strtok_r+0x40>
 80043c2:	461c      	mov	r4, r3
 80043c4:	4623      	mov	r3, r4
 80043c6:	460f      	mov	r7, r1
 80043c8:	f813 5b01 	ldrb.w	r5, [r3], #1
 80043cc:	f817 6b01 	ldrb.w	r6, [r7], #1
 80043d0:	42b5      	cmp	r5, r6
 80043d2:	d1f5      	bne.n	80043c0 <__strtok_r+0x34>
 80043d4:	2d00      	cmp	r5, #0
 80043d6:	d0f1      	beq.n	80043bc <__strtok_r+0x30>
 80043d8:	2100      	movs	r1, #0
 80043da:	7021      	strb	r1, [r4, #0]
 80043dc:	6013      	str	r3, [r2, #0]
 80043de:	e7d9      	b.n	8004394 <__strtok_r+0x8>

080043e0 <malloc>:
 80043e0:	4b02      	ldr	r3, [pc, #8]	; (80043ec <malloc+0xc>)
 80043e2:	4601      	mov	r1, r0
 80043e4:	6818      	ldr	r0, [r3, #0]
 80043e6:	f000 b803 	b.w	80043f0 <_malloc_r>
 80043ea:	bf00      	nop
 80043ec:	2000000c 	.word	0x2000000c

080043f0 <_malloc_r>:
 80043f0:	b570      	push	{r4, r5, r6, lr}
 80043f2:	1ccd      	adds	r5, r1, #3
 80043f4:	f025 0503 	bic.w	r5, r5, #3
 80043f8:	3508      	adds	r5, #8
 80043fa:	2d0c      	cmp	r5, #12
 80043fc:	bf38      	it	cc
 80043fe:	250c      	movcc	r5, #12
 8004400:	2d00      	cmp	r5, #0
 8004402:	4606      	mov	r6, r0
 8004404:	db01      	blt.n	800440a <_malloc_r+0x1a>
 8004406:	42a9      	cmp	r1, r5
 8004408:	d903      	bls.n	8004412 <_malloc_r+0x22>
 800440a:	230c      	movs	r3, #12
 800440c:	6033      	str	r3, [r6, #0]
 800440e:	2000      	movs	r0, #0
 8004410:	bd70      	pop	{r4, r5, r6, pc}
 8004412:	f000 f857 	bl	80044c4 <__malloc_lock>
 8004416:	4a21      	ldr	r2, [pc, #132]	; (800449c <_malloc_r+0xac>)
 8004418:	6814      	ldr	r4, [r2, #0]
 800441a:	4621      	mov	r1, r4
 800441c:	b991      	cbnz	r1, 8004444 <_malloc_r+0x54>
 800441e:	4c20      	ldr	r4, [pc, #128]	; (80044a0 <_malloc_r+0xb0>)
 8004420:	6823      	ldr	r3, [r4, #0]
 8004422:	b91b      	cbnz	r3, 800442c <_malloc_r+0x3c>
 8004424:	4630      	mov	r0, r6
 8004426:	f000 f83d 	bl	80044a4 <_sbrk_r>
 800442a:	6020      	str	r0, [r4, #0]
 800442c:	4629      	mov	r1, r5
 800442e:	4630      	mov	r0, r6
 8004430:	f000 f838 	bl	80044a4 <_sbrk_r>
 8004434:	1c43      	adds	r3, r0, #1
 8004436:	d124      	bne.n	8004482 <_malloc_r+0x92>
 8004438:	230c      	movs	r3, #12
 800443a:	6033      	str	r3, [r6, #0]
 800443c:	4630      	mov	r0, r6
 800443e:	f000 f842 	bl	80044c6 <__malloc_unlock>
 8004442:	e7e4      	b.n	800440e <_malloc_r+0x1e>
 8004444:	680b      	ldr	r3, [r1, #0]
 8004446:	1b5b      	subs	r3, r3, r5
 8004448:	d418      	bmi.n	800447c <_malloc_r+0x8c>
 800444a:	2b0b      	cmp	r3, #11
 800444c:	d90f      	bls.n	800446e <_malloc_r+0x7e>
 800444e:	600b      	str	r3, [r1, #0]
 8004450:	50cd      	str	r5, [r1, r3]
 8004452:	18cc      	adds	r4, r1, r3
 8004454:	4630      	mov	r0, r6
 8004456:	f000 f836 	bl	80044c6 <__malloc_unlock>
 800445a:	f104 000b 	add.w	r0, r4, #11
 800445e:	1d23      	adds	r3, r4, #4
 8004460:	f020 0007 	bic.w	r0, r0, #7
 8004464:	1ac3      	subs	r3, r0, r3
 8004466:	d0d3      	beq.n	8004410 <_malloc_r+0x20>
 8004468:	425a      	negs	r2, r3
 800446a:	50e2      	str	r2, [r4, r3]
 800446c:	e7d0      	b.n	8004410 <_malloc_r+0x20>
 800446e:	428c      	cmp	r4, r1
 8004470:	684b      	ldr	r3, [r1, #4]
 8004472:	bf16      	itet	ne
 8004474:	6063      	strne	r3, [r4, #4]
 8004476:	6013      	streq	r3, [r2, #0]
 8004478:	460c      	movne	r4, r1
 800447a:	e7eb      	b.n	8004454 <_malloc_r+0x64>
 800447c:	460c      	mov	r4, r1
 800447e:	6849      	ldr	r1, [r1, #4]
 8004480:	e7cc      	b.n	800441c <_malloc_r+0x2c>
 8004482:	1cc4      	adds	r4, r0, #3
 8004484:	f024 0403 	bic.w	r4, r4, #3
 8004488:	42a0      	cmp	r0, r4
 800448a:	d005      	beq.n	8004498 <_malloc_r+0xa8>
 800448c:	1a21      	subs	r1, r4, r0
 800448e:	4630      	mov	r0, r6
 8004490:	f000 f808 	bl	80044a4 <_sbrk_r>
 8004494:	3001      	adds	r0, #1
 8004496:	d0cf      	beq.n	8004438 <_malloc_r+0x48>
 8004498:	6025      	str	r5, [r4, #0]
 800449a:	e7db      	b.n	8004454 <_malloc_r+0x64>
 800449c:	20000090 	.word	0x20000090
 80044a0:	20000094 	.word	0x20000094

080044a4 <_sbrk_r>:
 80044a4:	b538      	push	{r3, r4, r5, lr}
 80044a6:	4c06      	ldr	r4, [pc, #24]	; (80044c0 <_sbrk_r+0x1c>)
 80044a8:	2300      	movs	r3, #0
 80044aa:	4605      	mov	r5, r0
 80044ac:	4608      	mov	r0, r1
 80044ae:	6023      	str	r3, [r4, #0]
 80044b0:	f7fc fa84 	bl	80009bc <_sbrk>
 80044b4:	1c43      	adds	r3, r0, #1
 80044b6:	d102      	bne.n	80044be <_sbrk_r+0x1a>
 80044b8:	6823      	ldr	r3, [r4, #0]
 80044ba:	b103      	cbz	r3, 80044be <_sbrk_r+0x1a>
 80044bc:	602b      	str	r3, [r5, #0]
 80044be:	bd38      	pop	{r3, r4, r5, pc}
 80044c0:	20012eb8 	.word	0x20012eb8

080044c4 <__malloc_lock>:
 80044c4:	4770      	bx	lr

080044c6 <__malloc_unlock>:
 80044c6:	4770      	bx	lr

080044c8 <_init>:
 80044c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044ca:	bf00      	nop
 80044cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044ce:	bc08      	pop	{r3}
 80044d0:	469e      	mov	lr, r3
 80044d2:	4770      	bx	lr

080044d4 <_fini>:
 80044d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044d6:	bf00      	nop
 80044d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044da:	bc08      	pop	{r3}
 80044dc:	469e      	mov	lr, r3
 80044de:	4770      	bx	lr
